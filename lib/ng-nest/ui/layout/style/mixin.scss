// Layout

@use 'sass:math';
@use 'sass:meta';
@use '../../style/params/index.scss' as *;
@use '../../style/mixins/flex.scss' as *;
@use './param.scss' as *;

@mixin row {
  display: block;
  position: relative;
  height: auto;
  &:before,
  &:after {
    content: '';
    display: table;
    clear: both;
  }
  @include flex();
}

@mixin media-screen($key, $value) {
  $col-layout-initial: $x-col-layout;
  @while $col-layout-initial>0 {
    $col-percentage: math.div(100% * $col-layout-initial, $x-col-layout);
    @media only screen and #{meta.inspect($value)} {
      &-#{$key}-#{$col-layout-initial} {
        width: $col-percentage;
      }
    }
    $col-layout-initial: $col-layout-initial - 1;
  }
}

@mixin col {
  position: relative;
  float: left;
  display: block;
  width: 100%;
  box-sizing: border-box;
  $col-layout-initial: $x-col-layout;
  @while $col-layout-initial>0 {
    $col-percentage: math.div(100% * $col-layout-initial, $x-col-layout);
    &-#{$col-layout-initial} {
      width: $col-percentage;
    }
    &-offset-#{$col-layout-initial} {
      margin-left: $col-percentage;
    }
    $col-layout-initial: $col-layout-initial - 1;
  }
  @each $key, $value in $x-size-range {
    @include media-screen($key, $value);
  }
  &-inherit {
    width: inherit;
  }
}
