/* DO NOT EDIT, file generated by ng-nest */
import { AppProp } from "./core.interface";

export const en_US: {[key: string]: AppProp} = {
  "XBadgeAnimation": {
    "type": "const",
    "label": "Badge animation",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XBadgeAnimation",
    "value": "trigger('x-badge-animation', [transition(':enter', [style({ opacity: 0, transform: 'scale(0) translate(50%, -50%)' }),animate(XDURATION_SLOW_EASE_IN,style({opacity: 1,transform: 'scale(1) translate(50%, -50%)'}))]),transition(':leave', [style({ opacity: 1, transform: 'scale(1) translate(50%, -50%)' }),animate(XDURATION_SLOW_EASE_OUT,style({opacity: 0,transform: 'scale(0) translate(50%, -50%)'}))])])"
  },
  "XConnectBaseAnimation": {
    "type": "const",
    "label": "The animation when the bomb frame is connected, only the y-axis",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XConnectBaseAnimation",
    "value": "trigger('x-connect-base-animation', [transition(':enter', [style({ opacity: 0, transform: 'scaleY(0.8)' }), animate(XDURATION_FAST_EASE_IN)]),transition(':leave', [animate(XDURATION_FAST_EASE_OUT, style({ opacity: 0 }))])])"
  },
  "XDuration": {
    "type": "enum",
    "label": "Animation execution time",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDuration",
    "value": "{Slow = '0.3s',Base = '0.2s',Fast = '0.1s'}"
  },
  "XMoveAnimation": {
    "type": "const",
    "label": "Move in the animation",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMoveAnimation",
    "value": "trigger('x-move-animation', [transition('void => top-start, void => top, void => top-end, void => center', [style({transform: 'translateY(-200%)',opacity: 0}),animate(`${XDuration.Base}`,style({transform: 'translateY(0%)',opacity: 1}))]),transition('top-start => void, top => void, top-end => void, center => void', [style({transform: 'translateY(0%)',opacity: 1,height: '*'}),animate(`${XDuration.Base}`,style({transform: 'translateY(-200%)',opacity: 0,height: 0}))]),transition('void => left', [style({transform: 'translateX(-30%)',opacity: 0}),animate(`${XDuration.Base}`,style({transform: 'translateX(0%)',opacity: 1}))]),transition('left => void', [style({transform: 'translateX(0%)',opacity: 1,height: '*'}),animate(`${XDuration.Base}`,style({transform: 'translateX(-30%)',opacity: 0,height: 0}))]),transition('void => right', [style({transform: 'translateX(30%)',opacity: 0}),animate(`${XDuration.Base}`,style({transform: 'translateX(0%)',opacity: 1}))]),transition('right => void', [style({transform: 'translateX(0%)',opacity: 1,height: '*'}),animate(`${XDuration.Base}`,style({transform: 'translateX(30%)',opacity: 0,height: 0}))]),transition('void => bottom-start, void => bottom, void => bottom-end', [style({transform: 'translateY(200%)',opacity: 0,height: 0}),animate(`${XDuration.Base}`,style({transform: 'translateY(0%)',opacity: 1,height: '*'}))]),transition('bottom-start => void, bottom => void, bottom-end => void', [style({transform: 'translateY(0%)',opacity: 1}),animate(`${XDuration.Base}`,style({transform: 'translateY(200%)',opacity: 0}))])])"
  },
  "XConfig": {
    "type": "interface",
    "label": "Component and theme global configuration information",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "components",
        "type": "XComponentConfig",
        "label": "Component configuration information",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "components",
        "propType": "",
        "example": ""
      },
      {
        "name": "theme",
        "type": "XTheme",
        "label": "theme configuration information",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "theme",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XConfig"
  },
  "XComponentConfig": {
    "type": "interface",
    "label": "Global configuration of the component",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XComponentConfig"
  },
  "XChunk<T>": {
    "type": "function",
    "label": "This function is used to split the given array into multiple decimal arrays",
    "description": "The length of each decimal array is specified by the second parameter of the function, and the default is 1.\nIf the given array is empty or the length of the decimal array is less than equal to 0, the function returns a empty array.\nThe function traverses the given array by circulating, and uses the Slice method to split the array into a decimal array,\nthen add the decimal array to the result array, and finally return the result array.",
    "example": "",
    "properties": [],
    "name": "XChunk<T>",
    "params": {
      "array": "Array<T>"
    },
    "returnType": "Array<Array<T>>"
  },
  "XCloneDeep": {
    "type": "function",
    "label": "This function is a deep copy function that is used for a cloning object or array",
    "description": "It will recover all the attributes of the object, including nested objects and array, and generate a new independent copy.\nFor non object and non -array type values, return that value directly.\nThe function accepts a parameter Value, indicating that the value of deep copy needs to be performed.\nFirst create a empty result object Result. If Value is an array, Result is also an empty array.\nIt traverses all the attributes of Value. If the attribute is an object, the recursively calls the XCLONEDEEP function for deep copy, and assign the result to the corresponding attributes corresponding to Result.\nFinally return to Result, that is, the object or array after the deep copy.",
    "example": "",
    "properties": [],
    "name": "XCloneDeep",
    "params": {
      "value": "any"
    },
    "returnType": "any"
  },
  "XToBoolean": {
    "type": "function",
    "label": "Convert the value to boolean value",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XToBoolean",
    "params": {
      "value": "XBoolean"
    },
    "returnType": "boolean"
  },
  "XToCssPixelValue": {
    "type": "function",
    "label": "Convert the value to pixels",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XToCssPixelValue",
    "params": {
      "value": "XNumber"
    },
    "returnType": "string"
  },
  "XToNumber": {
    "type": "function",
    "label": "Convert the value to Number value",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XToNumber",
    "params": {
      "value": "XNumber",
      "fallback": "D"
    },
    "returnType": "port function XToNumber(value: XNumber, fallbackValue?: number): number"
  },
  "XToDataConvert<T>": {
    "type": "function",
    "label": "Convert value as the specified list data [{ label: any; id: any }, ....]",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XToDataConvert<T>",
    "params": {
      "value": "XData<T>"
    },
    "returnType": "XData<T>"
  },
  "XToDataArray<T>": {
    "type": "function",
    "label": "Convert value as the specified list data [{ label: any; id: any }, ....]",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XToDataArray<T>",
    "params": {
      "value": "XDataArray<T>"
    },
    "returnType": "T[]"
  },
  "XSetData<T>": {
    "type": "function",
    "label": "Obtain actual data based on the type of data",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSetData<T>",
    "params": {
      "data": "XData<T>",
      "unSubject": "Subject<void>",
      "funcParam": "any"
    },
    "returnType": "Observable<T[]>"
  },
  "XGetChildren<T extends XParentIdentityProperty<T>>": {
    "type": "function",
    "label": "Obtain sub-nodes based on ID and PID",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XGetChildren<T extends XParentIdentityProperty<T>>",
    "params": {
      "nodes": "T[]",
      "node": "T",
      "level": "number"
    },
    "returnType": "T"
  },
  "XInvertKeyValues": {
    "type": "function",
    "label": "Reversal the key value of the object",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XInvertKeyValues",
    "params": {
      "obj": "any"
    },
    "returnType": "Map<any, any>"
  },
  "XClearClass": {
    "type": "function",
    "label": "Set style name is false",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XClearClass",
    "params": {
      "classMaps": "XClassMap[]"
    },
    "returnType": "void"
  },
  "XClearClassSignal": {
    "type": "function",
    "label": "Set style name is false",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XClearClassSignal",
    "params": {
      "classMaps": "WritableSignal<XClassMap>"
    },
    "returnType": "void"
  },
  "XPropDecorator": {
    "type": "type",
    "label": "Attribute decorator return type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPropDecorator",
    "value": "(target: any, propName: string) => void"
  },
  "XInputBoolean": {
    "type": "function",
    "label": "Create XInputBoolean Properties",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XInputBoolean",
    "params": {},
    "returnType": "XPropDecorator"
  },
  "XInputNumber": {
    "type": "function",
    "label": "Create XInputNumber Properties",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XInputNumber",
    "params": {},
    "returnType": "XPropDecorator"
  },
  "XInputCssPixelValue": {
    "type": "function",
    "label": "Create XInputNumber Properties",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XInputCssPixelValue",
    "params": {},
    "returnType": "XPropDecorator"
  },
  "XDataConvert": {
    "type": "function",
    "label": "Create XDataConvert Properties",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDataConvert",
    "params": {},
    "returnType": "XPropDecorator"
  },
  "XClamp": {
    "type": "function",
    "label": "Limit the range of the given value value",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XClamp",
    "params": {
      "value": "number",
      "min": "number",
      "max": "number"
    },
    "returnType": "number"
  },
  "XToCssPx": {
    "type": "function",
    "label": "Convert CSS PX to pixel width",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XToCssPx",
    "params": {
      "csspx": "string"
    },
    "returnType": "number)"
  },
  "XDate": {
    "type": "type",
    "label": "Date type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDate",
    "value": "string | Date | number"
  },
  "XToDate": {
    "type": "function",
    "label": "Convert to date",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XToDate",
    "params": {
      "date": "XDate"
    },
    "returnType": "Date"
  },
  "XAddMilliseconds": {
    "type": "function",
    "label": "Add milliseconds to the date, the negative number is reduced",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAddMilliseconds",
    "params": {
      "date": "XDate",
      "amount": "number"
    },
    "returnType": "Date"
  },
  "XAddSeconds": {
    "type": "function",
    "label": "Date adds seconds, the negative number is reduced",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAddSeconds",
    "params": {
      "date": "XDate",
      "amount": "number"
    },
    "returnType": "Date"
  },
  "XAddMinutes": {
    "type": "function",
    "label": "Date adds minutes, the negative number is reduced",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAddMinutes",
    "params": {
      "date": "XDate",
      "amount": "number"
    },
    "returnType": "Date"
  },
  "XAddHours": {
    "type": "function",
    "label": "Date adds hours, the negative number is reduced",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAddHours",
    "params": {
      "date": "XDate",
      "amount": "number"
    },
    "returnType": "Date"
  },
  "XAddDays": {
    "type": "function",
    "label": "Date adds days, the negative number is reduced",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAddDays",
    "params": {
      "date": "XDate",
      "amount": "number"
    },
    "returnType": "Date"
  },
  "XAddMonths": {
    "type": "function",
    "label": "Date adds monthly number, negative number is reduced",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAddMonths",
    "params": {
      "date": "XDate",
      "amount": "number"
    },
    "returnType": "Date"
  },
  "XAddYears": {
    "type": "function",
    "label": "The number of years of date, the negative number is reduced",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAddYears",
    "params": {
      "date": "XDate",
      "amount": "number"
    },
    "returnType": "Date"
  },
  "XDateWeek": {
    "type": "function",
    "label": "Get the number of ISO weeks of the given date",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDateWeek",
    "params": {
      "date": "XDate"
    },
    "returnType": "number | undefined"
  },
  "XDateWeekYear": {
    "type": "function",
    "label": "Get the ISO anniversary of the specified date",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDateWeekYear",
    "params": {
      "date": "XDate"
    },
    "returnType": "number | undefined"
  },
  "XDateYearWeek": {
    "type": "function",
    "label": "Get the year and week of the specified date",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDateYearWeek",
    "params": {
      "date": "XDate"
    },
    "returnType": "string"
  },
  "XDateYearQuarter": {
    "type": "function",
    "label": "Get the year and quarter of the specified date",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDateYearQuarter",
    "params": {
      "date": "XDate"
    },
    "returnType": "string"
  },
  "XDateQuarter": {
    "type": "function",
    "label": "Get the season when the specified date belongs",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDateQuarter",
    "params": {
      "date": "XDate"
    },
    "returnType": "string"
  },
  "XDrop<T>": {
    "type": "function",
    "label": "Send the array by parameter n",
    "description": "If n is not defined or 0, returns the same array as the original array\nIf the original array length is less than 1 or less than equal to N, return a empty array\nIf n is greater than 0, cut off the sub-array starting from the nn element to the end of the array\nIf n is less than or equal to 0, cut off from the 0th element to the countless nary element",
    "example": "",
    "properties": [],
    "name": "XDrop<T>",
    "params": {
      "array": "Array<T>"
    },
    "returnType": "Array<T>"
  },
  "XSetFlex": {
    "type": "function",
    "label": "Flex style for setting elements",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSetFlex",
    "params": {
      "ele": "Element",
      "renderer": "Renderer2"
    },
    "returnType": "string[]"
  },
  "XGroupBy<T>": {
    "type": "function",
    "label": "Based on the array according to the attribute name",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XGroupBy<T>",
    "params": {
      "array": "T[]",
      "name": "string"
    },
    "returnType": "Array<Array<T>>"
  },
  "XGuid": {
    "type": "function",
    "label": "GUID",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XGuid",
    "params": {},
    "returnType": "string"
  },
  "XHasIn": {
    "type": "function",
    "label": "Determine whether an object contains the specified attribute",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XHasIn",
    "params": {
      "object": "Object",
      "key": "string"
    },
    "returnType": "boolean"
  },
  "XOrderBy<T>": {
    "type": "function",
    "label": "Sort by specified elements",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XOrderBy<T>",
    "params": {
      "collection": "Array<T>",
      "iteratees": "Array<string>"
    },
    "returnType": "Array<T>"
  },
  "XParentPath": {
    "type": "function",
    "label": "The parent node of the element",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XParentPath",
    "params": {
      "ele": "HTMLElement"
    },
    "returnType": "string[]"
  },
  "XParents": {
    "type": "function",
    "label": "The parent element path of obtaining elements",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XParents",
    "params": {
      "ele": "HTMLElement"
    },
    "returnType": "HTMLElement[]"
  },
  "XProperty": {
    "type": "class",
    "label": "Component of public properties",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XProperty"
  },
  "XPropertyFunction<T extends XComponentConfigKey>": {
    "type": "function",
    "label": "Component of public properties, through the function returns, into the global configuration",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPropertyFunction<T extends XComponentConfigKey>",
    "params": {},
    "returnType": "T)"
  },
  "XRemove<T>": {
    "type": "function",
    "label": "Remove elements that meet the conditions from the array and return the array of the removal element",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XRemove<T>",
    "params": {
      "array": "Array<T>",
      "value": "T"
    },
    "returnType": "Array<T>"
  },
  "XResizeObserver": {
    "type": "type",
    "label": "Monitoring elements of the size of the boundary size",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XResizeObserver",
    "value": "ResizeObserver | null"
  },
  "XResizeObserverEntry": {
    "type": "type",
    "label": "Object of ResizeobServer's callback function parameter",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XResizeObserverEntry",
    "value": "ResizeObserverEntry | null"
  },
  "XResize": {
    "type": "function",
    "label": "The function of this function is to create an Observable to monitor the size changes of multiple elements.",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XResize",
    "params": {
      "element": "Element[]",
      "entry": "XResizeObserverEntry"
    },
    "returnType": "Observable<{ entry: XResizeObserverEntry; resizeObserver: XResizeObserver }>"
  },
  "XData<T>": {
    "type": "type",
    "label": "Data data type",
    "description": "General generic data types, generally is index set,\ncan subscribe to the object and flow data for the array, function, etc",
    "example": "",
    "properties": [],
    "name": "XData<T>",
    "value": "T[] | Observable<T[] | any[]> | any[] | Function"
  },
  "XDataArray<T>": {
    "type": "type",
    "label": "Data data type",
    "description": "General generic data types, generally is index set",
    "example": "",
    "properties": [],
    "name": "XDataArray<T>",
    "value": "string | number | (T | string | number)[]"
  },
  "XBoolean": {
    "type": "type",
    "label": "Boolean data type",
    "description": "This type as a component of the input parameters,\nusually with `XToBoolean` decorator to process parameters,\ndirectly into true or false",
    "example": "```html\n// true\n<my-component disabled></my-component>\n<my-component disabled=\"true\"></my-component>\n<my-component [disabled]=\"true\"></my-component>\n\n// false\n<my-component disabled=\"false\"></my-component>\n<my-component [disabled]=\"false\"></my-component>\n```\n",
    "properties": [],
    "name": "XBoolean",
    "value": "boolean | string"
  },
  "XNumber": {
    "type": "type",
    "label": "Number data type",
    "description": "This type as the input parameters of the component, generally use `XToNumber` conversion function, converted to digital type\nIf the width of the high is through `XToCssPixelValue` conversion function, convert the string size",
    "example": "```html\n// XToNumber => num = 10\n<my-component max=\"10\"></my-component>\n<my-component [max]=\"10\"></my-component>\n<my-component [max]=\"'10'\"></my-component>\n\n// XToCssPixelValue\n// width = '200px'\n<my-component width=\"200\"></my-component>\n<my-component width=\"200px\"></my-component>\n<my-component [width]=\"200\"></my-component>\n<my-component [width]=\"'200'\"></my-component>\n<my-component [width]=\"'200px'\"></my-component>\n// width = '20rem'\n<my-component width=\"20rem\"></my-component>\n<my-component [width]=\"'20rem'\"></my-component>\n// width = '50%'\n<my-component width=\"50%\"></my-component>\n<my-component [width]=\"'50%'\"></my-component>\n```\n",
    "properties": [],
    "name": "XNumber",
    "value": "number | string"
  },
  "XTemplate": {
    "type": "type",
    "label": "Template type",
    "description": "Usually cooperate `outlet` instructions to specify a parameter can be as the basic data types, can also be used as a template",
    "example": "```html\n// label = \"string\"\n<ng-container *xOutlet=\"label\">{{ label }}</ng-container>\n\n<ng-container *xOutlet=\"labelTpl\">{{ labelTpl }}</ng-container>\n<ng-template #labelTpl>this is a label template</ng-template>\n```\n",
    "properties": [],
    "name": "XTemplate",
    "value": "string | number | Date | TemplateRef<any>"
  },
  "XTypeFunc": {
    "type": "type",
    "label": "Function return type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTypeFunc",
    "value": "(object: any) => boolean"
  },
  "XIsType": {
    "type": "function",
    "label": "Type judgment",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsType",
    "params": {
      "type": "string"
    },
    "returnType": "XTypeFunc"
  },
  "XIsChange": {
    "type": "function",
    "label": "Value change judgment",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsChange",
    "params": {
      "changes": "SimpleChange[]"
    },
    "returnType": "boolean"
  },
  "XIsString": {
    "type": "function",
    "label": "Determine whether the given value is a string type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsString",
    "params": {
      "value": "any"
    },
    "returnType": "value is string"
  },
  "XIsArray<T>": {
    "type": "function",
    "label": "Determine whether the given value is a array type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsArray<T>",
    "params": {
      "value": "any"
    },
    "returnType": "value is Array<T>"
  },
  "XIsNumber": {
    "type": "function",
    "label": "Determine whether the given value is a number type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsNumber",
    "params": {
      "value": "any"
    },
    "returnType": "value is number"
  },
  "XIsBoolean": {
    "type": "function",
    "label": "Determine whether the given value is a boolean type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsBoolean",
    "params": {
      "value": "any"
    },
    "returnType": "value is boolean"
  },
  "XIsObject<T>": {
    "type": "function",
    "label": "Determine whether the given value is a object type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsObject<T>",
    "params": {
      "value": "any"
    },
    "returnType": "value is T"
  },
  "XIsNull": {
    "type": "function",
    "label": "Determine whether the given value is a null type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsNull",
    "params": {
      "value": "any"
    },
    "returnType": "value is null"
  },
  "XIsFunction": {
    "type": "function",
    "label": "Determine whether the given value is a function type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsFunction",
    "params": {
      "value": "any"
    },
    "returnType": "value is Function"
  },
  "XIsDate": {
    "type": "function",
    "label": "Determine whether the given value is a date type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsDate",
    "params": {
      "value": "any"
    },
    "returnType": "value is Date"
  },
  "XIsRegExp": {
    "type": "function",
    "label": "Determine whether the given value is a regular expression",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsRegExp",
    "params": {
      "value": "any"
    },
    "returnType": "value is RegExp"
  },
  "XIsUndefined": {
    "type": "function",
    "label": "Determine whether the given value is undefined",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsUndefined",
    "params": {
      "value": "any"
    },
    "returnType": "value is undefined"
  },
  "XIsValue<T>": {
    "type": "function",
    "label": "Determine whether the given value is a string, number, Boolean value or date",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsValue<T>",
    "params": {
      "object": "any"
    },
    "returnType": "object is T"
  },
  "XIsEmpty": {
    "type": "function",
    "label": "Determine whether an object is empty",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsEmpty",
    "params": {},
    "returnType": "any)"
  },
  "XIsValueArray<T>": {
    "type": "function",
    "label": "Determine whether the given object is a non -empty array",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsValueArray<T>",
    "params": {
      "object": "any"
    },
    "returnType": "object is T"
  },
  "XIsObjectArray<T>": {
    "type": "function",
    "label": "Determine whether the given object is a non -empty object array",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsObjectArray<T>",
    "params": {
      "object": "any"
    },
    "returnType": "object is T"
  },
  "XIsObservable<T>": {
    "type": "function",
    "label": "Determine whether the given object is observable",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsObservable<T>",
    "params": {
      "object": "any"
    },
    "returnType": "object is Observable<T>"
  },
  "XIsTemplateRef<T>": {
    "type": "function",
    "label": "Determine whether the given object is TemplateRef",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsTemplateRef<T>",
    "params": {
      "object": "any"
    },
    "returnType": "object is TemplateRef<T>"
  },
  "XIsXTemplate": {
    "type": "function",
    "label": "Determine whether the given object is XTemplateRef",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsXTemplate",
    "params": {
      "object": "any"
    },
    "returnType": "object is XTemplate"
  },
  "XIsInputSignal": {
    "type": "function",
    "label": "Determine whether a given object for InputSignal",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsInputSignal",
    "params": {
      "object": "any"
    },
    "returnType": "object is InputSignal<any>"
  },
  "XIdentityProperty": {
    "type": "interface",
    "label": "Identify object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "id",
        "type": "any",
        "label": "Id",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "id",
        "propType": "",
        "example": ""
      },
      {
        "name": "label",
        "type": "any",
        "label": "Label",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "label",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XIdentityProperty"
  },
  "XParentIdentityProperty<T>": {
    "type": "interface",
    "label": "Father node identification object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "pid",
        "type": "any",
        "label": "Parent Id",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "pid",
        "propType": "",
        "example": ""
      },
      {
        "name": "level",
        "type": "number",
        "label": "Level",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "level",
        "propType": "",
        "example": ""
      },
      {
        "name": "leaf",
        "type": "boolean",
        "label": "Leaf node",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "leaf",
        "propType": "",
        "example": ""
      },
      {
        "name": "children",
        "type": "T[]",
        "label": "Children node",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "children",
        "propType": "",
        "example": ""
      },
      {
        "name": "childrenLoaded",
        "type": "boolean",
        "label": "Sub node has been loaded",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "childrenLoaded",
        "propType": "",
        "example": ""
      },
      {
        "name": "selected",
        "type": "boolean",
        "label": "Selected",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "selected",
        "propType": "",
        "example": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "label": "Disabled",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "disabled",
        "propType": "",
        "example": ""
      },
      {
        "name": "open",
        "type": "boolean",
        "label": "open",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "open",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XParentIdentityProperty<T>",
    "extends": "XIdentityProperty"
  },
  "XIdentity": {
    "type": "class",
    "label": "Identify object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "id",
        "type": "any",
        "label": "Id",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "id",
        "propType": "",
        "example": ""
      },
      {
        "name": "label",
        "type": "any",
        "label": "Label",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "label",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XIdentity"
  },
  "XPositionLeftRight": {
    "type": "type",
    "label": "position left, right",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPositionLeftRight",
    "value": "'left' | 'right'"
  },
  "XPositionTopBottom": {
    "type": "type",
    "label": "position top, bottom",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPositionTopBottom",
    "value": "'top' | 'bottom'"
  },
  "XPosition": {
    "type": "type",
    "label": "position",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPosition",
    "value": "XPositionTopBottom | XPositionLeftRight"
  },
  "XType": {
    "type": "type",
    "label": "Style type",
    "description": "- `'initial'` : Initial\n- `'primary'` : Primary\n- `'success'` : Success\n- `'info'` : Info\n- `'warning'` : Warning\n- `'danger'` : Danger\n- `'text'` : Text",
    "example": "",
    "properties": [],
    "name": "XType",
    "value": "'initial' | 'primary' | 'success' | 'info' | 'warning' | 'danger' | 'text'"
  },
  "XStatus": {
    "type": "type",
    "label": "Status type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XStatus",
    "value": "'success' | 'info' | 'warning' | 'error' | 'loading'"
  },
  "XClassMap": {
    "type": "type",
    "label": "Style name mapping type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XClassMap",
    "value": "{ [property: string]: boolean }"
  },
  "XStyleMap": {
    "type": "type",
    "label": "Style mapping type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XStyleMap",
    "value": "{ [property: string]: any }"
  },
  "XEffect": {
    "type": "type",
    "label": "Style theme",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XEffect",
    "value": "'light' | 'dark' | 'white'"
  },
  "XStyle": {
    "type": "type",
    "label": "Style attribute",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XStyle",
    "value": "{ [property: string]: any }"
  },
  "XSize": {
    "type": "type",
    "label": "Size",
    "description": "- `'big'` : Big\n- `'large'` : Large\n- `'medium'` : Medium\n- `'small'` : Small\n- `'mini'` : Mini",
    "example": "",
    "properties": [],
    "name": "XSize",
    "value": "'big' | 'large' | 'medium' | 'small' | 'mini'"
  },
  "XResponseSize": {
    "type": "type",
    "label": "Response size",
    "description": "- `xs` <768px\n- `sm` ≥768px\n- `md` ≥992px\n- `lg` ≥1200px\n- `xl` ≥1920px",
    "example": "",
    "properties": [],
    "name": "XResponseSize",
    "value": "{ xs?: number; sm?: number; md?: number; lg?: number; xl?: number }"
  },
  "XJustify": {
    "type": "type",
    "label": "The level of sub element level arrangement under flex layout",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XJustify",
    "value": "'start' | 'end' | 'center' | 'space-around' | 'space-between'"
  },
  "XAlign": {
    "type": "type",
    "label": "Sub element vertical arrangement method under flex layout",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAlign",
    "value": "'start' | 'center' | 'end'"
  },
  "XDirection": {
    "type": "type",
    "label": "The direction of the sub element arrangement under flex layout",
    "description": "- `'column'` : Arranges flex items vertically from top to bottom, like columns. This is the default value\n- `'column-reverse'` : Opposite of column, arranges flex items vertically from bottom to top\n- `'row'` : Arranges flex items horizontally from left to right, like a row\n- `'row-reverse'` : Opposite of row, arranges flex items horizontally from right to",
    "example": "",
    "properties": [],
    "name": "XDirection",
    "value": "'column' | 'column-reverse' | 'row' | 'row-reverse'"
  },
  "XPlacement": {
    "type": "type",
    "label": "Relatively and connected element position",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPlacement",
    "value": "XPosition | XCorner | 'left-start' | 'left-end' | 'right-start' | 'right-end'"
  },
  "XCorner": {
    "type": "type",
    "label": "Four corners",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCorner",
    "value": "'top-start' | 'top-end' | 'bottom-start' | 'bottom-end'"
  },
  "XPlace": {
    "type": "type",
    "label": "Jiugong grid position",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPlace",
    "value": "XPosition | XCorner | 'center'"
  },
  "XShape": {
    "type": "type",
    "label": "Shape",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XShape",
    "value": "'circle' | 'square'"
  },
  "XFit": {
    "type": "type",
    "label": "Adaptation type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XFit",
    "value": "'fill' | 'contain' | 'cover' | 'none' | 'scale-down'"
  },
  "XShadow": {
    "type": "type",
    "label": "Shadow display configuration",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XShadow",
    "value": "'always' | 'hover' | 'never'"
  },
  "XTrigger": {
    "type": "type",
    "label": "Switching event",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTrigger",
    "value": "'hover' | 'click'"
  },
  "XDisplayDirection": {
    "type": "type",
    "label": "Direction of display",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDisplayDirection",
    "value": "'horizontal' | 'vertical'"
  },
  "XId": {
    "type": "interface",
    "label": "Identify",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "id",
        "type": "string | number",
        "label": "Identify",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "id",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XId"
  },
  "XResultList<Entity": {
    "type": "interface",
    "label": "List back data",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "list",
        "type": "Entity[]",
        "label": "List data",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "list",
        "propType": "",
        "example": ""
      },
      {
        "name": "total",
        "type": "number",
        "label": "Total",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "total",
        "propType": "",
        "example": ""
      },
      {
        "name": "query",
        "type": "XQuery",
        "label": "Query conditions",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "query",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XResultList<Entity",
    "extends": "XId>"
  },
  "XQuery": {
    "type": "interface",
    "label": "Query conditions",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "index",
        "type": "number",
        "label": "which page",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "index",
        "propType": "",
        "example": ""
      },
      {
        "name": "size",
        "type": "number",
        "label": "page number",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "size",
        "propType": "",
        "example": ""
      },
      {
        "name": "sort",
        "type": "XSort[]",
        "label": "Sorting rules",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "sort",
        "propType": "",
        "example": ""
      },
      {
        "name": "filter",
        "type": "XFilter[]",
        "label": "Filtering rule",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "filter",
        "propType": "",
        "example": ""
      },
      {
        "name": "group",
        "type": "string",
        "label": "Packet rules",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "group",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XQuery"
  },
  "XFilter": {
    "type": "interface",
    "label": "Filtering rule",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "field",
        "type": "string",
        "label": "Filtering property",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "field",
        "propType": "",
        "example": ""
      },
      {
        "name": "value",
        "type": "string",
        "label": "Filtering value",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "value",
        "propType": "",
        "example": ""
      },
      {
        "name": "operation",
        "type": "XOperation",
        "label": "Comparative symbol",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "operation",
        "propType": "",
        "example": ""
      },
      {
        "name": "relation",
        "type": "string",
        "label": "Associated object",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "relation",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XFilter"
  },
  "XOperation": {
    "type": "type",
    "label": "Comparative symbol",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XOperation",
    "value": "'%' | '=' | '>' | '>=' | '<' | '<='"
  },
  "XSort": {
    "type": "interface",
    "label": "Sorting rules",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSort",
    "extends": "XFilter"
  },
  "XGroupItem": {
    "type": "interface",
    "label": "Group data",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "count",
        "type": "number",
        "label": "total",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "count",
        "propType": "",
        "example": ""
      },
      {
        "name": "[property: string]",
        "type": "any",
        "label": "property",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "[property: string]",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XGroupItem",
    "extends": "XId"
  },
  "XRGBColor": {
    "type": "interface",
    "label": "RGB color value",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "r",
        "type": "number",
        "label": "Red",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "r",
        "propType": "",
        "example": ""
      },
      {
        "name": "g",
        "type": "number",
        "label": "Green",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "g",
        "propType": "",
        "example": ""
      },
      {
        "name": "b",
        "type": "number",
        "label": "Blue",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "b",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XRGBColor"
  },
  "XMixColors": {
    "type": "function",
    "label": "Mix 2 colors according to heavy weights",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMixColors",
    "params": {
      "color1": "string",
      "color2": "string",
      "weight": "number"
    },
    "returnType": "XRGBColor"
  },
  "XToHex": {
    "type": "function",
    "label": "RGB color converts to hex",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XToHex",
    "params": {
      "r": "number",
      "g": "number",
      "b": "number"
    },
    "returnType": "string"
  },
  "XToRgb": {
    "type": "function",
    "label": "Hex color converts to RGB",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XToRgb",
    "params": {
      "hex": "string"
    },
    "returnType": "XRGBColor"
  },
  "XIsNotNil<T>": {
    "type": "function",
    "label": "The judgment value is not null or undefined",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsNotNil<T>",
    "params": {
      "value": "T"
    },
    "returnType": "value is NonNullable<T>"
  },
  "XIsNil": {
    "type": "function",
    "label": "The judgment value is null or undefined",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIsNil",
    "params": {
      "value": "unknown"
    },
    "returnType": "value is null | undefined"
  },
  "XComputedStyle": {
    "type": "function",
    "label": "The calculation value of the specified style of the element",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XComputedStyle",
    "params": {
      "element": "HTMLElement",
      "style": "string"
    },
    "returnType": "string"
  },
  "XComputed": {
    "type": "function",
    "label": "Calculation style of obtaining elements",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XComputed",
    "params": {
      "element": "HTMLElement"
    },
    "returnType": "CSSStyleDeclaration"
  },
  "XRemoveNgTag": {
    "type": "function",
    "label": "Delete the current label and keep the content",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XRemoveNgTag",
    "params": {
      "nativeElement": "HTMLElement"
    },
    "returnType": "void"
  },
  "XStripTags": {
    "type": "function",
    "label": "Remove the html tag",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XStripTags",
    "params": {
      "text": "string",
      "usefulTags": "any[]"
    },
    "returnType": "string"
  },
  "XWarnSVGTagNotFound": {
    "type": "function",
    "label": "Warning information that does not exist in SVG tags",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XWarnSVGTagNotFound",
    "params": {},
    "returnType": ""
  },
  "XWarnIconTypeNotFound": {
    "type": "function",
    "label": "Warning information that does not exist in icon",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XWarnIconTypeNotFound",
    "params": {},
    "returnType": ""
  },
  "XFillDefault": {
    "type": "function",
    "label": "Fill default values",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XFillDefault",
    "params": {
      "property": "string"
    },
    "returnType": "any })"
  },
  "XAffixPrefix": {
    "type": "const",
    "label": "Affix",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAffixPrefix",
    "selector": "x-affix",
    "decorator": "component",
    "value": "'x-affix'"
  },
  "XAffixProperty": {
    "type": "class",
    "label": "Affix Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "top",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Distance from top",
        "default": "this.config?.top!",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "left",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Distance from left",
        "default": "this.config?.left!",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      }
    ],
    "name": "XAffixProperty",
    "extends": "XPropertyFunction(X_AFFIX_CONFIG_NAME)"
  },
  "XAlertPrefix": {
    "type": "const",
    "label": "Alert",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAlertPrefix",
    "selector": "x-alert",
    "decorator": "component",
    "value": "'x-alert'"
  },
  "XAlertProperty": {
    "type": "class",
    "label": "Alert Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "hide",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Hide",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "title",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Title",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "content",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Content",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "type",
        "type": "XAlertType",
        "toType": "XAlertType",
        "inputType": "InputSignal<XAlertType>",
        "signal": "input",
        "label": "Alert type",
        "default": "'info'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "effect",
        "type": "XEffect",
        "toType": "XEffect",
        "inputType": "InputSignal<XEffect>",
        "signal": "input",
        "label": "Theme",
        "default": "'light'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "hideClose",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Hide close button",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "closeText",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Use the text to close button",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showIcon",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show icon",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "disabledAnimation",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disable animation",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "duration",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Delay close, the default value of 0 means do not close",
        "default": "0",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "manual",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Manually handle close events",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "draggable",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Drag dialog",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "resizable",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Adjust the size of the box",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "offsetLeft",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Open the resizable resize, offset screen left",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "offsetTop",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Open the resizable resize, offset screen top",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "minWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Min width",
        "default": "'0'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "minHeight",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Min height",
        "default": "'0'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "dragBoundary",
        "type": "string | ElementRef<HTMLElement> | HTMLElement",
        "toType": "string | ElementRef<HTMLElement> | HTMLElement",
        "inputType": "InputSignal<string | ElementRef<HTMLElement> | HTMLElement>",
        "signal": "input",
        "label": "Drag dialog",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "dragFreeDragPosition",
        "type": "XAlertDragFreeDragPosition",
        "toType": "XAlertDragFreeDragPosition",
        "inputType": "InputSignal<XAlertDragFreeDragPosition>",
        "signal": "input",
        "label": "Set the location of the CDKDRAG outside the container. Can be used to recover elements for returned users",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "operationTpl",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Custom operation",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "close",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "output",
        "label": "Closed events",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "dragEnded",
        "type": "CdkDragEnd",
        "toType": "",
        "inputType": "OutputEmitterRef<CdkDragEnd>",
        "signal": "output",
        "label": "Drag end event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "resizing",
        "type": "XResizableEvent",
        "toType": "",
        "inputType": "OutputEmitterRef<XResizableEvent>",
        "signal": "output",
        "label": "Change the size event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XAlertProperty",
    "extends": "XPropertyFunction(X_ALERT_CONFIG_NAME)"
  },
  "XAlertType": {
    "type": "type",
    "label": "Type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAlertType",
    "value": "XStatus"
  },
  "XAnchorPrefix": {
    "type": "const",
    "label": "Anchor",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAnchorPrefix",
    "selector": "x-anchor",
    "decorator": "component",
    "value": "'x-anchor'"
  },
  "XAnchorProperty": {
    "type": "class",
    "label": "Anchor Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "scroll",
        "type": "HTMLElement",
        "toType": "HTMLElement",
        "inputType": "InputSignal<HTMLElement>",
        "signal": "input",
        "label": "Scroll area object",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "affixTop",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Top distance",
        "default": "'0'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "affixBottom",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Bottom distance",
        "default": "'0'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "affixWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Navigation Width",
        "default": "this.config?.affixWidth!",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "layout",
        "type": "XAnchorLayout",
        "toType": "XAnchorLayout",
        "inputType": "InputSignal<XAnchorLayout>",
        "signal": "input",
        "label": "Navigation relative content position",
        "default": "'right'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "Alignment",
        "default": "'start'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XAnchorProperty",
    "extends": "XPropertyFunction(X_ANCHOR_CONFIG_NAME)"
  },
  "XAnchorInnerPrefix": {
    "type": "const",
    "label": "Anchor inner",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAnchorInnerPrefix",
    "selector": "x-anchor-inner",
    "decorator": "component",
    "value": "'x-anchor-inner'"
  },
  "XAnchorInnerProperty": {
    "type": "class",
    "label": "Anchor inner Property",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAnchorInnerProperty"
  },
  "XAutoCompletePrefix": {
    "type": "const",
    "label": "AutoComplete",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAutoCompletePrefix",
    "selector": "x-auto-complete",
    "decorator": "component",
    "value": "'x-auto-complete'"
  },
  "XAutoCompleteProperty": {
    "type": "class",
    "label": "AutoComplete Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XData<XAutoCompleteNode>",
        "toType": "XData<XAutoCompleteNode>",
        "inputType": "InputSignal<XData<XAutoCompleteNode>>",
        "signal": "input",
        "label": "Node data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "debounceTime",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Enter a delay execution time, ms",
        "default": "200",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "placement",
        "type": "XPositionTopBottom",
        "toType": "XPositionTopBottom",
        "inputType": "InputSignal<XPositionTopBottom>",
        "signal": "input",
        "label": "Display position",
        "default": "'bottom'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display Border",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "caseSensitive",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Case-sensitive",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "onlySelect",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Can only be the value of choice",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeEmit",
        "type": "XAutoCompleteNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XAutoCompleteNode>",
        "signal": "output",
        "label": "Node click event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XAutoCompleteProperty",
    "extends": "XFormControlFunction(X_AUTOCOMPLETE_CONFIG_NAME)"
  },
  "XAutoCompleteNode": {
    "type": "interface",
    "label": "AutoComplete data object",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAutoCompleteNode",
    "extends": "XParentIdentityProperty<XAutoCompleteNode>"
  },
  "XAutoCompletePortalPrefix": {
    "type": "const",
    "label": "AutoComplete Portal",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAutoCompletePortalPrefix",
    "selector": "x-auto-complete-portal",
    "decorator": "component",
    "value": "'x-auto-complete-portal'"
  },
  "XAvatarPrefix": {
    "type": "const",
    "label": "Avatar",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAvatarPrefix",
    "selector": "x-avatar",
    "decorator": "component",
    "value": "'x-avatar'"
  },
  "XAvatarProperty": {
    "type": "class",
    "label": "Avatar Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "label",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Display characters",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "size",
        "type": "XAvatarSize",
        "toType": "XAvatarSize",
        "inputType": "InputSignal<XAvatarSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "icon",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Show icon",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "shape",
        "type": "XAvatarShape",
        "toType": "XAvatarShape",
        "inputType": "InputSignal<XAvatarShape>",
        "signal": "input",
        "label": "Shape",
        "default": "'circle'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "src",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "The map's address",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "fit",
        "type": "XAvatarFit",
        "toType": "XAvatarFit",
        "inputType": "InputSignal<XAvatarFit>",
        "signal": "input",
        "label": "Image adaptation method",
        "default": "'cover'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "gap",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "When the character type is the left and right distance, PX",
        "default": "'4px'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "backgroundColor",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Background color",
        "default": "'#999999'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XAvatarProperty",
    "extends": "XPropertyFunction(X_AVATAR_CONFIG_NAME)"
  },
  "XAvatarShape": {
    "type": "type",
    "label": "Avatar shape",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAvatarShape",
    "value": "XShape"
  },
  "XAvatarFit": {
    "type": "type",
    "label": "When the display type is picture, set how the picture fits into the container frame",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAvatarFit",
    "value": "XFit"
  },
  "XAvatarSize": {
    "type": "type",
    "label": "Size type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAvatarSize",
    "value": "number | XSize | XResponseSize"
  },
  "XAvatarGroupPrefix": {
    "type": "const",
    "label": "Avatar Group",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAvatarGroupPrefix",
    "selector": "x-avatar-group",
    "decorator": "component",
    "value": "'x-avatar-group'"
  },
  "XAvatarGroupProperty": {
    "type": "class",
    "label": "Avatar Group Property",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAvatarGroupProperty",
    "extends": "XProperty"
  },
  "XBackTopPrefix": {
    "type": "const",
    "label": "BackTop",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XBackTopPrefix",
    "selector": "x-back-top",
    "decorator": "component",
    "value": "'x-back-top'"
  },
  "XBackTopProperty": {
    "type": "class",
    "label": "BackTop Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "right",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Distance to the right",
        "default": "'2.5rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "bottom",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Distance from bottom",
        "default": "'2.5rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "visibilityHeight",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Display after scrolling how much height",
        "default": "200",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "template",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Content template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "target",
        "type": "string | HTMLElement",
        "toType": "string | HTMLElement",
        "inputType": "InputSignal<string | HTMLElement>",
        "signal": "input",
        "label": "Scroll element",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XBackTopProperty",
    "extends": "XPropertyFunction(X_BACK_TOP_CONFIG_NAME)"
  },
  "XBadgePrefix": {
    "type": "const",
    "label": "Badge",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XBadgePrefix",
    "selector": "x-badge",
    "decorator": "component",
    "value": "'x-badge'"
  },
  "XBadgeProperty": {
    "type": "class",
    "label": "Badge Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "type",
        "type": "XBadgeType",
        "toType": "XBadgeType",
        "inputType": "InputSignal<XBadgeType>",
        "signal": "input",
        "label": "Background color",
        "default": "'danger'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "max",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Max",
        "default": "99",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "value",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Display value",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToString"
      },
      {
        "name": "offsetLeft",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Offset left value",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "offsetTop",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Offset right value",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "dot",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether to show the small red dot",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "standalone",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Independent use",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XBadgeProperty",
    "extends": "XPropertyFunction(X_BADGE_CONFIG_NAME)"
  },
  "XButtonPrefix": {
    "type": "const",
    "label": "Button",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XButtonPrefix",
    "selector": "x-button",
    "decorator": "component",
    "value": "'x-button'"
  },
  "XButtonProperty": {
    "type": "class",
    "label": "Button Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "type",
        "type": "XButtonType",
        "toType": "XButtonType",
        "inputType": "InputSignal<XButtonType>",
        "signal": "input",
        "label": "Button type",
        "default": "'initial'",
        "withConfig": true,
        "description": "",
        "example": "```html\n<x-button>Initial</x-button>\n<x-button type=\"primary\">Primary</x-button>\n<x-button type=\"success\">Success</x-button>\n<x-button type=\"warning\">Warning</x-button>\n<x-button type=\"danger\">Danger</x-button>\n<x-button type=\"info\">Info</x-button>\n<x-button [type]=\"'primary'\">Primary</x-button>\n```\n",
        "transform": ""
      },
      {
        "name": "icon",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Icon",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "```html\n<x-button icon=\"fto-edit\"></x-button>\n<x-button icon=\"fto-edit\">Edit</x-button>\n<x-button [icon]=\"'fto-edit'\">Edit</x-button>\n```\n",
        "transform": ""
      },
      {
        "name": "title",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Title",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "```html\n<x-button title=\"information\"></x-button>\n<x-button [title]=\"'information'\"></x-button>\n```\n",
        "transform": ""
      },
      {
        "name": "direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "Button elements in the layout",
        "default": "'row'",
        "withConfig": false,
        "description": "",
        "example": "```html\n<x-button direction=\"column\" icon=\"edit\">Button</x-button>\n<x-button direction=\"column-reverse\" icon=\"edit\">Button</x-button>\n<x-button direction=\"row\" icon=\"edit\">Button</x-button>\n<x-button direction=\"row-reverse\" icon=\"edit\">Button</x-button>\n<x-button [direction]=\"row\" icon=\"edit\">Button</x-button>\n```\n",
        "transform": ""
      },
      {
        "name": "tabindex",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Tab key control order",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "```html\n<x-button tabindex=\"0\"></x-button>\n<x-button [tabindex]=\"0\"></x-button>\n```\n",
        "transform": "XToNumber"
      },
      {
        "name": "size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "```html\n<x-button size=\"big\">Big</x-button>\n<x-button size=\"large\">Large</x-button>\n<x-button size=\"medium\">Medium</x-button>\n<x-button size=\"small\">Small</x-button>\n<x-button size=\"mini\">Mini</x-button>\n<x-button [size]=\"'medium'\">Medium</x-button>\n```\n",
        "transform": ""
      },
      {
        "name": "onlyIcon",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Icon only",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "```html\n<x-button icon=\"fto-edit\" onlyIcon></x-button>\n<x-button icon=\"fto-edit\" onlyIcon=\"true\"></x-button>\n<x-button icon=\"fto-edit\" [onlyIcon]=\"true\"></x-button>\n```\n",
        "transform": "XToBoolean"
      },
      {
        "name": "activated",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Active button (style difference)",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "```html\n<x-button activated>Button</x-button>\n<x-button activated=\"true\">Button</x-button>\n<x-button [activated]=\"true\">Button</x-button>\n```\n",
        "transform": "XToBoolean"
      },
      {
        "name": "disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disable button",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "```html\n<x-button disabled>Button</x-button>\n<x-button disabled=\"true\">Button</x-button>\n<x-button [disabled]=\"true\">Button</x-button>\n```\n",
        "transform": "XToBoolean"
      },
      {
        "name": "plain",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Plain button",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "```html\n<x-button plain>Button</x-button>\n<x-button plain=\"true\">Button</x-button>\n<x-button [plain]=\"true\">Button</x-button>\n```\n",
        "transform": "XToBoolean"
      },
      {
        "name": "flat",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Flat button",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "```html\n<x-button flat>Button</x-button>\n<x-button flat=\"true\">Button</x-button>\n<x-button [flat]=\"true\">Button</x-button>\n```\n",
        "transform": "XToBoolean"
      },
      {
        "name": "text",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Text button",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "```html\n<x-button text>Button</x-button>\n<x-button text=\"true\">Button</x-button>\n<x-button [text]=\"true\">Button</x-button>\n```\n",
        "transform": "XToBoolean"
      },
      {
        "name": "round",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Round button",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "```html\n<x-button round>Button</x-button>\n<x-button round=\"true\">Button</x-button>\n<x-button [round]=\"true\">Button</x-button>\n```\n",
        "transform": "XToBoolean"
      },
      {
        "name": "circle",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Round button (use with icon)",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "```html\n<x-button circle>Button</x-button>\n<x-button circle=\"true\">Button</x-button>\n<x-button [circle]=\"true\">Button</x-button>\n```\n",
        "transform": "XToBoolean"
      },
      {
        "name": "loading",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Loading",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "```html\n<x-button loading>Button</x-button>\n<x-button loading=\"true\">Button</x-button>\n<x-button [loading]=\"true\">Button</x-button>\n```\n",
        "transform": "XToBoolean"
      },
      {
        "name": "closable",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Close button",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "```html\n<x-button closable>Button</x-button>\n<x-button closable=\"true\">Button</x-button>\n<x-button [closable]=\"true\">Button</x-button>\n```\n",
        "transform": "XToBoolean"
      },
      {
        "name": "attrType",
        "type": "XButtonAttrType",
        "toType": "XButtonAttrType",
        "inputType": "InputSignal<XButtonAttrType>",
        "signal": "input",
        "label": "Button type attribute. submit, button, reset",
        "default": "'button'",
        "withConfig": true,
        "description": "",
        "example": "```html\n<x-button attrType=\"button\">Button</x-button>\n<x-button attrType=\"submit\">Button</x-button>\n<x-button attrType=\"reset\">Button</x-button>\n```\n",
        "transform": ""
      }
    ],
    "name": "XButtonProperty",
    "extends": "XPropertyFunction(X_BUTTON_CONFIG_NAME)"
  },
  "XButtonType": {
    "type": "type",
    "label": "Button type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XButtonType",
    "value": "XType"
  },
  "XButtonAttrType": {
    "type": "type",
    "label": "Button attr type",
    "description": "- `'submit'` : This type is used to submit the form data\n- `'reset'` : This type is used to reset the form data\n- `'button'` : This type is used to the custom button",
    "example": "",
    "properties": [],
    "name": "XButtonAttrType",
    "value": "'submit' | 'button' | 'reset'"
  },
  "XButtonsPrefix": {
    "type": "const",
    "label": "Buttons",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XButtonsPrefix",
    "selector": "x-buttons",
    "decorator": "component",
    "value": "'x-buttons'"
  },
  "XButtonsProperty": {
    "type": "class",
    "label": "Buttons Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "space",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Button spacing",
        "default": "''",
        "withConfig": true,
        "description": "",
        "example": "```html\n// ex: 10,'10px','1rem'\n<x-buttons space=\"1rem\">\n <x-button>Button1</button>\n <x-button>Button2</button>\n</x-buttons>\n```\n",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "hiddenBorder",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Hide border",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "```html\n<x-buttons hiddenBorder>\n <x-button>Button1</button>\n <x-button>Button2</button>\n</x-buttons>\n```\n",
        "transform": "XToBoolean"
      },
      {
        "name": "boxShadow",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "show box shadow",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "```html\n<x-buttons boxShadow>\n <x-button>Button1</button>\n <x-button>Button2</button>\n</x-buttons>\n```\n",
        "transform": "XToBoolean"
      },
      {
        "name": "round",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Round button",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "```html\n<x-buttons round>\n <x-button>Button1</button>\n <x-button>Button2</button>\n</x-buttons>\n```\n",
        "transform": "XToBoolean"
      }
    ],
    "name": "XButtonsProperty",
    "extends": "XPropertyFunction(X_BUTTONS_CONFIG_NAME)"
  },
  "XCalendarPrefix": {
    "type": "const",
    "label": "Calendar",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCalendarPrefix",
    "selector": "x-calendar",
    "decorator": "component",
    "value": "'x-calendar'"
  },
  "XCalendarProperty": {
    "type": "class",
    "label": "Calendar Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XCalendarData",
        "toType": "XCalendarData",
        "inputType": "InputSignal<XCalendarData>",
        "signal": "input",
        "label": "Transaction data object",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "model",
        "type": "XCalendarModel",
        "toType": "XCalendarModel",
        "inputType": "InputSignal<XCalendarModel>",
        "signal": "input",
        "label": "Display mode",
        "default": "'month'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "displayType",
        "type": "XCalendarType",
        "toType": "XCalendarType",
        "inputType": "InputSignal<XCalendarType>",
        "signal": "input",
        "label": "Display type",
        "default": "'calendar'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "headerLeftTemp",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Head display template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "dateChange",
        "type": "Date",
        "toType": "",
        "inputType": "OutputEmitterRef<Date>",
        "signal": "output",
        "label": "Select the event of the date change",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeChange",
        "type": "Date[]",
        "toType": "",
        "inputType": "OutputEmitterRef<Date[]>",
        "signal": "output",
        "label": "Date range change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XCalendarProperty",
    "extends": "XProperty"
  },
  "XCalendarData": {
    "type": "interface",
    "label": "Calendar data object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "[property: string]",
        "type": "XCalendarNode[]",
        "label": "key-value",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "[property: string]",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XCalendarData"
  },
  "XCalendarNode": {
    "type": "interface",
    "label": "Calendar data object",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCalendarNode",
    "extends": "XIdentityProperty"
  },
  "XCalendarModel": {
    "type": "type",
    "label": "Display mode",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCalendarModel",
    "value": "'month' | 'year'"
  },
  "XCardPrefix": {
    "type": "const",
    "label": "Card",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCardPrefix",
    "selector": "x-card",
    "decorator": "component",
    "value": "'x-card'"
  },
  "XCardProperty": {
    "type": "class",
    "label": "Card Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "width",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Card width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "bodyStyle",
        "type": "XCardBodyStyle",
        "toType": "XCardBodyStyle",
        "inputType": "InputSignal<XCardBodyStyle>",
        "signal": "input",
        "label": "Content style",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "header",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Head template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "shadow",
        "type": "XCardShadow",
        "toType": "XCardShadow",
        "inputType": "InputSignal<XCardShadow>",
        "signal": "input",
        "label": "Shadow display method",
        "default": "'always'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XCardProperty",
    "extends": "XPropertyFunction(X_CARD_CONFIG_NAME)"
  },
  "XCardShadow": {
    "type": "type",
    "label": "Shadow display configuration",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCardShadow",
    "value": "XShadow"
  },
  "XCarouselPrefix": {
    "type": "const",
    "label": "Carousel",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCarouselPrefix",
    "selector": "x-carousel",
    "decorator": "component",
    "value": "'x-carousel'"
  },
  "XCarouselProperty": {
    "type": "class",
    "label": "Carousel Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "active",
        "type": "number",
        "toType": "number",
        "inputType": "ModelSignal<number>",
        "signal": "model",
        "label": "Index of the currently active slide",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "height",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Slide height",
        "default": "'15rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "trigger",
        "type": "XCarouselTrigger",
        "toType": "XCarouselTrigger",
        "inputType": "InputSignal<XCarouselTrigger>",
        "signal": "input",
        "label": "Switcher trigger method",
        "default": "'hover'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "arrow",
        "type": "XCarouselArrow",
        "toType": "XCarouselArrow",
        "inputType": "InputSignal<XCarouselArrow>",
        "signal": "input",
        "label": "Arrow shows how to hide",
        "default": "'hover'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "direction",
        "type": "XCarouselDirection",
        "toType": "XCarouselDirection",
        "inputType": "InputSignal<XCarouselDirection>",
        "signal": "input",
        "label": "Slide rotation direction",
        "default": "'horizontal'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "autoplay",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Automatic switching",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "interval",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Automatic switching time interval",
        "default": "3000",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "outside",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether the switcher is displayed outside",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "card",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether to display the slideshow as a card",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "text",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Display text",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "progress",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show progress",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "progressColor",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Progress color",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "current",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show current page",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XCarouselProperty",
    "extends": "XPropertyFunction(X_CAROUSEL_CONFIG_NAME)"
  },
  "XCarouselTrigger": {
    "type": "type",
    "label": "Indicator switching method",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCarouselTrigger",
    "value": "XTrigger"
  },
  "XCarouselArrow": {
    "type": "type",
    "label": "Toggle arrow display",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCarouselArrow",
    "value": "XShadow"
  },
  "XCarouselDirection": {
    "type": "type",
    "label": "The direction of the revolving lantern",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCarouselDirection",
    "value": "XDisplayDirection"
  },
  "XCarouselPanelPrefix": {
    "type": "const",
    "label": "Carousel Panel",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCarouselPanelPrefix",
    "selector": "x-carousel-panel",
    "decorator": "component",
    "value": "'x-carousel-panel'"
  },
  "XCarouselPanelProperty": {
    "type": "class",
    "label": "Carousel Panel Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "active",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Activate the current slide",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XCarouselPanelProperty",
    "extends": "XProperty"
  },
  "XCascadePrefix": {
    "type": "const",
    "label": "Cascade",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCascadePrefix",
    "selector": "x-cascade",
    "decorator": "component",
    "value": "'x-cascade'"
  },
  "XCascadeProperty": {
    "type": "class",
    "label": "Cascade Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XData<XCascadeNode>",
        "toType": "XData<XCascadeNode>",
        "inputType": "InputSignal<XData<XCascadeNode>>",
        "signal": "input",
        "label": "Node data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "placement",
        "type": "XCorner",
        "toType": "XCorner",
        "inputType": "InputSignal<XCorner>",
        "signal": "input",
        "label": "Display position",
        "default": "'bottom-start'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display Border",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "nodeTrigger",
        "type": "XCascadeNodeTrigger",
        "toType": "XCascadeNodeTrigger",
        "inputType": "InputSignal<XCascadeNodeTrigger>",
        "signal": "input",
        "label": "Sub node triggering method",
        "default": "'click'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeHoverDelay",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Sub node triggering method",
        "default": "200",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "nodeTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeEmit",
        "type": "XCascadeNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XCascadeNode>",
        "signal": "output",
        "label": "Node click event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XCascadeProperty",
    "extends": "XFormControlFunction(X_CASCADE_CONFIG_NAME)"
  },
  "XCascadeNode": {
    "type": "interface",
    "label": "Cascade data object",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCascadeNode",
    "extends": "XParentIdentityProperty<XCascadeNode>"
  },
  "XCascadeNodeTrigger": {
    "type": "type",
    "label": "Sub node triggering method",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCascadeNodeTrigger",
    "value": "XTrigger"
  },
  "XCascadePortalPrefix": {
    "type": "const",
    "label": "Cascade-Portal",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCascadePortalPrefix",
    "selector": "x-cascade-portal",
    "decorator": "component",
    "value": "'x-cascade-portal'"
  },
  "XCheckboxPrefix": {
    "type": "const",
    "label": "Checkbox",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCheckboxPrefix",
    "selector": "x-checkbox",
    "decorator": "component",
    "value": "'x-checkbox'"
  },
  "XCheckboxProperty": {
    "type": "class",
    "label": "Checkbox Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XData<XCheckboxNode>",
        "toType": "XData<XCheckboxNode>",
        "inputType": "InputSignalWithTransform<XData<XCheckboxNode>, XData<XCheckboxNode>>",
        "signal": "input",
        "label": "Checkbox data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToDataConvert"
      },
      {
        "name": "button",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Button style",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "icon",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Icon style",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "tag",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Tag style",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "indeterminate",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Uncertain state style",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "type",
        "type": "XButtonType",
        "toType": "XButtonType",
        "inputType": "InputSignal<XButtonType>",
        "signal": "input",
        "label": "Take effect when button style",
        "default": "'initial'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tagBordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Tag bordered",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "tagDark",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Tag dark theme",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "single",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "There is only one option, when this parameter is activated, the value is true or false",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "vertical",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Vertical layout, does not support button and icon styles",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XCheckboxProperty",
    "extends": "XFormControlFunction(X_CHECKBOX_CONFIG_NAME)"
  },
  "XCheckboxNode": {
    "type": "interface",
    "label": "Checkbox data object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "disabled",
        "type": "boolean",
        "label": "Disable",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "disabled",
        "propType": "",
        "example": ""
      },
      {
        "name": "checked",
        "type": "boolean",
        "label": "Disable",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "checked",
        "propType": "",
        "example": ""
      },
      {
        "name": "icon",
        "type": "string",
        "label": "Icon",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "icon",
        "propType": "",
        "example": ""
      },
      {
        "name": "title",
        "type": "string",
        "label": "Icon message",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "title",
        "propType": "",
        "example": ""
      },
      {
        "name": "label",
        "type": "XTemplate",
        "label": "Label text",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "label",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XCheckboxNode",
    "extends": "XIdentityProperty"
  },
  "XCollapsePrefix": {
    "type": "const",
    "label": "Collapse",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCollapsePrefix",
    "selector": "x-collapse",
    "decorator": "component",
    "value": "'x-collapse'"
  },
  "XCollapseProperty": {
    "type": "class",
    "label": "Collapse Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "accordion",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether to display as an accordion, only expand one panel",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "icon",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "The icon displayed on the right",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showIcon",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show / hide icon",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "iconPosition",
        "type": "XCollapseIconPosition",
        "toType": "XCollapseIconPosition",
        "inputType": "InputSignal<XCollapseIconPosition>",
        "signal": "input",
        "label": "Icon position",
        "default": "'right'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "ghost",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Ghost panel",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "border",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "active",
        "type": "number[]",
        "toType": "number[]",
        "inputType": "ModelSignal<number[]>",
        "signal": "model",
        "label": "The serial number of the currently active panel",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XCollapseProperty",
    "extends": "XPropertyFunction(X_COLLAPSE_CONFIG_NAME)"
  },
  "XCollapseIconPosition": {
    "type": "type",
    "label": "Icon position",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCollapseIconPosition",
    "value": "'left' | 'right'"
  },
  "XCollapsePanelPrefix": {
    "type": "const",
    "label": "Collapse Panel",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCollapsePanelPrefix",
    "selector": "x-collapse-panel",
    "decorator": "component",
    "value": "'x-collapse-panel'"
  },
  "XCollapsePanelProperty": {
    "type": "class",
    "label": "Collapse Panel Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "label",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Title, support template customization",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "active",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Activate the current panel",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XCollapsePanelProperty",
    "extends": "XProperty"
  },
  "XColorPrefix": {
    "type": "const",
    "label": "Color",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XColorPrefix",
    "selector": "x-color",
    "decorator": "component",
    "value": "'x-color'"
  },
  "XColorProperty": {
    "type": "class",
    "label": "Color Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Color name",
        "default": "'color'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "hex",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Hexadecimal color code, here the main color in the css variable is read by default",
        "default": "'var(--x-primary)'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "merge",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Mixed colors",
        "default": "'#ffffff'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "amounts",
        "type": "number[]",
        "toType": "number[]",
        "inputType": "InputSignal<number[]>",
        "signal": "input",
        "label": "Proportion of mixed colors",
        "default": "[-0.1, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XColorProperty",
    "extends": "XPropertyFunction(X_COLOR_CONFIG_NAME)"
  },
  "XColorPickerPrefix": {
    "type": "const",
    "label": "ColorPicker",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XColorPickerPrefix",
    "selector": "x-color-picker",
    "decorator": "component",
    "value": "'x-color-picker'"
  },
  "XColorPickerProperty": {
    "type": "class",
    "label": "ColorPicker Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "placement",
        "type": "XCorner",
        "toType": "XCorner",
        "inputType": "InputSignal<XCorner>",
        "signal": "input",
        "label": "Display position",
        "default": "'bottom-start'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display Border",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XColorPickerProperty",
    "extends": "XFormControlFunction(X_COLOR_CONFIG_NAME)"
  },
  "XColorType": {
    "type": "type",
    "label": "Color type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XColorType",
    "value": "'hex' | 'rgba' | 'hsla'"
  },
  "XColorPickerPortalPrefix": {
    "type": "const",
    "label": "ColorPicker-Portal",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XColorPickerPortalPrefix",
    "selector": "x-color-picker-portal",
    "decorator": "component",
    "value": "'x-color-picker-portal'"
  },
  "XCommentPrefix": {
    "type": "const",
    "label": "Comment",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCommentPrefix",
    "selector": "x-comment",
    "decorator": "component",
    "value": "'x-comment'"
  },
  "XCommentProperty": {
    "type": "class",
    "label": "Comment Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XDataArray<XCommentNode>",
        "toType": "XCommentNode[]",
        "inputType": "InputSignalWithTransform<XCommentNode[], XDataArray<XCommentNode>>",
        "signal": "input",
        "label": "Comment data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToDataArray"
      },
      {
        "name": "contentMax",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Maximum number of comments",
        "default": "512",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "likeClick",
        "type": "XCommentNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XCommentNode>",
        "signal": "output",
        "label": "Like events",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "commentClick",
        "type": "XCommentNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XCommentNode>",
        "signal": "output",
        "label": "Commented event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "replyClick",
        "type": "XCommentNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XCommentNode>",
        "signal": "output",
        "label": "Reply event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "sureClick",
        "type": "XCommentNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XCommentNode>",
        "signal": "output",
        "label": "Confirm the submitted event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "moreClick",
        "type": "XCommentNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XCommentNode>",
        "signal": "output",
        "label": "More events",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XCommentProperty",
    "extends": "XPropertyFunction(X_COMMENT_CONFIG_NAME)"
  },
  "XCommentNode": {
    "type": "interface",
    "label": "Comment data object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "author",
        "type": "string",
        "label": "Author",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "author",
        "propType": "",
        "example": ""
      },
      {
        "name": "src",
        "type": "string",
        "label": "Author avatar address",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "src",
        "propType": "",
        "example": ""
      },
      {
        "name": "datetime",
        "type": "XDate",
        "label": "release time",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "datetime",
        "propType": "",
        "example": ""
      },
      {
        "name": "content",
        "type": "string",
        "label": "Publish content",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "content",
        "propType": "",
        "example": ""
      },
      {
        "name": "likes",
        "type": "number",
        "label": "Like number",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "likes",
        "propType": "",
        "example": ""
      },
      {
        "name": "count",
        "type": "number",
        "label": "Number of comments",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "count",
        "propType": "",
        "example": ""
      },
      {
        "name": "replyAuthor",
        "type": "string",
        "label": "Reply to author",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "replyAuthor",
        "propType": "",
        "example": ""
      },
      {
        "name": "replyContent",
        "type": "string",
        "label": "Click to comment/reply to submitted content",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "replyContent",
        "propType": "",
        "example": ""
      },
      {
        "name": "commentShow",
        "type": "boolean",
        "label": "Show comment/reply box",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "commentShow",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XCommentNode",
    "extends": "XParentIdentityProperty<XCommentNode>"
  },
  "XCommentReplyPrefix": {
    "type": "const",
    "label": "Comment Reply",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCommentReplyPrefix",
    "selector": "x-comment-reply",
    "decorator": "component",
    "value": "'x-comment-reply'"
  },
  "XCommentReplyProperty": {
    "type": "class",
    "label": "Comment Reply Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "maxlength",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Maximum number of words to reply",
        "default": "512",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "sureClick",
        "type": "string",
        "toType": "",
        "inputType": "OutputEmitterRef<string>",
        "signal": "output",
        "label": "Reply to confirmed event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XCommentReplyProperty",
    "extends": "XPropertyFunction(X_COMMENT_CONFIG_NAME)"
  },
  "XContainerPrefix": {
    "type": "const",
    "label": "Container",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XContainerPrefix",
    "selector": "x-container",
    "decorator": "component",
    "value": "'x-container'"
  },
  "XContainerProperty": {
    "type": "class",
    "label": "Container Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The arrangement direction of the sub-elements under the flex layout. When the sub-elements have x-header or x-footer, it is column",
        "default": "this.config?.direction!",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XContainerProperty",
    "extends": "XPropertyFunction(X_CONTAINER_CONFIG_NAME)"
  },
  "XHeaderPrefix": {
    "type": "const",
    "label": "Header",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XHeaderPrefix",
    "selector": "x-header",
    "decorator": "component",
    "value": "'x-header'"
  },
  "XHeaderProperty": {
    "type": "class",
    "label": "Header Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "height",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Height",
        "default": "'3rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      }
    ],
    "name": "XHeaderProperty",
    "extends": "XPropertyFunction(X_HEADER_CONFIG_NAME)"
  },
  "XAsidePrefix": {
    "type": "const",
    "label": "Aside",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAsidePrefix",
    "selector": "x-aside",
    "decorator": "component",
    "value": "'x-aside'"
  },
  "XAsideProperty": {
    "type": "class",
    "label": "Aside Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "width",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Width",
        "default": "'12rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      }
    ],
    "name": "XAsideProperty",
    "extends": "XPropertyFunction(X_ASIDE_CONFIG_NAME)"
  },
  "XMainPrefix": {
    "type": "const",
    "label": "main",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMainPrefix",
    "selector": "x-main",
    "decorator": "component",
    "value": "'x-main'"
  },
  "XFooterPrefix": {
    "type": "const",
    "label": "Footer",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XFooterPrefix",
    "selector": "x-footer",
    "decorator": "component",
    "value": "'x-footer'"
  },
  "XFooterProperty": {
    "type": "class",
    "label": "Footer Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "height",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Height",
        "default": "'3rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      }
    ],
    "name": "XFooterProperty",
    "extends": "XPropertyFunction(X_FOOTER_CONFIG_NAME)"
  },
  "XCrumbPrefix": {
    "type": "const",
    "label": "Crumb",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCrumbPrefix",
    "selector": "x-crumb",
    "decorator": "component",
    "value": "'x-crumb'"
  },
  "XCrumbProperty": {
    "type": "class",
    "label": "Crumb Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XDataArray<XCrumbNode>",
        "toType": "XCrumbNode[]",
        "inputType": "InputSignalWithTransform<XCrumbNode[], XDataArray<XCrumbNode>>",
        "signal": "input",
        "label": "Node data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToDataArray"
      },
      {
        "name": "nodeTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node custom template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "separator",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Separator",
        "default": "'/'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeClick",
        "type": "XCrumbNodeClick",
        "toType": "",
        "inputType": "OutputEmitterRef<XCrumbNodeClick>",
        "signal": "output",
        "label": "Node click event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XCrumbProperty",
    "extends": "XPropertyFunction(X_CRUMB_CONFIG_NAME)"
  },
  "XCrumbNode": {
    "type": "interface",
    "label": "Crumb data object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "icon",
        "type": "string",
        "label": "Icon",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "icon",
        "propType": "",
        "example": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "label": "Disabled",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "disabled",
        "propType": "",
        "example": ""
      },
      {
        "name": "[property: string]",
        "type": "any",
        "label": "Custom data attributes",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "[property: string]",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XCrumbNode",
    "extends": "XIdentityProperty"
  },
  "XCrumbNodeClick": {
    "type": "interface",
    "label": "Crumb Click to return the object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "event",
        "type": "Event",
        "label": "event",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "event",
        "propType": "",
        "example": ""
      },
      {
        "name": "node",
        "type": "XCrumbNode",
        "label": "Clicked node data",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "node",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XCrumbNodeClick"
  },
  "XDatePickerPrefix": {
    "type": "const",
    "label": "DatePicker",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDatePickerPrefix",
    "selector": "x-date-picker",
    "decorator": "component",
    "value": "'x-date-picker'"
  },
  "XDatePickerProperty": {
    "type": "class",
    "label": "DatePicker Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "type",
        "type": "XDatePickerType",
        "toType": "XDatePickerType",
        "inputType": "InputSignal<XDatePickerType>",
        "signal": "input",
        "label": "Select type",
        "default": "'date'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "format",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Format type",
        "default": "'yyyy-MM-dd'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "clearable",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Clear button",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "placement",
        "type": "XCorner",
        "toType": "XCorner",
        "inputType": "InputSignal<XCorner>",
        "signal": "input",
        "label": "Display position",
        "default": "'bottom-start'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display Border",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "preset",
        "type": "XData<XDatePickerPreset>",
        "toType": "XData<XDatePickerPreset>",
        "inputType": "InputSignal<XData<XDatePickerPreset>>",
        "signal": "input",
        "label": "Quick selection button, support today, yesterday, tomorrow",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "extraFooter",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Footer",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "disabledDate",
        "type": "XDatePickerDisabledDate",
        "toType": "XDatePickerDisabledDate",
        "inputType": "InputSignal<XDatePickerDisabledDate>",
        "signal": "input",
        "label": "Disabled date",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "disabledTime",
        "type": "XDatePickerDisabledTime",
        "toType": "XDatePickerDisabledTime",
        "inputType": "InputSignal<XDatePickerDisabledTime>",
        "signal": "input",
        "label": "Disabled time",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeEmit",
        "type": "number",
        "toType": "",
        "inputType": "OutputEmitterRef<number>",
        "signal": "output",
        "label": "Node click event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XDatePickerProperty",
    "extends": "XFormControlFunction(X_DATA_PICKER_CONFIG_NAME)"
  },
  "XDateRangePrefix": {
    "type": "const",
    "label": "DateRange",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDateRangePrefix",
    "selector": "x-date-range",
    "decorator": "component",
    "value": "'x-date-range'"
  },
  "XDateRangeProperty": {
    "type": "class",
    "label": "DateRange Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "type",
        "type": "XDatePickerType",
        "toType": "XDatePickerType",
        "inputType": "InputSignal<XDatePickerType>",
        "signal": "input",
        "label": "Select type",
        "default": "'date'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "format",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Format type",
        "default": "'yyyy-MM-dd'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "clearable",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Clear button",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "placement",
        "type": "XCorner",
        "toType": "XCorner",
        "inputType": "InputSignal<XCorner>",
        "signal": "input",
        "label": "Display position",
        "default": "'bottom-start'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display Border",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "preset",
        "type": "XData<XDateRangePreset>",
        "toType": "XData<XDateRangePreset>",
        "inputType": "InputSignal<XData<XDateRangePreset>>",
        "signal": "input",
        "label": "Quick selection button, support thisWeek, lastWeek, nextWeek, thisMonth, lastMonth, nextMonth, thisYear, lastYear, nextYear",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "extraFooter",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Footer",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "disabledDate",
        "type": "XDatePickerDisabledDate",
        "toType": "XDatePickerDisabledDate",
        "inputType": "InputSignal<XDatePickerDisabledDate>",
        "signal": "input",
        "label": "Disabled date",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "disabledTime",
        "type": "XDatePickerDisabledTime",
        "toType": "XDatePickerDisabledTime",
        "inputType": "InputSignal<XDatePickerDisabledTime>",
        "signal": "input",
        "label": "Disabled time",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeEmit",
        "type": "number[]",
        "toType": "",
        "inputType": "OutputEmitterRef<number[]>",
        "signal": "output",
        "label": "Node click event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XDateRangeProperty",
    "extends": "XFormControlFunction(X_DATA_RANGE_CONFIG_NAME)"
  },
  "XDatePickerDisabledDate": {
    "type": "type",
    "label": "Custom type of disabled date",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDatePickerDisabledDate",
    "value": "(current: Date) => boolean"
  },
  "XDatePickerDisabledTime": {
    "type": "type",
    "label": "Custom type of disable time",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDatePickerDisabledTime",
    "value": "(type?: XDatePickerRangType) => XDatePickerDisabledTimeFn"
  },
  "XDatePickerDisabledTimeFn": {
    "type": "type",
    "label": "Custom function of disable time",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDatePickerDisabledTimeFn",
    "value": "XDatePickerDisabledTimeFn = {/*** @zh_CN 禁用小时的自定义函数* @en_US Disable hour custom function*/disabledHours?: () => number[];/*** @zh_CN 禁用分钟的自定义函数* @en_US Disable the custom function of the minute*/disabledMinutes?: () => number[];/*** @zh_CN 禁用秒的自定义函数* @en_US Custom function of disable seconds*/disabledSeconds?: () => number[];};"
  },
  "XDatePickerPreset": {
    "type": "interface",
    "label": "Quick selection button",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "func",
        "type": "() => Date",
        "label": "Custom function",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "func",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XDatePickerPreset",
    "extends": "XIdentityProperty"
  },
  "XDateRangePreset": {
    "type": "interface",
    "label": "Quick range selection button",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "func",
        "type": "() => Date[]",
        "label": "Custom function",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "func",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XDateRangePreset",
    "extends": "XIdentityProperty"
  },
  "XDatePickerType": {
    "type": "type",
    "label": "Date selection type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDatePickerType",
    "value": "XDatePickerType =| 'date'| 'week'| 'month'| 'quarter'| 'year'| 'date-time'| 'date-hour'| 'date-minute';"
  },
  "XDatePickerModelType": {
    "type": "type",
    "label": "Date data type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDatePickerModelType",
    "value": "'date' | 'number' | 'string'"
  },
  "XDatePickerPortalPrefix": {
    "type": "const",
    "label": "DatePicker Portal",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDatePickerPortalPrefix",
    "selector": "x-date-picker-portal",
    "decorator": "component",
    "value": "'x-date-picker-portal'"
  },
  "XDateRangePortalPrefix": {
    "type": "const",
    "label": "DateRange Portal",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDateRangePortalPrefix",
    "selector": "x-date-range-portal",
    "decorator": "component",
    "value": "'x-date-range-portal'"
  },
  "XPickerDatePrefix": {
    "type": "const",
    "label": "PickerDate",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPickerDatePrefix",
    "selector": "x-picker-date",
    "decorator": "component",
    "value": "'x-picker-date'"
  },
  "XPickerDateProperty": {
    "type": "class",
    "label": "PickerDate Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "type",
        "type": "XDatePickerType",
        "toType": "XDatePickerType",
        "inputType": "ModelSignal<XDatePickerType>",
        "signal": "model",
        "label": "Select type",
        "default": "'date'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "display",
        "type": "Date",
        "toType": "Date",
        "inputType": "ModelSignal<Date>",
        "signal": "model",
        "label": "Date displayed",
        "default": "new Date(",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "model",
        "type": "Date | null",
        "toType": "Date | null",
        "inputType": "ModelSignal<Date | null>",
        "signal": "model",
        "label": "Selected date",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "dateTemp",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Date display template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showHeader",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display switch button",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "rangePicker",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Range picker",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "lastYearBtn",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Last year",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "lastMonthBtn",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Last month",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "nextYearBtn",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Next year",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "nextMonthBtn",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Next month",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "rangeHover",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Range hover style",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "rangeValue",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Range date",
        "default": "number | null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeType",
        "type": "XDatePickerRangType",
        "toType": "XDatePickerRangType",
        "inputType": "InputSignal<XDatePickerRangType>",
        "signal": "input",
        "label": "The current choice is the start / end date",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "disabledDate",
        "type": "XDatePickerDisabledDate",
        "toType": "XDatePickerDisabledDate",
        "inputType": "InputSignal<XDatePickerDisabledDate>",
        "signal": "input",
        "label": "Disabled date",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeChange",
        "type": "Date[]",
        "toType": "",
        "inputType": "OutputEmitterRef<Date[]>",
        "signal": "output",
        "label": "Scope change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "yearChange",
        "type": "number",
        "toType": "",
        "inputType": "OutputEmitterRef<number>",
        "signal": "output",
        "label": "Year change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "monthChange",
        "type": "number",
        "toType": "",
        "inputType": "OutputEmitterRef<number>",
        "signal": "output",
        "label": "Month change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeTdMouseenter",
        "type": "XDateCell",
        "toType": "",
        "inputType": "OutputEmitterRef<XDateCell>",
        "signal": "output",
        "label": "Date mouseenter event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeTdMouseleave",
        "type": "XDateCell",
        "toType": "",
        "inputType": "OutputEmitterRef<XDateCell>",
        "signal": "output",
        "label": "Date mouseleave event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XPickerDateProperty",
    "extends": "XProperty"
  },
  "XDateCell": {
    "type": "interface",
    "label": "单个日期数据对象",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "date",
        "type": "Date",
        "label": "Date",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "date",
        "propType": "",
        "example": ""
      },
      {
        "name": "isLastOrNext",
        "type": "boolean",
        "label": "Date of the previous or next month",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isLastOrNext",
        "propType": "",
        "example": ""
      },
      {
        "name": "isNow",
        "type": "boolean",
        "label": "Same day",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isNow",
        "propType": "",
        "example": ""
      },
      {
        "name": "isFirstDay",
        "type": "boolean",
        "label": "The first day of the month",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isFirstDay",
        "propType": "",
        "example": ""
      },
      {
        "name": "isLastDay",
        "type": "boolean",
        "label": "The last day of the month",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isLastDay",
        "propType": "",
        "example": ""
      },
      {
        "name": "isInRange",
        "type": "boolean",
        "label": "范围内日期",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isInRange",
        "propType": "",
        "example": ""
      },
      {
        "name": "isInRangeHover",
        "type": "boolean",
        "label": "范围内 hover 选中",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isInRangeHover",
        "propType": "",
        "example": ""
      },
      {
        "name": "isInRangeHoverLeft",
        "type": "boolean",
        "label": "范围内 hover 当前日期左边",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isInRangeHoverLeft",
        "propType": "",
        "example": ""
      },
      {
        "name": "isInRangeHoverRight",
        "type": "boolean",
        "label": "范围内 hover 当前日期右边",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isInRangeHoverRight",
        "propType": "",
        "example": ""
      },
      {
        "name": "isRangeStartLeft",
        "type": "boolean",
        "label": "Range start left",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isRangeStartLeft",
        "propType": "",
        "example": ""
      },
      {
        "name": "isRangeStartRight",
        "type": "boolean",
        "label": "Range start right",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isRangeStartRight",
        "propType": "",
        "example": ""
      },
      {
        "name": "isRangeEndLeft",
        "type": "boolean",
        "label": "Range start left",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isRangeEndLeft",
        "propType": "",
        "example": ""
      },
      {
        "name": "isRangeEndRight",
        "type": "boolean",
        "label": "Range start right",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isRangeEndRight",
        "propType": "",
        "example": ""
      },
      {
        "name": "isRangeHover",
        "type": "boolean",
        "label": "Range hover",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isRangeHover",
        "propType": "",
        "example": ""
      },
      {
        "name": "isRangeHoverStart",
        "type": "boolean",
        "label": "Range hover start",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isRangeHoverStart",
        "propType": "",
        "example": ""
      },
      {
        "name": "isRangeHoverEnd",
        "type": "boolean",
        "label": "End date",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isRangeHoverEnd",
        "propType": "",
        "example": ""
      },
      {
        "name": "isRangeHoverStartLeft",
        "type": "boolean",
        "label": "Range hover start left",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isRangeHoverStartLeft",
        "propType": "",
        "example": ""
      },
      {
        "name": "isRangeHoverStartRight",
        "type": "boolean",
        "label": "Range hover start right",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isRangeHoverStartRight",
        "propType": "",
        "example": ""
      },
      {
        "name": "isRangeHoverEndLeft",
        "type": "boolean",
        "label": "Range hover end left",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isRangeHoverEndLeft",
        "propType": "",
        "example": ""
      },
      {
        "name": "isRangeHoverEndRight",
        "type": "boolean",
        "label": "Range hover end right",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isRangeHoverEndRight",
        "propType": "",
        "example": ""
      },
      {
        "name": "isActive",
        "type": "boolean",
        "label": "Current selected date",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isActive",
        "propType": "",
        "example": ""
      },
      {
        "name": "isDisabled",
        "type": "boolean",
        "label": "Disabled date",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "isDisabled",
        "propType": "",
        "example": ""
      },
      {
        "name": "type",
        "type": "XDatePickerType",
        "label": "Type",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "type",
        "propType": "",
        "example": ""
      },
      {
        "name": "week",
        "type": "number",
        "label": "Week",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "week",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XDateCell"
  },
  "XDatePickerRangType": {
    "type": "type",
    "label": "The current choice is the start / end date",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDatePickerRangType",
    "value": "'start' | 'end'"
  },
  "XPickerMonthPrefix": {
    "type": "const",
    "label": "PickerMonth",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPickerMonthPrefix",
    "selector": "x-picker-month",
    "decorator": "component",
    "value": "'x-picker-month'"
  },
  "XPickerMonthProperty": {
    "type": "class",
    "label": "PickerMonth Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "type",
        "type": "XDatePickerType",
        "toType": "XDatePickerType",
        "inputType": "ModelSignal<XDatePickerType>",
        "signal": "model",
        "label": "Select type",
        "default": "'date'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "display",
        "type": "Date",
        "toType": "Date",
        "inputType": "ModelSignal<Date>",
        "signal": "model",
        "label": "Date displayed",
        "default": "new Date(",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "model",
        "type": "Date | null",
        "toType": "Date | null",
        "inputType": "ModelSignal<Date | null>",
        "signal": "model",
        "label": "Selected date",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "monthTemp",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Month display template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showHeader",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display switch button",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "rangePicker",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Range picker",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "lastYearBtn",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Last year",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "nextYearBtn",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Next year",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "rangeValue",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Range date",
        "default": "number | null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeType",
        "type": "XDatePickerRangType",
        "toType": "XDatePickerRangType",
        "inputType": "InputSignal<XDatePickerRangType>",
        "signal": "input",
        "label": "The current choice is the start / end date",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "disabledDate",
        "type": "XDatePickerDisabledDate",
        "toType": "XDatePickerDisabledDate",
        "inputType": "InputSignal<XDatePickerDisabledDate>",
        "signal": "input",
        "label": "Disabled date",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeChange",
        "type": "Date[]",
        "toType": "",
        "inputType": "OutputEmitterRef<Date[]>",
        "signal": "output",
        "label": "Scope change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "yearChange",
        "type": "number",
        "toType": "",
        "inputType": "OutputEmitterRef<number>",
        "signal": "output",
        "label": "Year change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "monthChange",
        "type": "number",
        "toType": "",
        "inputType": "OutputEmitterRef<number>",
        "signal": "output",
        "label": "Month change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeTdMouseenter",
        "type": "XDateCell",
        "toType": "",
        "inputType": "OutputEmitterRef<XDateCell>",
        "signal": "output",
        "label": "Date mouseenter event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeTdMouseleave",
        "type": "XDateCell",
        "toType": "",
        "inputType": "OutputEmitterRef<XDateCell>",
        "signal": "output",
        "label": "Date mouseleave event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XPickerMonthProperty",
    "extends": "XProperty"
  },
  "XPickerQuarterPrefix": {
    "type": "const",
    "label": "PickerQuarter",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPickerQuarterPrefix",
    "selector": "x-picker-quarter",
    "decorator": "component",
    "value": "'x-picker-quarter'"
  },
  "XPickerQuarterProperty": {
    "type": "class",
    "label": "PickerQuarter Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "type",
        "type": "XDatePickerType",
        "toType": "XDatePickerType",
        "inputType": "ModelSignal<XDatePickerType>",
        "signal": "model",
        "label": "Select type",
        "default": "'date'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "display",
        "type": "Date",
        "toType": "Date",
        "inputType": "ModelSignal<Date>",
        "signal": "model",
        "label": "Date displayed",
        "default": "new Date(",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "model",
        "type": "Date | null",
        "toType": "Date | null",
        "inputType": "ModelSignal<Date | null>",
        "signal": "model",
        "label": "Selected date",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "quarterTemp",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Month display template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showHeader",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display switch button",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "rangePicker",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Range picker",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "lastYearBtn",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Last year",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "nextYearBtn",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Next year",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "rangeValue",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Range date",
        "default": "number | null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeType",
        "type": "XDatePickerRangType",
        "toType": "XDatePickerRangType",
        "inputType": "InputSignal<XDatePickerRangType>",
        "signal": "input",
        "label": "The current choice is the start / end date",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "disabledDate",
        "type": "XDatePickerDisabledDate",
        "toType": "XDatePickerDisabledDate",
        "inputType": "InputSignal<XDatePickerDisabledDate>",
        "signal": "input",
        "label": "Disabled date",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeChange",
        "type": "Date[]",
        "toType": "",
        "inputType": "OutputEmitterRef<Date[]>",
        "signal": "output",
        "label": "Scope change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "yearChange",
        "type": "number",
        "toType": "",
        "inputType": "OutputEmitterRef<number>",
        "signal": "output",
        "label": "Year change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "monthChange",
        "type": "number",
        "toType": "",
        "inputType": "OutputEmitterRef<number>",
        "signal": "output",
        "label": "Month change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeTdMouseenter",
        "type": "XDateCell",
        "toType": "",
        "inputType": "OutputEmitterRef<XDateCell>",
        "signal": "output",
        "label": "Date mouseenter event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeTdMouseleave",
        "type": "XDateCell",
        "toType": "",
        "inputType": "OutputEmitterRef<XDateCell>",
        "signal": "output",
        "label": "Date mouseleave event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XPickerQuarterProperty",
    "extends": "XProperty"
  },
  "XDateQuarterPrefix": {
    "type": "const",
    "label": "DateQuarter",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDateQuarterPrefix",
    "selector": "xDateQuarter",
    "decorator": "pipe",
    "value": "'xDateQuarter'"
  },
  "XPickerYearPrefix": {
    "type": "const",
    "label": "PickerYear",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPickerYearPrefix",
    "selector": "x-picker-year",
    "decorator": "component",
    "value": "'x-picker-year'"
  },
  "XPickerYearProperty": {
    "type": "class",
    "label": "PickerYear Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "type",
        "type": "XDatePickerType",
        "toType": "XDatePickerType",
        "inputType": "ModelSignal<XDatePickerType>",
        "signal": "model",
        "label": "Select type",
        "default": "'date'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "display",
        "type": "Date",
        "toType": "Date",
        "inputType": "ModelSignal<Date>",
        "signal": "model",
        "label": "Date displayed",
        "default": "new Date(",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "model",
        "type": "Date | null",
        "toType": "Date | null",
        "inputType": "ModelSignal<Date | null>",
        "signal": "model",
        "label": "Selected date",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "yearTemp",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Month display template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showHeader",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display switch button",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "rangePicker",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Range picker",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "lastYearBtn",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Last year",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "nextYearBtn",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Next year",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "rangeValue",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Range date",
        "default": "number | null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeType",
        "type": "XDatePickerRangType",
        "toType": "XDatePickerRangType",
        "inputType": "InputSignal<XDatePickerRangType>",
        "signal": "input",
        "label": "The current choice is the start / end date",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "disabledDate",
        "type": "XDatePickerDisabledDate",
        "toType": "XDatePickerDisabledDate",
        "inputType": "InputSignal<XDatePickerDisabledDate>",
        "signal": "input",
        "label": "Disabled date",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "startChange",
        "type": "number",
        "toType": "",
        "inputType": "OutputEmitterRef<number>",
        "signal": "output",
        "label": "Start year change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeChange",
        "type": "Date[]",
        "toType": "",
        "inputType": "OutputEmitterRef<Date[]>",
        "signal": "output",
        "label": "Scope change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "yearChange",
        "type": "number",
        "toType": "",
        "inputType": "OutputEmitterRef<number>",
        "signal": "output",
        "label": "Year change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "monthChange",
        "type": "number",
        "toType": "",
        "inputType": "OutputEmitterRef<number>",
        "signal": "output",
        "label": "Month change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeTdMouseenter",
        "type": "XDateCell",
        "toType": "",
        "inputType": "OutputEmitterRef<XDateCell>",
        "signal": "output",
        "label": "Date mouseenter event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rangeTdMouseleave",
        "type": "XDateCell",
        "toType": "",
        "inputType": "OutputEmitterRef<XDateCell>",
        "signal": "output",
        "label": "Date mouseleave event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XPickerYearProperty",
    "extends": "XProperty"
  },
  "XDescriptionPrefix": {
    "type": "const",
    "label": "Description",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDescriptionPrefix",
    "selector": "x-description",
    "decorator": "component",
    "value": "'x-description'"
  },
  "XDescriptionProperty": {
    "type": "class",
    "label": "Description Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "title",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Describe the title of the list, support custom template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether to show column borders",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "gridTemplateColumns",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Define column width under grid layout",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XDescriptionProperty",
    "extends": "XPropertyFunction(X_DESCRIPTION_CONFIG_NAME)"
  },
  "XDescriptionItemPrefix": {
    "type": "const",
    "label": "Description Item",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDescriptionItemPrefix",
    "selector": "x-description-item",
    "decorator": "component",
    "value": "'x-description-item'"
  },
  "XDescriptionItemProperty": {
    "type": "class",
    "label": "Description Item Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "gridArea",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Use grid layout to merge cells",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "label",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Description of content, support custom templates",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "Child element under the horizontal arrangement of the layout flex",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Child element under the vertical layout flex arrangement",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "Child element under the direction of arrangement of the layout flex",
        "default": "'row'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "width",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "flex",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Flex proportion",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "heading",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether it is heading",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XDescriptionItemProperty"
  },
  "XDialogPrefix": {
    "type": "const",
    "label": "Dialog",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDialogPrefix",
    "selector": "x-dialog",
    "decorator": "component",
    "value": "'x-dialog'"
  },
  "XDialogProperty": {
    "type": "class",
    "label": "Dialog Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "title",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Title",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "visible",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Show/hide",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "placement",
        "type": "XPlace",
        "toType": "XPlace",
        "inputType": "InputSignal<XPlace>",
        "signal": "input",
        "label": "Direction, nine grid",
        "default": "'center'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "offset",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Offset distance",
        "default": "'1rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "type",
        "type": "XDialogType",
        "toType": "XDialogType",
        "inputType": "InputSignal<XDialogType>",
        "signal": "input",
        "label": "Types of",
        "default": "'info'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "hideClose",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Hide close button",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "closeText",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Use the text to close button",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "resizable",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Adjust the size of the box",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "offsetLeft",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Open the resizable resize, offset screen left",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "offsetTop",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Open the resizable resize, offset screen top",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "width",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Width",
        "default": "'32rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "height",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Height",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "minWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Min width",
        "default": "'18rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "minHeight",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Min height",
        "default": "'8rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "effect",
        "type": "XEffect",
        "toType": "XEffect",
        "inputType": "InputSignal<XEffect>",
        "signal": "input",
        "label": "Style theme",
        "default": "'white'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "footer",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Custom template at the bottom",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showCancel",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show cancel button",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "cancelText",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Cancel button text",
        "default": "'取消'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showConfirm",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show confirmation button",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "confirmText",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Confirm button text",
        "default": "'确认'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "backdropClose",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Click the mask to close",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "hasBackdrop",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether to display the background mask",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "className",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Custom style name",
        "default": "''",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "buttonsCenter",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Button center",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "draggable",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Drag dialog",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "maximize",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Maximize the bullet box button, Will also display when resizable is enabled",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "beforeClose",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Processing function before closing",
        "default": "action: XDialogAction",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "cancel",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "output",
        "label": "Cancel button event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "confirm",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "output",
        "label": "Confirm button event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "close",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "output",
        "label": "Confirm button event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showDone",
        "type": "any",
        "toType": "",
        "inputType": "OutputEmitterRef<any>",
        "signal": "output",
        "label": "Pop up complete animation loading",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "closeDone",
        "type": "any",
        "toType": "",
        "inputType": "OutputEmitterRef<any>",
        "signal": "output",
        "label": "Close complete animation",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XDialogProperty",
    "extends": "XPropertyFunction(X_DIALOG_CONFIG_NAME)"
  },
  "XDialogContainerPrefix": {
    "type": "const",
    "label": "Dialog Container",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDialogContainerPrefix",
    "selector": "x-dialog-container",
    "decorator": "component",
    "value": "'x-dialog-container'"
  },
  "XDialogContainerProperty": {
    "type": "class",
    "label": "Dialog Container Property",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDialogContainerProperty",
    "extends": "XProperty"
  },
  "XDialogAnimationState": {
    "type": "type",
    "label": "Dialog animation status",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDialogAnimationState",
    "value": "XPlace | 'void'"
  },
  "XDialogAnimationEvent": {
    "type": "interface",
    "label": "Dialog animation Event",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDialogAnimationEvent"
  },
  "XDialogCallback": {
    "type": "interface",
    "label": "Closed callback function type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDialogCallback"
  },
  "XDialogAction": {
    "type": "type",
    "label": "Type of trigger closure",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDialogAction",
    "value": "'confirm' | 'cancel' | 'close'"
  },
  "XDialogOverlayRef": {
    "type": "interface",
    "label": "Dialog object created",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDialogOverlayRef",
    "extends": "XPortalOverlayRef<XDialogComponent>"
  },
  "XDialogPortalOverlayRef": {
    "type": "interface",
    "label": "Dialog object created by service",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDialogPortalOverlayRef",
    "extends": "XPortalOverlayRef<XDialogPortalComponent>"
  },
  "XDrawerPrefix": {
    "type": "const",
    "label": "Drawer",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDrawerPrefix",
    "selector": "x-drawer",
    "decorator": "component",
    "value": "'x-drawer'"
  },
  "XDrawerProperty": {
    "type": "class",
    "label": "Drawer Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "title",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Title",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "visible",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Show/hide",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "placement",
        "type": "XPosition",
        "toType": "XPosition",
        "inputType": "InputSignal<XPosition>",
        "signal": "input",
        "label": "Display direction",
        "default": "'right'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "size",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Size, supports fixed value",
        "default": "'30%'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "backdropClose",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Click the mask to close",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "hasBackdrop",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether to display the background mask",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "className",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Custom style name",
        "default": "''",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "close",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "output",
        "label": "Closed event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XDrawerProperty",
    "extends": "XPropertyFunction(X_DRAWER_CONFIG_NAME)"
  },
  "XDrawerOption": {
    "type": "interface",
    "label": "Drawer Option",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "placement",
        "type": "XPosition",
        "label": "Display direction",
        "default": "'right'",
        "withConfig": true,
        "description": "",
        "decorator": [],
        "attr": "placement",
        "propType": "",
        "example": ""
      },
      {
        "name": "size",
        "type": "string",
        "label": "Size, supports fixed value",
        "default": "'30%'",
        "withConfig": true,
        "description": "",
        "decorator": [],
        "attr": "size",
        "propType": "",
        "example": ""
      },
      {
        "name": "className",
        "type": "string",
        "label": "Custom style name",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "className",
        "propType": "",
        "example": ""
      },
      {
        "name": "backdropClose",
        "type": "boolean",
        "label": "Click the mask to close",
        "default": "true",
        "withConfig": true,
        "description": "",
        "decorator": [],
        "attr": "backdropClose",
        "propType": "",
        "example": ""
      },
      {
        "name": "hasBackdrop",
        "type": "boolean",
        "label": "Whether to display the background mask",
        "default": "true",
        "withConfig": true,
        "description": "",
        "decorator": [],
        "attr": "hasBackdrop",
        "propType": "",
        "example": ""
      },
      {
        "name": "data",
        "type": "any",
        "label": "Data. Receive data by \"&#64;Inject(X_DRAWER_DATA)\"",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "data",
        "propType": "",
        "example": ""
      },
      {
        "name": "viewContainerRef",
        "type": "ViewContainerRef",
        "label": "A view container instance can contain other view containers.",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "viewContainerRef",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XDrawerOption"
  },
  "XDrawerContainerPrefix": {
    "type": "const",
    "label": "Drawer Container",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDrawerContainerPrefix",
    "selector": "x-drawer-container",
    "decorator": "component",
    "value": "'x-drawer-container'"
  },
  "XDrawerContainerProperty": {
    "type": "class",
    "label": "Drawer Container Property",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDrawerContainerProperty",
    "extends": "XProperty"
  },
  "XDrawerAnimationState": {
    "type": "type",
    "label": "Drawer animation status",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDrawerAnimationState",
    "value": "XPosition | 'void'"
  },
  "XDrawerAnimationEvent": {
    "type": "interface",
    "label": "Drawer animation event",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDrawerAnimationEvent"
  },
  "XDropdownPrefix": {
    "type": "const",
    "label": "Dropdown",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDropdownPrefix",
    "selector": "x-dropdown",
    "decorator": "component",
    "value": "'x-dropdown'"
  },
  "XDropdownProperty": {
    "type": "class",
    "label": "Dropdown Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XDataArray<XDropdownNode>",
        "toType": "XDropdownNode[]",
        "inputType": "InputSignalWithTransform<XDropdownNode[], XDataArray<XDropdownNode>>",
        "signal": "input",
        "label": "Node data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToDataArray"
      },
      {
        "name": "trigger",
        "type": "XDropdownTrigger",
        "toType": "XDropdownTrigger",
        "inputType": "InputSignal<XDropdownTrigger>",
        "signal": "input",
        "label": "Trigger method",
        "default": "'hover'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "placement",
        "type": "XPlacement",
        "toType": "XPlacement",
        "inputType": "InputSignal<XPlacement>",
        "signal": "input",
        "label": "Placement",
        "default": "'bottom-start'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "children",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "The node already contains child node data",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "portalMinWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Portal min-width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "portalMaxWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Portal max-width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "portalMinHeight",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Portal min-height",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "portalMaxHeight",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Portal max-height",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "hoverDelay",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Hover delay trigger time, only trigger is the 'hover'",
        "default": "200",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "activatedId",
        "type": "string | number",
        "toType": "string | number",
        "inputType": "ModelSignal<string | number>",
        "signal": "model",
        "label": "The currently activated menu",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeClick",
        "type": "XDropdownNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XDropdownNode>",
        "signal": "output",
        "label": "Node click event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XDropdownProperty",
    "extends": "XPropertyFunction(X_DROPDOWN_CONFIG_NAME)"
  },
  "XDropdownNode": {
    "type": "interface",
    "label": "Dropdown data object",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDropdownNode",
    "extends": "XListNode"
  },
  "XDropdownTrigger": {
    "type": "type",
    "label": "Display method",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDropdownTrigger",
    "value": "XTrigger"
  },
  "XDropdownPortalPrefix": {
    "type": "const",
    "label": "Dropdown Portal",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDropdownPortalPrefix",
    "selector": "x-dropdown-portal",
    "decorator": "component",
    "value": "'x-dropdown-portal'"
  },
  "XEmptyPrefix": {
    "type": "const",
    "label": "Empty",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XEmptyPrefix",
    "selector": "x-empty",
    "decorator": "component",
    "value": "'x-empty'"
  },
  "XEmptyProperty": {
    "type": "class",
    "label": "Empty Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "img",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Picture address or custom template",
        "default": "this.config?.img!",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "content",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Content or custom template",
        "default": "this.config?.content!",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XEmptyProperty",
    "extends": "XPropertyFunction(X_EMPTY_CONFIG_NAME)"
  },
  "XFindPrefix": {
    "type": "const",
    "label": "Find",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XFindPrefix",
    "selector": "x-find",
    "decorator": "component",
    "value": "'x-find'"
  },
  "XFindSearchOption": {
    "type": "interface",
    "label": "Find search option",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XFindSearchOption",
    "extends": "XFilter"
  },
  "XFindProperty": {
    "type": "class",
    "label": "Find Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display Border",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "multiple",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Multiple choice",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "columnLabel",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Check the label name field",
        "default": "'label'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "dialogTitle",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Bullet title",
        "default": "'查找选择'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "dialogCheckboxLabel",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Ball Form Select List Name",
        "default": "'选择'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "dialogCheckboxWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Ball Form Select List width",
        "default": "'60px'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "dialogEmptyContent",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Ball box selection data empty prompt information",
        "default": "'请选择数据'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "dialogWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Bullet frame width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "dialogHeight",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Height of bullet frame",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "dialogVisible",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Bullet box display, hide",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "dialogButtonsCenter",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Button centered",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "tableData",
        "type": "XData<XTableRow>",
        "toType": "XData<XTableRow>",
        "inputType": "InputSignalWithTransform<XData<XTableRow>, XData<XTableRow>>",
        "signal": "input",
        "label": "Table row data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToDataConvert"
      },
      {
        "name": "tableIndex",
        "type": "number",
        "toType": "number",
        "inputType": "ModelSignal<number>",
        "signal": "model",
        "label": "Table page number",
        "default": "1",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tableSize",
        "type": "number",
        "toType": "number",
        "inputType": "ModelSignal<number>",
        "signal": "model",
        "label": "Number of data items per page",
        "default": "10",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tableQuery",
        "type": "XQuery",
        "toType": "XQuery",
        "inputType": "ModelSignal<XQuery>",
        "signal": "model",
        "label": "Number of data items per page",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tableTotal",
        "type": "number",
        "toType": "number",
        "inputType": "ModelSignal<number>",
        "signal": "model",
        "label": "Total number of table data",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tableSortChange",
        "type": "XSort[]",
        "toType": "",
        "inputType": "OutputEmitterRef<XSort[]>",
        "signal": "output",
        "label": "Sort click events",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tableColumns",
        "type": "XTableColumn[]",
        "toType": "XTableColumn[]",
        "inputType": "InputSignal<XTableColumn[]>",
        "signal": "input",
        "label": "Table column parameters",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tableActivatedRow",
        "type": "any",
        "toType": "any",
        "inputType": "ModelSignal<any>",
        "signal": "model",
        "label": "Currently selected row data",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tableRowEmit",
        "type": "any",
        "toType": "",
        "inputType": "OutputEmitterRef<any>",
        "signal": "output",
        "label": "Table row click event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tableCheckedRow",
        "type": "{ [property: string]: any[] }",
        "toType": "{ [property: string]: any[] }",
        "inputType": "ModelSignal<{ [property: string]: any[] }>",
        "signal": "model",
        "label": "Table row click event",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tableLoading",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether to enable loading loading",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "tableVirtualScroll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Table opens virtual scrolling",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "tableBodyHeight",
        "type": "XNumber",
        "toType": "number | null",
        "inputType": "InputSignalWithTransform<number | null, XNumber>",
        "signal": "input",
        "label": "Table body data height",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "tableMinBufferPx",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "The table exceeds the minimum value of the visible window buffer, corresponding to the parameters in cdk scroll",
        "default": "100",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "tableMaxBufferPx",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "The pixels of the new data buffer for the table rendering, corresponding to the parameters in cdk scroll",
        "default": "200",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "tableAdaptionHeight",
        "type": "XNumber",
        "toType": "number | null",
        "inputType": "InputSignalWithTransform<number | null, XNumber>",
        "signal": "input",
        "label": "Table adaptive height, table height is equal to the screen height minus the value set here",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "tableDocPercent",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Table document height percentage, used for pop-up window percentage height",
        "default": "1",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "tableRowHeight",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Table row height, unit px",
        "default": "42",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "treeData",
        "type": "XData<XTreeNode>",
        "toType": "XData<XTreeNode>",
        "inputType": "InputSignalWithTransform<XData<XTreeNode>, XData<XTreeNode>>",
        "signal": "input",
        "label": "Tree node data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToDataConvert"
      },
      {
        "name": "treeActivatedId",
        "type": "any",
        "toType": "any",
        "inputType": "ModelSignal<any>",
        "signal": "model",
        "label": "Id of the currently active node of the tree",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "treeExpandedLevel",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "The level of the tree expanded by default",
        "default": "0",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "treeChecked",
        "type": "any[]",
        "toType": "any[]",
        "inputType": "ModelSignal<any[]>",
        "signal": "model",
        "label": "Tree checkbox selected node",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "treeCheckbox",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Tree display checkbox",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "treeTableConnect",
        "type": "any",
        "toType": "any",
        "inputType": "InputSignal<any>",
        "signal": "input",
        "label": "When the tree and the table exist at the same time, the tree node id corresponds to the attribute of the table, which is used to filter the table data",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "search",
        "type": "XFindSearchOption",
        "toType": "XFindSearchOption",
        "inputType": "ModelSignal<XFindSearchOption>",
        "signal": "model",
        "label": "form for data filter",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XFindProperty",
    "extends": "XFormControlFunction(X_FIND_CONFIG_NAME)"
  },
  "XFormPrefix": {
    "type": "const",
    "label": "Form",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XFormPrefix",
    "selector": "x-form",
    "decorator": "component",
    "value": "'x-form'"
  },
  "XFormProperty": {
    "type": "class",
    "label": "Form Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "formGroup",
        "type": "UntypedFormGroup",
        "toType": "UntypedFormGroup",
        "inputType": "InputSignal<UntypedFormGroup>",
        "signal": "input",
        "label": "Form FormGroup",
        "default": "new UntypedFormGroup({}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "title",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Form name",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "space",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Control spacing",
        "default": "'1.75rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "span",
        "type": "XNumber",
        "toType": "number | null",
        "inputType": "InputSignalWithTransform<number | null, XNumber>",
        "signal": "input",
        "label": "Control width, 24 grid",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "labelSuffix",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label suffix",
        "default": "''",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "controls",
        "type": "XFormControlOption[] | XFormRow[]",
        "toType": "XFormControlOption[] | XFormRow[]",
        "inputType": "InputSignal<XFormControlOption[] | XFormRow[]>",
        "signal": "input",
        "label": "Form control",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "width",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Form width",
        "default": "'100%'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "controlTpl",
        "type": "XFormTemplate",
        "toType": "XFormTemplate",
        "inputType": "InputSignal<XFormTemplate>",
        "signal": "input",
        "label": "Custom template",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "xSubmit",
        "type": "SubmitEvent",
        "toType": "",
        "inputType": "OutputEmitterRef<SubmitEvent>",
        "signal": "output",
        "label": "Submit",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XFormProperty",
    "value": "{ [property: string]: TemplateRef<any> }/*** Form Property*/@Component({ selector: `${XFormPrefix}-property`, template: '' })export class XFormProperty extends XFormControlFunction(X_FORM_CONFIG_NAME) {/*** @zh_CN 表单 FormGroup* @en_US Form FormGroup*/readonly formGroup = input<UntypedFormGroup>(new UntypedFormGroup({}));/*** @zh_CN 表单名称* @en_US Form name*/readonly title = input<string>('');/*** @zh_CN 控件间距* @en_US Control spacing*/readonly space = input<string, XNumber>(this.config?.space ?? '1.75rem', { transform: XToCssPixelValue });/*** @zh_CN 控件宽度，24栅格* @en_US Control width, 24 grid*/readonly span = input<number | null, XNumber>(null, { transform: XToNumber });/*** @zh_CN 标签后缀* @en_US Label suffix*/readonly labelSuffix = input<string>(this.config?.labelSuffix ?? '');/*** @zh_CN 表单控件* @en_US Form control*/readonly controls = input<XFormControlOption[] | XFormRow[]>([]);/*** @zh_CN 表单宽度* @en_US Form width*/readonly width = input<string, XNumber>(this.config?.width ?? '100%', { transform: XToCssPixelValue });/*** @zh_CN 自定义模板* @en_US Custom template*/readonly controlTpl = input<XFormTemplate>({});/*** @zh_CN Submit* @en_US Submit*/readonly xSubmit = output<SubmitEvent>();}",
    "extends": "XFormControlFunction(X_FORM_CONFIG_NAME)"
  },
  "undefined": {},
  "XControlOption": {
    "type": "interface",
    "label": "Control object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "value",
        "type": "any",
        "label": "Value",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "value",
        "propType": "",
        "example": ""
      },
      {
        "name": "defaultValue",
        "type": "any",
        "label": "Default value",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "defaultValue",
        "propType": "",
        "example": ""
      },
      {
        "name": "control",
        "type": "XControlType",
        "label": "Control type",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "control",
        "propType": "",
        "example": ""
      },
      {
        "name": "disabled",
        "type": "XBoolean",
        "label": "Disabled",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "disabled",
        "propType": "",
        "example": ""
      },
      {
        "name": "?: XBoolean",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Read only",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "required",
        "type": "XBoolean",
        "label": "Required",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "required",
        "propType": "",
        "example": ""
      },
      {
        "name": "hidden",
        "type": "XBoolean",
        "label": "Hide",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "hidden",
        "propType": "",
        "example": ""
      },
      {
        "name": "span",
        "type": "number",
        "label": "Column width",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "span",
        "propType": "",
        "example": ""
      },
      {
        "name": "pattern",
        "type": "RegExp | RegExp[]",
        "label": "Regular validation rules",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "pattern",
        "propType": "",
        "example": ""
      },
      {
        "name": "message",
        "type": "string | string[]",
        "label": "Verification failed prompt text",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "message",
        "propType": "",
        "example": ""
      },
      {
        "name": "inputValidator",
        "type": "(value: any) => boolean",
        "label": "Validation function of input box",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "inputValidator",
        "propType": "",
        "example": ""
      },
      {
        "name": "change",
        "type": "() => void",
        "label": "External change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "change",
        "propType": "",
        "example": ""
      },
      {
        "name": "[property: string]",
        "type": "any",
        "label": "Custom attributes",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "[property: string]",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XControlOption",
    "extends": "XIdentityProperty"
  },
  "XControl": {
    "type": "class",
    "label": "Control object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "value",
        "type": "any",
        "label": "Value",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "value",
        "propType": "",
        "example": ""
      },
      {
        "name": "nonNullable",
        "type": "any",
        "label": "Enable this. When performing a reset, the initial value is the set value, which defaults to null",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "nonNullable",
        "propType": "",
        "example": ""
      },
      {
        "name": "control",
        "type": "XControlType",
        "label": "Control type",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "control",
        "propType": "",
        "example": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "label": "Disabled",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "disabled",
        "propType": "",
        "example": ""
      },
      {
        "name": "?: boolean",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Read only",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "required",
        "type": "boolean",
        "label": "Required",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "required",
        "propType": "",
        "example": ""
      },
      {
        "name": "hidden",
        "type": "boolean",
        "label": "Hide",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "hidden",
        "propType": "",
        "example": ""
      },
      {
        "name": "span",
        "type": "number",
        "label": "Column width",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "span",
        "propType": "",
        "example": ""
      },
      {
        "name": "pattern",
        "type": "RegExp | RegExp[]",
        "label": "Regular validation rules",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "pattern",
        "propType": "",
        "example": ""
      },
      {
        "name": "message",
        "type": "string | string[]",
        "label": "Verification failed prompt text",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "message",
        "propType": "",
        "example": ""
      },
      {
        "name": "inputValidator",
        "type": "(value: any) => boolean",
        "label": "Validation function of input box",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "inputValidator",
        "propType": "",
        "example": ""
      },
      {
        "name": "change",
        "type": "() => void",
        "label": "External change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "change",
        "propType": "",
        "example": ""
      },
      {
        "name": "setValidators",
        "type": "() => void",
        "label": "Set verification",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "setValidators",
        "propType": "",
        "example": ""
      },
      {
        "name": "[property: string]",
        "type": "any",
        "label": "Custom attributes",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "[property: string]",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XControl",
    "extends": "XIdentity",
    "implements": "XControlOption"
  },
  "XFormRow": {
    "type": "interface",
    "label": "Form row object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "title",
        "type": "string",
        "label": "Row header",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "title",
        "propType": "",
        "example": ""
      },
      {
        "name": "icon",
        "type": "string",
        "label": "Row icon",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "icon",
        "propType": "",
        "example": ""
      },
      {
        "name": "controls",
        "type": "XFormControlOption[]",
        "label": "Control in row",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "controls",
        "propType": "",
        "example": ""
      },
      {
        "name": "hidden",
        "type": "XBoolean",
        "label": "Hidden",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "hidden",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XFormRow"
  },
  "XControlPrefix": {
    "type": "const",
    "label": "Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XControlPrefix",
    "selector": "x-control",
    "decorator": "component",
    "value": "'x-control'"
  },
  "XControlProperty": {
    "type": "class",
    "label": "Control Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "option",
        "type": "XFormControlOption",
        "toType": "XFormControlOption",
        "inputType": "ModelSignal<XFormControlOption>",
        "signal": "model",
        "label": "Control object",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XControlProperty"
  },
  "XFormControl": {
    "type": "class",
    "label": "Form control",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "messages",
        "type": "string[]",
        "label": "Prompt information",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "messages",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XFormControl",
    "extends": "UntypedFormControl"
  },
  "XFormControlOption": {
    "type": "type",
    "label": "Form control option",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XFormControlOption",
    "value": "XFormControlOption =| XInputControlOption| XSelectControlOption| XCascadeControlOption| XCheckboxControlOption| XColorPickerControlOption| XDatePickerControlOption| XInputNumberControlOption| XRadioControlOption| XRateControlOption| XSliderSelectControlOption| XSwitchControlOption| XTimePickerControlOption| XFindControlOption| XTemplateControlOption;"
  },
  "XFormControlComponent": {
    "type": "type",
    "label": "Form control component",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XFormControlComponent",
    "value": "XFormControlComponent =| XInputComponent| XSelectComponent| XCascadeComponent| XCheckboxComponent| XColorPickerComponent| XDatePickerComponent| XInputNumberComponent| XRadioComponent| XRateComponent| XSliderSelectComponent| XSwitchComponent| XTimePickerComponent| XTextareaComponent| XFindComponent| XAutoCompleteComponent;"
  },
  "XFormControlType": {
    "type": "type",
    "label": "Form control type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XFormControlType",
    "value": "XFormControlType =| XInputControl| XSelectControl| XCascadeControl| XCheckboxControl| XColorPickerControl| XDatePickerControl| XInputNumberControl| XRadioControl| XRateControl| XSliderSelectControl| XSwitchControl| XTimePickerControl| XTextareaControl| XFindControl| XAutoCompleteControl;"
  },
  "XControlType": {
    "type": "type",
    "label": "Form control type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XControlType",
    "value": "XControlType =| 'input'| 'select'| 'cascade'| 'checkbox'| 'color-picker'| 'date-picker'| 'input-number'| 'radio'| 'rate'| 'slider-select'| 'switch'| 'time-picker'| 'textarea'| 'find'| 'auto-complete'| 'template';"
  },
  "XInputControlOption": {
    "type": "interface",
    "label": "Input Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XInputControlOption",
    "extends": "XControlOption,"
  },
  "XSelectControlOption": {
    "type": "interface",
    "label": "Select Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSelectControlOption",
    "extends": "XControlOption,"
  },
  "XCascadeControlOption": {
    "type": "interface",
    "label": "Cascade Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCascadeControlOption",
    "extends": "XControlOption,"
  },
  "XCheckboxControlOption": {
    "type": "interface",
    "label": "Checkbox Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCheckboxControlOption",
    "extends": "XControlOption,"
  },
  "XColorPickerControlOption": {
    "type": "interface",
    "label": "ColorPicker Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XColorPickerControlOption",
    "extends": "XControlOption,"
  },
  "XDatePickerControlOption": {
    "type": "interface",
    "label": "DatePicker Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XDatePickerControlOption",
    "extends": "XControlOption,"
  },
  "XInputNumberControlOption": {
    "type": "interface",
    "label": "InputNumber Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XInputNumberControlOption",
    "extends": "XControlOption,"
  },
  "XRadioControlOption": {
    "type": "interface",
    "label": "Radio Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XRadioControlOption",
    "extends": "XControlOption,"
  },
  "XRateControlOption": {
    "type": "interface",
    "label": "Rate Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XRateControlOption",
    "extends": "XControlOption,"
  },
  "XSliderSelectControlOption": {
    "type": "interface",
    "label": "SliderSelect Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSliderSelectControlOption",
    "extends": "XControlOption,"
  },
  "XSwitchControlOption": {
    "type": "interface",
    "label": "Switch Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSwitchControlOption",
    "extends": "XControlOption,"
  },
  "XTimePickerControlOption": {
    "type": "interface",
    "label": "TimePicker Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTimePickerControlOption",
    "extends": "XControlOption,"
  },
  "XTextareaControlOption": {
    "type": "interface",
    "label": "Textarea Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTextareaControlOption",
    "extends": "XControlOption,"
  },
  "XFindControlOption": {
    "type": "interface",
    "label": "Find Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XFindControlOption",
    "extends": "XControlOption,"
  },
  "XAutoCompleteControlOption": {
    "type": "interface",
    "label": "AutoComplete Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XAutoCompleteControlOption",
    "extends": "XControlOption,"
  },
  "XTemplateControlOption": {
    "type": "interface",
    "label": "Template Control",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTemplateControlOption",
    "extends": "XControlOption,"
  },
  "XHighlightPrefix": {
    "type": "const",
    "label": "Highlight",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XHighlightPrefix",
    "selector": "x-highlight",
    "decorator": "component",
    "value": "'x-highlight'"
  },
  "XHighlightProperty": {
    "type": "class",
    "label": "Highlight Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "type",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Code type",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "data",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Data",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "highlightLines",
        "type": "XHighlightLines",
        "toType": "XHighlightLines",
        "inputType": "InputSignal<XHighlightLines>",
        "signal": "input",
        "label": "Highlight row data",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showCopy",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "display copy",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XHighlightProperty",
    "extends": "XProperty"
  },
  "XHighlightLines": {
    "type": "interface",
    "label": "Highlight row data",
    "description": "Example：{'danger': '1, 2, 4', 'primary': '7-10, 12, 15-20'}",
    "example": "",
    "properties": [
      {
        "name": "primary",
        "type": "string",
        "label": "Primary",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "primary",
        "propType": "",
        "example": ""
      },
      {
        "name": "success",
        "type": "string",
        "label": "Success",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "success",
        "propType": "",
        "example": ""
      },
      {
        "name": "warning",
        "type": "string",
        "label": "Warning",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "warning",
        "propType": "",
        "example": ""
      },
      {
        "name": "danger",
        "type": "string",
        "label": "Danger",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "danger",
        "propType": "",
        "example": ""
      },
      {
        "name": "info",
        "type": "string",
        "label": "Info",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "info",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XHighlightLines"
  },
  "XIconPrefix": {
    "type": "const",
    "label": "Icon",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIconPrefix",
    "selector": "x-icon",
    "decorator": "component",
    "value": "'x-icon'"
  },
  "XIconHref": {
    "type": "const",
    "label": "The root address of the SVG icon",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XIconHref",
    "value": "'https://ngnest.com/static/icons/'"
  },
  "XIconProperty": {
    "type": "class",
    "label": "Icon Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "href",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "The root address of the SVG icon can be configured only once globally. All icon resources are in ng-nest-icon on github",
        "default": "XIconHref",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "type",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Icon type",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "color",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Icon color",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rotate",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Icon rotation angle",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "spin",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Loading effect (icon keeps rotating)",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XIconProperty",
    "extends": "XPropertyFunction(X_ICON_CONFIG_NAME)"
  },
  "XImagePrefix": {
    "type": "const",
    "label": "Image",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XImagePrefix",
    "selector": "x-image",
    "decorator": "component",
    "value": "'x-image'"
  },
  "XImageProperty": {
    "type": "class",
    "label": "Image Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "src",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Picture display address",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "width",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Picture width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "height",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Picture height",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "alt",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Image description",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "fallback",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Load fault tolerance address",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "previewText",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Preview text",
        "default": "'预览'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "placeholder",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Gradually loaded the display of the display",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "previewTpl",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Custom preview operation",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "error",
        "type": "ErrorEvent",
        "toType": "",
        "inputType": "OutputEmitterRef<ErrorEvent>",
        "signal": "output",
        "label": "Picture load failed",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "load",
        "type": "Event",
        "toType": "",
        "inputType": "OutputEmitterRef<Event>",
        "signal": "output",
        "label": "Picture loading complete",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XImageProperty",
    "extends": "XPropertyFunction(X_IMAGE_CONFIG_NAME)"
  },
  "XImageNode": {
    "type": "interface",
    "label": "Image node data",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "src",
        "type": "string",
        "label": "Picture display address",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "src",
        "propType": "",
        "example": ""
      },
      {
        "name": "alt",
        "type": "string",
        "label": "Image description",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "alt",
        "propType": "",
        "example": ""
      },
      {
        "name": "fallback",
        "type": "string",
        "label": "Load fault tolerance address",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "fallback",
        "propType": "",
        "example": ""
      },
      {
        "name": "activated",
        "type": "boolean",
        "label": "Current activated pictures",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "activated",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XImageNode"
  },
  "XImagePreviewPrefix": {
    "type": "const",
    "label": "Image Preview",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XImagePreviewPrefix",
    "selector": "x-image-preview",
    "decorator": "component",
    "value": "'x-image-preview'"
  },
  "XImagePreviewProperty": {
    "type": "class",
    "label": "Image Preview Property",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XImagePreviewProperty",
    "extends": "XProperty"
  },
  "XInputPrefix": {
    "type": "const",
    "label": "Input",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XInputPrefix",
    "selector": "x-input",
    "decorator": "component",
    "value": "'x-input'"
  },
  "XInputProperty": {
    "type": "class",
    "label": "Input Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "type",
        "type": "XInputType",
        "toType": "XInputType",
        "inputType": "InputSignal<XInputType>",
        "signal": "input",
        "label": "Input type",
        "default": "'text'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "clearable",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Clear button",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "icon",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Icon",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "iconLayout",
        "type": "XInputIconLayoutType",
        "toType": "XInputIconLayoutType",
        "inputType": "InputSignal<XInputIconLayoutType>",
        "signal": "input",
        "label": "Icon layout",
        "default": "'right'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "iconSpin",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Icon animation",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "maxlength",
        "type": "XNumber",
        "toType": "number | null",
        "inputType": "InputSignalWithTransform<number | null, XNumber>",
        "signal": "input",
        "label": "Enter the maximum length",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "max",
        "type": "XNumber",
        "toType": "number | null",
        "inputType": "InputSignalWithTransform<number | null, XNumber>",
        "signal": "input",
        "label": "Enter the max",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "min",
        "type": "XNumber",
        "toType": "number | null",
        "inputType": "InputSignalWithTransform<number | null, XNumber>",
        "signal": "input",
        "label": "Enter the min",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "width",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display Border",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "inputStyle",
        "type": "{ [style: string]: any }",
        "toType": "{ [style: string]: any }",
        "inputType": "InputSignal<{ [style: string]: any }>",
        "signal": "input",
        "label": "Input Style",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "inputPadding",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Enter the border of the input box.",
        "default": "'0.75rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "inputIconPadding",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Enter the border between the input box (including icon).",
        "default": "'2.15rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  validator",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Initial enable validation, which is automatically enabled when the input value is",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "clearEmit",
        "type": "any",
        "toType": "",
        "inputType": "OutputEmitterRef<any>",
        "signal": "output",
        "label": "Clear button event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "xFocus",
        "type": "any",
        "toType": "",
        "inputType": "OutputEmitterRef<any>",
        "signal": "output",
        "label": "Focus event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "xBlur",
        "type": "any",
        "toType": "",
        "inputType": "OutputEmitterRef<any>",
        "signal": "output",
        "label": "Blur event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "xInput",
        "type": "any",
        "toType": "",
        "inputType": "OutputEmitterRef<any>",
        "signal": "output",
        "label": "Input event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "xKeydown",
        "type": "KeyboardEvent",
        "toType": "",
        "inputType": "OutputEmitterRef<KeyboardEvent>",
        "signal": "output",
        "label": "Keydown event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "xClick",
        "type": "MouseEvent",
        "toType": "",
        "inputType": "OutputEmitterRef<MouseEvent>",
        "signal": "output",
        "label": "Click event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "xMouseenter",
        "type": "MouseEvent",
        "toType": "",
        "inputType": "OutputEmitterRef<MouseEvent>",
        "signal": "output",
        "label": "Mouseenter event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "xMouseleave",
        "type": "MouseEvent",
        "toType": "",
        "inputType": "OutputEmitterRef<MouseEvent>",
        "signal": "output",
        "label": "Mouseleave event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "xComposition",
        "type": "any",
        "toType": "",
        "inputType": "OutputEmitterRef<any>",
        "signal": "output",
        "label": "Composition event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XInputProperty",
    "extends": "XFormControlFunction(X_INPUT_CONFIG_NAME)"
  },
  "XInputType": {
    "type": "type",
    "label": "Input box type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XInputType",
    "value": "'text' | 'password' | 'number'"
  },
  "XInputIconLayoutType": {
    "type": "type",
    "label": "Icon layout, refers to the position in the input box",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XInputIconLayoutType",
    "value": "XPositionLeftRight"
  },
  "XInputGroupPrefix": {
    "type": "const",
    "label": "Input Group",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XInputGroupPrefix",
    "selector": "x-input-group",
    "decorator": "component",
    "value": "'x-input-group'"
  },
  "XInputGroupProperty": {
    "type": "class",
    "label": "Input Group Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "size",
        "type": "XSize | undefined",
        "toType": "XSize | undefined",
        "inputType": "InputSignal<XSize | undefined>",
        "signal": "input",
        "label": "Size",
        "default": "this.config?.size",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display Border",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "compact",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether to use a compact mode",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XInputGroupProperty",
    "extends": "XPropertyFunction(X_INPUT_GROUP_CONFIG_NAME)"
  },
  "XInputNumberPrefix": {
    "type": "const",
    "label": "InputNumber",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XInputNumberPrefix",
    "selector": "x-input-number",
    "decorator": "component",
    "value": "'x-input-number'"
  },
  "XInputNumberProperty": {
    "type": "class",
    "label": "InputNumber Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "min",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Minimum",
        "default": "Number.MIN_SAFE_INTEGER",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "max",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Max",
        "default": "Number.MAX_SAFE_INTEGER",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "step",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Step count",
        "default": "1",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "debounce",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Stepping speed after pressing",
        "default": "40",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "precision",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Precision",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display Border",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "formatter",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Display Formatter",
        "default": "value: number",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XInputNumberProperty",
    "extends": "XFormControlFunction(X_INPUT_NUMBER_CONFIG_NAME)"
  },
  "XRowPrefix": {
    "type": "const",
    "label": "Row",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XRowPrefix",
    "selector": "x-row",
    "decorator": "component",
    "value": "'x-row'"
  },
  "XRowProperty": {
    "type": "class",
    "label": "Row Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "space",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Column interval",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "Horizontal arrangement under flex layout",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Vertical arrangement under flex layout",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XRowProperty",
    "extends": "XProperty"
  },
  "XColPrefix": {
    "type": "const",
    "label": "Col",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XColPrefix",
    "selector": "x-col",
    "decorator": "component",
    "value": "'x-col'"
  },
  "XColProperty": {
    "type": "class",
    "label": "Col Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "span",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "24 grid layout, column width",
        "default": "24",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "offset",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "The number of intervals on the left side of the grid",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "xs",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "<768px",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "sm",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "≥768px",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "md",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "≥992px",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "lg",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "≥1200px",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "xl",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "≥1920px",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "inherit",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Default style",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XColProperty",
    "extends": "XProperty"
  },
  "XLinkPrefix": {
    "type": "const",
    "label": "Link",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XLinkPrefix",
    "selector": "x-link",
    "decorator": "component",
    "value": "'x-link'"
  },
  "XLinkProperty": {
    "type": "class",
    "label": "Link Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "href",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Link",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "icon",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Icon",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "underline",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Underscore",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "iconRight",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Icons are aligned to the right",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "preventDefault",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Block the default behavior of hyperlinks",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "type",
        "type": "XLinkType",
        "toType": "XLinkType",
        "inputType": "InputSignal<XLinkType>",
        "signal": "input",
        "label": "Link type",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "target",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Open method",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XLinkProperty",
    "extends": "XPropertyFunction(X_LINK_CONFIG_NAME)"
  },
  "XListPrefix": {
    "type": "const",
    "label": "List",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XListPrefix",
    "selector": "x-list",
    "decorator": "component",
    "value": "'x-list'"
  },
  "XListProperty": {
    "type": "class",
    "label": "List Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XData<XListNode>",
        "toType": "XData<XListNode>",
        "inputType": "InputSignal<XData<XListNode>>",
        "signal": "input",
        "label": "List data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "multiple",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Multiple choice",
        "default": "1",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "selectAll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Multi choice to add full selection function",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "selectAllText",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Selected all text",
        "default": "'全选'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "checked",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Selected",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "drag",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Drag",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "objectArray",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "When multiple selection is enabled, the value of ngmodel is an array of objects",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "nodeTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "header",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "List header",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "footer",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "List footer",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "scrollElement",
        "type": "HTMLElement",
        "toType": "HTMLElement",
        "inputType": "InputSignal<HTMLElement>",
        "signal": "input",
        "label": "Rolling area element",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "loadMore",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "load more",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "loadMoreText",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Load more text",
        "default": "'加载更多'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "loadingMoreText",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Loading",
        "default": "'正在加载中'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "virtualScroll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Turn on virtual scrolling",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "scrollHeight",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "The virtual rolling height will actually remove the head and end, the full selection, more height",
        "default": "400",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "heightAdaption",
        "type": "ElementRef<HTMLElement> | HTMLElement",
        "toType": "ElementRef<HTMLElement> | HTMLElement",
        "inputType": "InputSignal<ElementRef<HTMLElement> | HTMLElement>",
        "signal": "input",
        "label": "virtual rolling height follows the specified object",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "minBufferPx",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Exceed the minimum value of the visible window buffer, corresponding to the parameters in cdk scroll",
        "default": "100",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "maxBufferPx",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Render the pixels of the new data buffer, corresponding to the parameters in cdk scroll",
        "default": "200",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "keywordText",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Keyword highlighting",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "caseSensitive",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Case-sensitive",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "inPortal",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "The style selected in the pop-up box is determined by size",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "onSelectAll",
        "type": "boolean",
        "toType": "",
        "inputType": "OutputEmitterRef<boolean>",
        "signal": "output",
        "label": "全选事件",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeMouseenter",
        "type": "XListNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XListNode>",
        "signal": "output",
        "label": "Node mouseenter event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeMouseleave",
        "type": "XListNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XListNode>",
        "signal": "output",
        "label": "Node mouseleave event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeClick",
        "type": "XListNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XListNode>",
        "signal": "output",
        "label": "Node click event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "dropListDropped",
        "type": "XListDragDrop",
        "toType": "",
        "inputType": "OutputEmitterRef<XListDragDrop>",
        "signal": "output",
        "label": "Drag the end",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "keyManagerTabOut",
        "type": "void",
        "toType": "",
        "inputType": "OutputEmitterRef<void>",
        "signal": "output",
        "label": "Tab Out event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "keyManagerChange",
        "type": "number",
        "toType": "",
        "inputType": "OutputEmitterRef<number>",
        "signal": "output",
        "label": "Tab Out event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XListProperty",
    "extends": "XFormControlFunction(X_LIST_CONFIG_NAME)"
  },
  "XListNode": {
    "type": "interface",
    "label": "List data object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "icon",
        "type": "string",
        "label": "Iicon",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "icon",
        "propType": "",
        "example": ""
      },
      {
        "name": "divided",
        "type": "boolean",
        "label": "Split line",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "divided",
        "propType": "",
        "example": ""
      },
      {
        "name": "event",
        "type": "Event",
        "label": "Event",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "event",
        "propType": "",
        "example": ""
      },
      {
        "name": "hover",
        "type": "boolean",
        "label": "Hover",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "hover",
        "propType": "",
        "example": ""
      },
      {
        "name": "openPortal",
        "type": "boolean",
        "label": "open portal",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "openPortal",
        "propType": "",
        "example": ""
      },
      {
        "name": "active",
        "type": "boolean",
        "label": "Active",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "active",
        "propType": "",
        "example": ""
      },
      {
        "name": "change",
        "type": "Function",
        "label": "Check for updates",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "change",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XListNode",
    "extends": "XParentIdentityProperty<XListNode>"
  },
  "XListOptionPrefix": {
    "type": "const",
    "label": "List Option",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XListOptionPrefix",
    "selector": "x-list-option",
    "decorator": "component",
    "value": "'x-list-option'"
  },
  "XListOptionProperty": {
    "type": "class",
    "label": "List Option Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "node",
        "type": "XListNode",
        "toType": "XListNode",
        "inputType": "InputSignal<XListNode>",
        "signal": "input",
        "label": "Node param",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "checked",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Selected",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "nodeTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "selected",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "selected",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "forbidden",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "forbidden",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "active",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "openPortal",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "open portal",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "optionClass",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Customize data object styles",
        "default": "node: XListNode",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "icon",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "icon",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "divided",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Split line",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "leaf",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "leaf",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "keywordText",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Keyword highlighting",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "caseSensitive",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Case-sensitive",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XListOptionProperty"
  },
  "XLoadingPrefix": {
    "type": "const",
    "label": "Loading",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XLoadingPrefix",
    "selector": "x-loading",
    "decorator": "component",
    "value": "'x-loading'"
  },
  "XLoadingProperty": {
    "type": "class",
    "label": "Loading Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "loading",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show loading",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolea"
      },
      {
        "name": "zIndex",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "z-index",
        "default": "10",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "size",
        "type": "XSize | number",
        "toType": "XSize | number",
        "inputType": "InputSignal<XSize | number>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "text",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Display text, support custom template",
        "default": "this.config?.text!",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "icon",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Icon displayed",
        "default": "this.config?.icon!",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "color",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Color",
        "default": "this.config?.color!",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "fullScreen",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Full-screen display",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "radius",
        "type": "XBoolean | XCorner[]",
        "toType": "XBoolean | XCorner[]",
        "inputType": "InputSignal<XBoolean | XCorner[]>",
        "signal": "input",
        "label": "Rounded corner coverage display",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "background",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Background style",
        "default": "this.config?.background!",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XLoadingProperty",
    "extends": "XPropertyFunction(X_LOADING_CONFIG_NAME)"
  },
  "XMenuPrefix": {
    "type": "const",
    "label": "Menu",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMenuPrefix",
    "selector": "x-menu",
    "decorator": "component",
    "value": "'x-menu'"
  },
  "XMenuProperty": {
    "type": "class",
    "label": "Menu Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XDataArray<XMenuNode>",
        "toType": "XMenuNode[]",
        "inputType": "InputSignalWithTransform<XMenuNode[], XDataArray<XMenuNode>>",
        "signal": "input",
        "label": "Node data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToDataArray"
      },
      {
        "name": "layout",
        "type": "XMenuLayout",
        "toType": "XMenuLayout",
        "inputType": "InputSignal<XMenuLayout>",
        "signal": "input",
        "label": "Layout direction",
        "default": "'row'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "width",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Width, only layout layout is the 'column'",
        "default": "'12rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "collapsed",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Shrink menu",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "trigger",
        "type": "XMenuTrigger",
        "toType": "XMenuTrigger",
        "inputType": "InputSignal<XMenuTrigger>",
        "signal": "input",
        "label": "Trigger mode, only for horizontal layout",
        "default": "'hover'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "expandedAll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "All expanded levels are only effective for the layout of'column'",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "expandedLevel",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "The level expanded by default is only valid for the layout of'column'",
        "default": "-1",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "activatedId",
        "type": "string | number",
        "toType": "string | number",
        "inputType": "ModelSignal<string | number>",
        "signal": "model",
        "label": "Currently active node id",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "target",
        "type": "string | HTMLElement",
        "toType": "string | HTMLElement",
        "inputType": "InputSignal<string | HTMLElement>",
        "signal": "input",
        "label": "Rolling container",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "portalMinWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Portal min-width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "nodeClick",
        "type": "XMenuNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XMenuNode>",
        "signal": "output",
        "label": "Node click event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XMenuProperty",
    "extends": "XPropertyFunction(X_MENU_CONFIG_NAME)"
  },
  "XMenuNode": {
    "type": "interface",
    "label": "MenuNode node data",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "icon",
        "type": "string",
        "label": "Icon",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "icon",
        "propType": "",
        "example": ""
      },
      {
        "name": "open",
        "type": "boolean",
        "label": "Unfold",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "open",
        "propType": "",
        "example": ""
      },
      {
        "name": "childrenLoaded",
        "type": "boolean",
        "label": "Child node has been loaded",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "childrenLoaded",
        "propType": "",
        "example": ""
      },
      {
        "name": "category",
        "type": "string",
        "label": "Category display, after setting the value, the node is displayed in a category style",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "category",
        "propType": "",
        "example": ""
      },
      {
        "name": "categoryNode",
        "type": "boolean",
        "label": "Classification node, through internal calculation",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "categoryNode",
        "propType": "",
        "example": ""
      },
      {
        "name": "change",
        "type": "Function",
        "label": "Check for updates",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "change",
        "propType": "",
        "example": ""
      },
      {
        "name": "routerLink",
        "type": "string | any[]",
        "label": "Router",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "routerLink",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XMenuNode",
    "extends": "XParentIdentityProperty<XMenuNode>"
  },
  "XMenuLayout": {
    "type": "type",
    "label": "Layout",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMenuLayout",
    "value": "'row' | 'column'"
  },
  "XMenuTrigger": {
    "type": "type",
    "label": "Trigger method",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMenuTrigger",
    "value": "XTrigger"
  },
  "XMenuNodePrefix": {
    "type": "const",
    "label": "Menu Node",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMenuNodePrefix",
    "selector": "x-menu-node",
    "decorator": "component",
    "value": "'x-menu-node'"
  },
  "XMenuNodeProperty": {
    "type": "class",
    "label": "Menu Node Property",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMenuNodeProperty",
    "extends": "XProperty"
  },
  "XMessagePrefix": {
    "type": "const",
    "label": "Message",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMessagePrefix",
    "selector": "x-message",
    "decorator": "component",
    "value": "'x-message'"
  },
  "XMessageOption": {
    "type": "interface",
    "label": "Message Option",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "id",
        "type": "string",
        "label": "Message id",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "id",
        "propType": "",
        "example": ""
      },
      {
        "name": "placement",
        "type": "XPlace",
        "label": "Direction, nine grid",
        "default": "'top'",
        "withConfig": true,
        "description": "",
        "decorator": [],
        "attr": "placement",
        "propType": "",
        "example": ""
      },
      {
        "name": "offset",
        "type": "string | string[]",
        "label": "Offset distance",
        "default": "'2rem'",
        "withConfig": true,
        "description": "",
        "decorator": [],
        "attr": "offset",
        "propType": "",
        "example": ""
      },
      {
        "name": "type",
        "type": "XMessageType",
        "label": "Types of",
        "default": "'info'",
        "withConfig": true,
        "description": "",
        "decorator": [],
        "attr": "type",
        "propType": "",
        "example": ""
      },
      {
        "name": "displayType",
        "type": "XMessageDisplayType",
        "label": "When multiple messages, the display type",
        "default": "'list'",
        "withConfig": true,
        "description": "",
        "decorator": [],
        "attr": "displayType",
        "propType": "",
        "example": ""
      },
      {
        "name": "width",
        "type": "string",
        "label": "Width",
        "default": "",
        "withConfig": true,
        "description": "",
        "decorator": [],
        "attr": "width",
        "propType": "",
        "example": ""
      },
      {
        "name": "height",
        "type": "string",
        "label": "Height",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "height",
        "propType": "",
        "example": ""
      },
      {
        "name": "duration",
        "type": "number",
        "label": "Delay off time",
        "default": "3000",
        "withConfig": true,
        "description": "",
        "decorator": [],
        "attr": "duration",
        "propType": "",
        "example": ""
      },
      {
        "name": "hideClose",
        "type": "boolean",
        "label": "Hide close button",
        "default": "true",
        "withConfig": true,
        "description": "",
        "decorator": [],
        "attr": "hideClose",
        "propType": "",
        "example": ""
      },
      {
        "name": "showIcon",
        "type": "boolean",
        "label": "Show icon",
        "default": "true",
        "withConfig": true,
        "description": "",
        "decorator": [],
        "attr": "showIcon",
        "propType": "",
        "example": ""
      },
      {
        "name": "durationSubscription",
        "type": "Subscription | null",
        "label": "Delayed closing the subscribed object, used to release or cancel",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "durationSubscription",
        "propType": "",
        "example": ""
      },
      {
        "name": "durationSub",
        "type": "Subject<any>",
        "label": "Delay in closing the subscription object",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "durationSub",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XMessageOption",
    "extends": "XAlertOption"
  },
  "XMessageOverlayRef": {
    "type": "interface",
    "label": "Message object created",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMessageOverlayRef",
    "extends": "XPortalOverlayRef<XMessageComponent>"
  },
  "XMessagePlacement": {
    "type": "interface",
    "label": "Message object in Jiugongge",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMessagePlacement"
  },
  "XMessagePlacementRef": {
    "type": "interface",
    "label": "Message object in Jiugongge",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "ref",
        "type": "XMessageOverlayRef",
        "label": "Placement overlayRef",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "ref",
        "propType": "",
        "example": ""
      },
      {
        "name": "list",
        "type": "XMessageOption[]",
        "label": "Corresponding message list data",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "list",
        "propType": "",
        "example": ""
      },
      {
        "name": "closeAll",
        "type": "() => void",
        "label": "Close all data",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "closeAll",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XMessagePlacementRef"
  },
  "XMessageType": {
    "type": "type",
    "label": "Types of",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMessageType",
    "value": "XStatus"
  },
  "XMessageBoxPrefix": {
    "type": "const",
    "label": "MessageBox",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMessageBoxPrefix",
    "selector": "x-message-box",
    "decorator": "component",
    "value": "'x-message-box'"
  },
  "XMessageBoxOption": {
    "type": "interface",
    "label": "MessageBox Option",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "placement",
        "type": "XPlace",
        "label": "Direction, nine grid",
        "default": "'top'",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "placement",
        "propType": "",
        "example": ""
      },
      {
        "name": "offset",
        "type": "string | string[]",
        "label": "Offset distance",
        "default": "'2rem'",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "offset",
        "propType": "",
        "example": ""
      },
      {
        "name": "type",
        "type": "XMessageBoxType",
        "label": "Types of",
        "default": "'info'",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "type",
        "propType": "",
        "example": ""
      },
      {
        "name": "width",
        "type": "string",
        "label": "Width",
        "default": "'16rem'",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "width",
        "propType": "",
        "example": ""
      },
      {
        "name": "height",
        "type": "string",
        "label": "Height",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "height",
        "propType": "",
        "example": ""
      },
      {
        "name": "hideClose",
        "type": "boolean",
        "label": "Hide close button",
        "default": "true",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "hideClose",
        "propType": "",
        "example": ""
      },
      {
        "name": "showIcon",
        "type": "boolean",
        "label": "Show icon",
        "default": "true",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "showIcon",
        "propType": "",
        "example": ""
      },
      {
        "name": "showCancel",
        "type": "boolean",
        "label": "Show cancel button",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "showCancel",
        "propType": "",
        "example": ""
      },
      {
        "name": "callback",
        "type": "XMessageBoxCallback",
        "label": "Close event",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "callback",
        "propType": "",
        "example": ""
      },
      {
        "name": "backdropClose",
        "type": "boolean",
        "label": "Click the mask to close",
        "default": "false",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "backdropClose",
        "propType": "",
        "example": ""
      },
      {
        "name": "confirmText",
        "type": "string",
        "label": "Confirm button text",
        "default": "'确定'",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "confirmText",
        "propType": "",
        "example": ""
      },
      {
        "name": "cancelText",
        "type": "string",
        "label": "Cancel button text",
        "default": "'取消'",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "cancelText",
        "propType": "",
        "example": ""
      },
      {
        "name": "showInput",
        "type": "boolean",
        "label": "Whether to show the input box",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "showInput",
        "propType": "",
        "example": ""
      },
      {
        "name": "inputPattern",
        "type": "RegExp | RegExp[]",
        "label": "Matching rules",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "inputPattern",
        "propType": "",
        "example": ""
      },
      {
        "name": "inputInvalidMessage",
        "type": "string | string[]",
        "label": "Information prompt for matching failure",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "inputInvalidMessage",
        "propType": "",
        "example": ""
      },
      {
        "name": "inputPlaceholder",
        "type": "string",
        "label": "Placeholder for input box",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "inputPlaceholder",
        "propType": "",
        "example": ""
      },
      {
        "name": "inputType",
        "type": "XInputType",
        "label": "Type of input box",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "inputType",
        "propType": "",
        "example": ""
      },
      {
        "name": "inputValue",
        "type": "string",
        "label": "Value of input box",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "inputValue",
        "propType": "",
        "example": ""
      },
      {
        "name": "inputValidator",
        "type": "(value: any) => boolean",
        "label": "Validation function of input box",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "inputValidator",
        "propType": "",
        "example": ""
      },
      {
        "name": "beforeClose",
        "type": "XMessageBoxCallback",
        "label": "Processing function before closing",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "beforeClose",
        "propType": "",
        "example": ""
      },
      {
        "name": "confirmLoading",
        "type": "XMessageBoxConfirmLoading",
        "label": "confirm Loading",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "confirmLoading",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XMessageBoxOption",
    "extends": "XAlertOption"
  },
  "XMessageBoxCallback": {
    "type": "interface",
    "label": "Closed callback function type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMessageBoxCallback"
  },
  "XMessageBoxConfirmLoading": {
    "type": "type",
    "label": "confirm Loading",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMessageBoxConfirmLoading",
    "value": "() => Observable<boolean>"
  },
  "XMessageBoxAction": {
    "type": "type",
    "label": "Type of trigger closure",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMessageBoxAction",
    "value": "'confirm' | 'cancel' | 'close'"
  },
  "XMessageBoxOverlayRef": {
    "type": "interface",
    "label": "Message object created",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XMessageBoxOverlayRef",
    "extends": "XPortalOverlayRef<XMessageBoxComponent>"
  },
  "XNotificationPrefix": {
    "type": "const",
    "label": "Notification",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XNotificationPrefix",
    "selector": "x-notification",
    "decorator": "component",
    "value": "'x-notification'"
  },
  "XNotificationOption": {
    "type": "interface",
    "label": "Notification Option",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "placement",
        "type": "XCorner",
        "label": "Placement",
        "default": "'top-end'",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "placement",
        "propType": "",
        "example": ""
      },
      {
        "name": "offset",
        "type": "string | string[]",
        "label": "Offset distance",
        "default": "'0.5rem'",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "offset",
        "propType": "",
        "example": ""
      },
      {
        "name": "type",
        "type": "XNotificationType",
        "label": "Types of",
        "default": "'info'",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "type",
        "propType": "",
        "example": ""
      },
      {
        "name": "width",
        "type": "string",
        "label": "Width",
        "default": "'20rem'",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "width",
        "propType": "",
        "example": ""
      },
      {
        "name": "height",
        "type": "string",
        "label": "Height",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "height",
        "propType": "",
        "example": ""
      },
      {
        "name": "duration",
        "type": "number",
        "label": "Delay off time",
        "default": "4500",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "duration",
        "propType": "",
        "example": ""
      },
      {
        "name": "hideClose",
        "type": "boolean",
        "label": "Hide close button",
        "default": "true",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "hideClose",
        "propType": "",
        "example": ""
      },
      {
        "name": "showIcon",
        "type": "boolean",
        "label": "Show icon",
        "default": "true",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "showIcon",
        "propType": "",
        "example": ""
      },
      {
        "name": "durationSubscription",
        "type": "Subscription | null",
        "label": "Delayed closing the subscribed object, used to release or cancel",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "durationSubscription",
        "propType": "",
        "example": ""
      },
      {
        "name": "durationSub",
        "type": "Subject<any>",
        "label": "Delay in closing the subscription object",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "durationSub",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XNotificationOption",
    "extends": "XAlertOption"
  },
  "XNotificationOverlayRef": {
    "type": "interface",
    "label": "Message object created",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XNotificationOverlayRef",
    "extends": "XPortalOverlayRef<XNotificationComponent>"
  },
  "XNotificationPlacement": {
    "type": "interface",
    "label": "Message object in nine grid",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XNotificationPlacement"
  },
  "XOutletPrefix": {
    "type": "const",
    "label": "Outlet 指令名称",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XOutletPrefix",
    "selector": "x-outlet",
    "decorator": "directive",
    "value": "'x-outlet'"
  },
  "XPageHeaderPrefix": {
    "type": "const",
    "label": "PageHeader",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPageHeaderPrefix",
    "selector": "x-page-header",
    "decorator": "component",
    "value": "'x-page-header'"
  },
  "XPageHeaderProperty": {
    "type": "class",
    "label": "PageHeader Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "backIcon",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Back icon",
        "default": "'fto-arrow-left'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "backText",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Return text",
        "default": "''",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "title",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Title",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "subTitle",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Subtitle",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "backClick",
        "type": "Event",
        "toType": "",
        "inputType": "OutputEmitterRef<Event>",
        "signal": "output",
        "label": "Click to return event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XPageHeaderProperty",
    "extends": "XPropertyFunction(X_PAGE_HEADER_CONFIG_NAME)"
  },
  "XPaginationPrefix": {
    "type": "const",
    "label": "Pagination",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPaginationPrefix",
    "selector": "x-pagination",
    "decorator": "component",
    "value": "'x-pagination'"
  },
  "XPaginationSizeData": {
    "type": "const",
    "label": "Sub-selection",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPaginationSizeData",
    "value": "[10, 20, 50, 100]"
  },
  "XPaginationProperty": {
    "type": "class",
    "label": "Pagination Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "index",
        "type": "number",
        "toType": "number",
        "inputType": "ModelSignal<number>",
        "signal": "model",
        "label": "Current page number",
        "default": "1",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "size",
        "type": "number",
        "toType": "number",
        "inputType": "ModelSignal<number>",
        "signal": "model",
        "label": "Number of items displayed per page",
        "default": "10",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "total",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Total",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "query",
        "type": "XQuery",
        "toType": "XQuery",
        "inputType": "ModelSignal<XQuery>",
        "signal": "model",
        "label": "Query conditions",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "pageLinkSize",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "The largest number of pages display",
        "default": "5",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "showEllipsis",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display the first and last page",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "showTotal",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display the total",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "space",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Button spacing",
        "default": "'0.25rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "showBackground",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show background",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "showSize",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show size",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "sizeWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "size with select",
        "default": "'6.875rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "showInputSize",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display the number of input page breaks (cannot exist with the drop-down options of page breaks)",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "inputSizeWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "size with input",
        "default": "'3.125rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "sizeData",
        "type": "XDataArray<XSelectNode>",
        "toType": "XDataArray<XSelectNode>",
        "inputType": "InputSignal<XDataArray<XSelectNode>>",
        "signal": "input",
        "label": "Paging choose items of data",
        "default": "XPaginationSizeData",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "showJump",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show size",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "jumpWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "size with",
        "default": "'3.125rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "totalTpl",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Total template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "simple",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Simple",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "simpleIndexWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Simple index with",
        "default": "'8.125rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      }
    ],
    "name": "XPaginationProperty",
    "extends": "XPropertyFunction(X_PAGINATION_CONFIG_NAME)"
  },
  "XPopconfirmPrefix": {
    "type": "const",
    "label": "Popconfirm",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPopconfirmPrefix",
    "selector": "x-popconfirm",
    "decorator": "component",
    "value": "'x-popconfirm'"
  },
  "XPopconfirmProperty": {
    "type": "class",
    "label": "Popconfirm Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "title",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Title, support custom template",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "content",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Content, support custom templates",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "placement",
        "type": "XPlacement",
        "toType": "XPlacement",
        "inputType": "InputSignal<XPlacement>",
        "signal": "input",
        "label": "Pop-up position",
        "default": "'bottom'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "trigger",
        "type": "XPopoverTrigger",
        "toType": "XPopoverTrigger",
        "inputType": "InputSignal<XPopoverTrigger>",
        "signal": "input",
        "label": "Activation method",
        "default": "'click'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "width",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "width",
        "default": "''",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "maxWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Max width",
        "default": "'12rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "minWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Min width",
        "default": "'12rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "icon",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Icon",
        "default": "'fto-help-circle'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "iconColor",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Icon color",
        "default": "'#e6a23c'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "cancelText",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Canceled text",
        "default": "''",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "confirmText",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Confirmed text",
        "default": "''",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "confirmAsync",
        "type": "Observable<void>",
        "toType": "Observable<void>",
        "inputType": "InputSignal<Observable<void>>",
        "signal": "input",
        "label": "Confirm async",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "condition",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "condition trigger",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "cancel",
        "type": "Event",
        "toType": "",
        "inputType": "OutputEmitterRef<Event>",
        "signal": "output",
        "label": "Cancelled click event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "confirm",
        "type": "Event",
        "toType": "",
        "inputType": "OutputEmitterRef<Event>",
        "signal": "output",
        "label": "Confirmed click event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XPopconfirmProperty",
    "extends": "XPropertyFunction(X_POPCONFIRM_CONFIG_NAME)"
  },
  "XPopoverPrefix": {
    "type": "const",
    "label": "Popover",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPopoverPrefix",
    "selector": "x-popover",
    "decorator": "directive",
    "value": "'x-popover'"
  },
  "XPopoverProperty": {
    "type": "class",
    "label": "Popover Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "title",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Title, support custom template",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "content",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Content, support custom templates",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "footer",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "At the bottom, support custom templates",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "panelClass",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "panel class",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "connectTo",
        "type": "ElementRef<HTMLElement> | HTMLElement",
        "toType": "ElementRef<HTMLElement> | HTMLElement",
        "inputType": "InputSignal<ElementRef<HTMLElement> | HTMLElement>",
        "signal": "input",
        "label": "specify reference object",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "placement",
        "type": "XPlacement",
        "toType": "XPlacement",
        "inputType": "InputSignal<XPlacement>",
        "signal": "input",
        "label": "Pop-up position",
        "default": "'top'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "trigger",
        "type": "XPopoverTrigger",
        "toType": "XPopoverTrigger",
        "inputType": "InputSignal<XPopoverTrigger>",
        "signal": "input",
        "label": "Activation method",
        "default": "'hover'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "width",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "width",
        "default": "''",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "maxWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Max width",
        "default": "'10rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "minWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Min width",
        "default": "'10rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "visible",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Show/hide control",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "condition",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "condition trigger",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "mouseEnterDelay",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "How much is the mouse transfer after transfer",
        "default": "150",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "mouseLeaveDelay",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "How much hidden is hidden after the mouse is removed",
        "default": "100",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      }
    ],
    "name": "XPopoverProperty",
    "extends": "XPropertyFunction(X_POPOVER_CONFIG_NAME)"
  },
  "XPopoverTrigger": {
    "type": "type",
    "label": "Activation method",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPopoverTrigger",
    "value": "'hover' | 'click' | 'focus'"
  },
  "XPopoverPortalPrefix": {
    "type": "const",
    "label": "Popover Portal",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPopoverPortalPrefix",
    "selector": "x-popover-portal",
    "decorator": "component",
    "value": "'x-popover-portal'"
  },
  "XProgressPrefix": {
    "type": "const",
    "label": "Progress",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XProgressPrefix",
    "selector": "x-progress",
    "decorator": "component",
    "value": "'x-progress'"
  },
  "XProgressProperty": {
    "type": "class",
    "label": "Progress Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "type",
        "type": "XProgressType",
        "toType": "XProgressType",
        "inputType": "InputSignal<XProgressType>",
        "signal": "input",
        "label": "Progress bar type",
        "default": "'line'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "percent",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Show progress 0-100",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "height",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Height of progress bar",
        "default": "'1rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "status",
        "type": "XProgressStatus",
        "toType": "XProgressStatus",
        "inputType": "InputSignal<XProgressStatus>",
        "signal": "input",
        "label": "Status",
        "default": "'normal'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "info",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether to display percentage text",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "infoWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "The width of the text information",
        "default": "'3.5rem'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "inside",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether the percentage text is displayed in the progress bar",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "format",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Custom percentage text content",
        "default": "percent: number",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "color",
        "type": "XProgressColor",
        "toType": "XProgressColor",
        "inputType": "InputSignal<XProgressColor>",
        "signal": "input",
        "label": "Custom color",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "gradient",
        "type": "XProgressGradient",
        "toType": "XProgressGradient",
        "inputType": "InputSignal<XProgressGradient>",
        "signal": "input",
        "label": "Gradient color",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "steps",
        "type": "XNumber",
        "toType": "number | null",
        "inputType": "InputSignalWithTransform<number | null, XNumber>",
        "signal": "input",
        "label": "Steps progress bar",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "stepWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Single step width",
        "default": "'2rem'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "stepFlex",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Single step width flex",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "thickness",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Ring thickness",
        "default": "'1rem'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "size",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Ring size",
        "default": "'8rem'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "notchAngle",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Dashboard notch angle",
        "default": "80",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "subsection",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Segmentation display color, only use of type = 'line'",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XProgressProperty",
    "extends": "XPropertyFunction(X_PROGRESS_CONFIG_NAME)"
  },
  "XProgressType": {
    "type": "type",
    "label": "Progress bar type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XProgressType",
    "value": "'line' | 'circle' | 'dashboard'"
  },
  "XProgressColor": {
    "type": "type",
    "label": "Progress bar color",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XProgressColor",
    "value": "string | XProgressColorNode[] | Function"
  },
  "XProgressColorNode": {
    "type": "interface",
    "label": "Progress bar node color",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "color",
        "type": "string",
        "label": "Color",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "color",
        "propType": "",
        "example": ""
      },
      {
        "name": "percent",
        "type": "number",
        "label": "Percent",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "percent",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XProgressColorNode"
  },
  "XProgressStatus": {
    "type": "type",
    "label": "Status",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XProgressStatus",
    "value": "'normal' | 'active' | 'success' | 'exception' | 'warning'"
  },
  "XRadioPrefix": {
    "type": "const",
    "label": "Radio",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XRadioPrefix",
    "selector": "x-radio",
    "decorator": "component",
    "value": "'x-radio'"
  },
  "XRadioProperty": {
    "type": "class",
    "label": "Radio Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XData<XRadioNode>",
        "toType": "XData<XRadioNode>",
        "inputType": "InputSignal<XData<XRadioNode>>",
        "signal": "input",
        "label": "Radio data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "button",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Button style",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "icon",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Icon style",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "tag",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Tag style",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "type",
        "type": "XButtonType",
        "toType": "XButtonType",
        "inputType": "InputSignal<XButtonType>",
        "signal": "input",
        "label": "Take effect when button style",
        "default": "'initial'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tagBordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Tag bordered",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "tagDark",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Tag dark theme",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "allowCancel",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Allow cancel checked",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "vertical",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Vertical layout, does not support button and icon styles",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XRadioProperty",
    "extends": "XFormControlFunction(X_RADIO_CONFIG_NAME)"
  },
  "XRadioNode": {
    "type": "interface",
    "label": "Radio data object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "disabled",
        "type": "boolean",
        "label": "Disabled",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "disabled",
        "propType": "",
        "example": ""
      },
      {
        "name": "icon",
        "type": "string",
        "label": "Icon",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "icon",
        "propType": "",
        "example": ""
      },
      {
        "name": "title",
        "type": "string",
        "label": "Icon message",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "title",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XRadioNode",
    "extends": "XIdentityProperty"
  },
  "XRatePrefix": {
    "type": "const",
    "label": "Rate",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XRatePrefix",
    "selector": "x-rate",
    "decorator": "component",
    "value": "'x-rate'"
  },
  "XRateProperty": {
    "type": "class",
    "label": "Rate Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "count",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Number of ratings",
        "default": "5",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "half",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Number of ratings",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "color",
        "type": "XRateColor",
        "toType": "XRateColor",
        "inputType": "InputSignal<XRateColor>",
        "signal": "input",
        "label": "Color",
        "default": "''",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "customTemp",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Custom template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XRateProperty",
    "extends": "XFormControlFunction(X_RATE_CONFIG_NAME)"
  },
  "XRateColor": {
    "type": "type",
    "label": "Color type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XRateColor",
    "value": "string | { [color: string]: (rate: number) => boolean }"
  },
  "XResultPrefix": {
    "type": "const",
    "label": "Result",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XResultPrefix",
    "selector": "x-result",
    "decorator": "component",
    "value": "'x-result'"
  },
  "XResultProperty": {
    "type": "class",
    "label": "Result Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "status",
        "type": "XResultStatus",
        "toType": "XResultStatus",
        "inputType": "InputSignal<XResultStatus>",
        "signal": "input",
        "label": "Status",
        "default": "'info'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "title",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Title, support template customization",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "icon",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Icon, support template customization",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "subTitle",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Subtitle, support template customization",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XResultProperty",
    "extends": "XProperty"
  },
  "XSelectPrefix": {
    "type": "const",
    "label": "Select",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSelectPrefix",
    "selector": "x-select",
    "decorator": "component",
    "value": "'x-select'"
  },
  "XSelectProperty": {
    "type": "class",
    "label": "Select Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XData<XSelectNode>",
        "toType": "XData<XSelectNode>",
        "inputType": "InputSignalWithTransform<XData<XSelectNode>, XData<XSelectNode>>",
        "signal": "input",
        "label": "Node data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToDataConvert"
      },
      {
        "name": "clearable",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Clear button",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "async",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Asynchronous loading",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "placement",
        "type": "XPlacement",
        "toType": "XPlacement",
        "inputType": "InputSignal<XPlacement>",
        "signal": "input",
        "label": "Display position",
        "default": "'bottom'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "multiple",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Multiple choice",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "selectAll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Multi choice to add full selection function",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "selectAllText",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Selected all text",
        "default": "''",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display Border",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "portalMaxHeight",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "The biggest height of the drop-down box",
        "default": "'12rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "portalWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "The width of the drop-down box",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "search",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input search",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "caseSensitive",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Case-sensitive",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "debounceTime",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Enter a delay execution time, ms",
        "default": "200",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "maxTagCount",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Display the number of data in the maximum election, and the others are displayed in more of them",
        "default": "显示所有",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "maxTagContent",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "The number displayed when multiple choices exceeds the specified number, the displayed text template displayed",
        "default": "'更多{{surplus}}个选中'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "virtualScroll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Turn on virtual scrolling",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XSelectProperty",
    "extends": "XFormControlFunction(X_SELECT_CONFIG_NAME)"
  },
  "XSelectNode": {
    "type": "interface",
    "label": "Select data object",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSelectNode",
    "extends": "XParentIdentityProperty<XSelectNode>"
  },
  "XSelectPortalPrefix": {
    "type": "const",
    "label": "Select Portal",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSelectPortalPrefix",
    "selector": "x-select-portal",
    "decorator": "component",
    "value": "'x-select-portal'"
  },
  "XSkeletonPrefix": {
    "type": "const",
    "label": "Skeleton",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSkeletonPrefix",
    "selector": "x-skeleton",
    "decorator": "component",
    "value": "'x-skeleton'"
  },
  "XSkeletonData": {
    "type": "const",
    "label": "Skeleton default data",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSkeletonData",
    "value": "[{ cols: [{ width: '10rem', type: 'title' }] },{ cols: [{}] },{ cols: [{}] },{ cols: [{ span: 16 }] }]"
  },
  "XSkeletonProperty": {
    "type": "class",
    "label": "Skeleton Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XSkeletonRow[]",
        "toType": "XSkeletonRow[]",
        "inputType": "InputSignal<XSkeletonRow[]>",
        "signal": "input",
        "label": "Skeleton data",
        "default": "XSkeletonData",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "loading",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Loading",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "active",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Activate animation",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "border",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show border",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XSkeletonProperty",
    "extends": "XProperty"
  },
  "XSkeletonRow": {
    "type": "interface",
    "label": "Row",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "cols",
        "type": "XSkeletonCol[]",
        "label": "Column",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "cols",
        "propType": "",
        "example": ""
      },
      {
        "name": "flex",
        "type": "boolean",
        "label": "flex layout",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "flex",
        "propType": "",
        "example": ""
      },
      {
        "name": "space",
        "type": "string",
        "label": "Column spacing",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "space",
        "propType": "",
        "example": ""
      },
      {
        "name": "margin",
        "type": "string",
        "label": "Margin",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "margin",
        "propType": "",
        "example": ""
      },
      {
        "name": "style",
        "type": "XStyle",
        "label": "Style",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "style",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XSkeletonRow"
  },
  "XSkeletonCol": {
    "type": "interface",
    "label": "Column",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "span",
        "type": "number",
        "label": "24 grid layout, column width",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "span",
        "propType": "",
        "example": ""
      },
      {
        "name": "width",
        "type": "string",
        "label": "Width",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "width",
        "propType": "",
        "example": ""
      },
      {
        "name": "height",
        "type": "string",
        "label": "Height",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "height",
        "propType": "",
        "example": ""
      },
      {
        "name": "type",
        "type": "XSkeletonType",
        "label": "Column type",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "type",
        "propType": "",
        "example": ""
      },
      {
        "name": "rows",
        "type": "XSkeletonRow[]",
        "label": "Rows",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "rows",
        "propType": "",
        "example": ""
      },
      {
        "name": "style",
        "type": "XStyle",
        "label": "Style",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "style",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XSkeletonCol"
  },
  "XSliderPrefix": {
    "type": "const",
    "label": "Slider",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSliderPrefix",
    "selector": "x-slider",
    "decorator": "component",
    "value": "'x-slider'"
  },
  "XSliderProperty": {
    "type": "class",
    "label": "Slider Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XDataArray<XSliderNode>",
        "toType": "XSliderNode[]",
        "inputType": "InputSignalWithTransform<XSliderNode[], XDataArray<XSliderNode>>",
        "signal": "input",
        "label": "Node data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToDataArray"
      },
      {
        "name": "animated",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Sliding animation",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "activatedIndex",
        "type": "number",
        "toType": "number",
        "inputType": "ModelSignal<number>",
        "signal": "model",
        "label": "Currently active index",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "trigger",
        "type": "XSliderTrigger",
        "toType": "XSliderTrigger",
        "inputType": "InputSignal<XSliderTrigger>",
        "signal": "input",
        "label": "Trigger mode",
        "default": "'click'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "layout",
        "type": "XSliderLayout",
        "toType": "XSliderLayout",
        "inputType": "InputSignal<XSliderLayout>",
        "signal": "input",
        "label": "Arrangement",
        "default": "'row'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "Alignment",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeJustify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "Node text alignment",
        "default": "'center'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node custom template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showExpand",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "When the node is not displayed, display all the buttons, and the arrangement is effective when the arrangement is row",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "autoShowArrow",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Nodes can't show the show about/of the up and down arrow",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "expandMaxHeight",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Expand the maximum height of all bomb frames",
        "default": "'15rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "showAnchor",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show anchor",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "indexChange",
        "type": "number",
        "toType": "",
        "inputType": "OutputEmitterRef<number>",
        "signal": "output",
        "label": "Activate node change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeChange",
        "type": "XSliderNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XSliderNode>",
        "signal": "output",
        "label": "Activate node change event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XSliderProperty",
    "extends": "XPropertyFunction(X_SLIDER_CONFIG_NAME)"
  },
  "XSliderNode": {
    "type": "interface",
    "label": "Slider data object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "label",
        "type": "XTemplate",
        "label": "Title, support template",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "label",
        "propType": "",
        "example": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "label": "Node disabled",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "disabled",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XSliderNode",
    "extends": "XIdentityProperty"
  },
  "XSliderTrigger": {
    "type": "type",
    "label": "Trigger method",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSliderTrigger",
    "value": "XTrigger"
  },
  "XSliderSelectPrefix": {
    "type": "const",
    "label": "SliderSelect",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSliderSelectPrefix",
    "selector": "x-slider-select",
    "decorator": "component",
    "value": "'x-slider-select'"
  },
  "XSliderSelectProperty": {
    "type": "class",
    "label": "SliderSelect Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "min",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Minimum",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "max",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Max",
        "default": "100",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "step",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Step count",
        "default": "1",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "precision",
        "type": "XNumber",
        "toType": "number | undefined",
        "inputType": "InputSignalWithTransform<number | undefined, XNumber>",
        "signal": "input",
        "label": "Precision, calculated based on the number of steps by default",
        "default": "undefined",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "showTooltip",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display Tooltip prompts",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "reverse",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Reverse",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "vertical",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Vertical",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "range",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Range",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "customButton",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Custom button",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "marks",
        "type": "XSliderSelectMark[]",
        "toType": "XSliderSelectMark[]",
        "inputType": "InputSignal<XSliderSelectMark[]>",
        "signal": "input",
        "label": "Scale marking, key is the actual number, in [min, max], you can set style through style",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tooltipCustom",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Custom tooltip",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "dragStartEmit",
        "type": "CdkDragStart",
        "toType": "",
        "inputType": "OutputEmitterRef<CdkDragStart>",
        "signal": "output",
        "label": "Start drag event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "dragMoveEmit",
        "type": "CdkDragMove",
        "toType": "",
        "inputType": "OutputEmitterRef<CdkDragMove>",
        "signal": "output",
        "label": "Hold down the moving event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "dragEndEmit",
        "type": "CdkDragEnd",
        "toType": "",
        "inputType": "OutputEmitterRef<CdkDragEnd>",
        "signal": "output",
        "label": "Mobile end event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XSliderSelectProperty",
    "extends": "XFormControlFunction(X_SLIDER_SELECT_CONFIG_NAME)"
  },
  "XSliderSelectMark": {
    "type": "interface",
    "label": "Scale marking",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "value",
        "type": "number",
        "label": "Value",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "value",
        "propType": "",
        "example": ""
      },
      {
        "name": "label",
        "type": "string",
        "label": "Label",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "label",
        "propType": "",
        "example": ""
      },
      {
        "name": "style",
        "type": "{ [style: string]: any }",
        "label": "style",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "style",
        "propType": "",
        "example": ""
      },
      {
        "name": "offset",
        "type": "number",
        "label": "Offset. automatic calculation",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "offset",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XSliderSelectMark"
  },
  "XStatisticPrefix": {
    "type": "const",
    "label": "Statistic",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XStatisticPrefix",
    "selector": "x-statistic",
    "decorator": "component",
    "value": "'x-statistic'"
  },
  "XStatisticProperty": {
    "type": "class",
    "label": "Statistic Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "value",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Display value",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "label",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Title",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "prefix",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Prefix",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "suffix",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Suffix",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "valueStyle",
        "type": "XStyle",
        "toType": "XStyle",
        "inputType": "InputSignal<XStyle>",
        "signal": "input",
        "label": "Display value style",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XStatisticProperty"
  },
  "XCountdownPrefix": {
    "type": "const",
    "label": "Countdown",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XCountdownPrefix",
    "selector": "x-countdown",
    "decorator": "component",
    "value": "'x-countdown'"
  },
  "XCountdownProperty": {
    "type": "class",
    "label": "Countdown Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "value",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Display value",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "label",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Title",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "prefix",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Prefix",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "suffix",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Suffix",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "valueStyle",
        "type": "XStyle",
        "toType": "XStyle",
        "inputType": "InputSignal<XStyle>",
        "signal": "input",
        "label": "Display value style",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "format",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Format",
        "default": "'HH:mm:ss'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "finish",
        "type": "void",
        "toType": "",
        "inputType": "OutputEmitterRef<void>",
        "signal": "output",
        "label": "Event at the end of the countdown",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XCountdownProperty",
    "extends": "XPropertyFunction(X_COUNTDOWN_CONFIG_NAME)"
  },
  "XStepsPrefix": {
    "type": "const",
    "label": "Steps",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XStepsPrefix",
    "selector": "x-steps",
    "decorator": "component",
    "value": "'x-steps'"
  },
  "XStepsProperty": {
    "type": "class",
    "label": "Steps Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XDataArray<XStepsNode>",
        "toType": "XStepsNode[]",
        "inputType": "InputSignalWithTransform<XStepsNode[], XDataArray<XStepsNode>>",
        "signal": "input",
        "label": "Node data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToDataArray"
      },
      {
        "name": "layout",
        "type": "XStepsLayout",
        "toType": "XStepsLayout",
        "inputType": "InputSignal<XStepsLayout>",
        "signal": "input",
        "label": "Layout",
        "default": "'row'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "activatedIndex",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Currently active node",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "startIndex",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Step start number",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "status",
        "type": "XStepsStatus",
        "toType": "XStepsStatus",
        "inputType": "InputSignal<XStepsStatus>",
        "signal": "input",
        "label": "Current active node status",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "customTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Custom node",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeStatus",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "the status set by the node takes precedence, and the current node will not be calculated, `activatedIndex` and `status` will be invalidated",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XStepsProperty",
    "extends": "XProperty"
  },
  "XStepsLayout": {
    "type": "type",
    "label": "Layout",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XStepsLayout",
    "value": "'row' | 'column'"
  },
  "XSwitchPrefix": {
    "type": "const",
    "label": "Switch",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XSwitchPrefix",
    "selector": "x-switch",
    "decorator": "component",
    "value": "'x-switch'"
  },
  "XSwitchProperty": {
    "type": "class",
    "label": "Switch Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "loading",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show loading",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "manual",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Manual control",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "checkedText",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Display text or custom template (open state)",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "unCheckedText",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Display text or custom template (closed)",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XSwitchProperty",
    "extends": "XFormControlFunction(X_SWITCH_CONFIG_NAME)"
  },
  "XTablePrefix": {
    "type": "const",
    "label": "Table",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTablePrefix",
    "selector": "x-table",
    "decorator": "component",
    "value": "'x-table'"
  },
  "XTableProperty": {
    "type": "class",
    "label": "Table Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XData<XTableRow>",
        "toType": "XData<XTableRow>",
        "inputType": "InputSignalWithTransform<XData<XTableRow>, XData<XTableRow>>",
        "signal": "input",
        "label": "Row data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToDataConvert"
      },
      {
        "name": "columns",
        "type": "XTableColumn[]",
        "toType": "XTableColumn[]",
        "inputType": "InputSignal<XTableColumn[]>",
        "signal": "input",
        "label": "Column set",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rowHeight",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Header and row height, unit px",
        "default": "42",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "loading",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether to enable loading",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether to show column borders",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "showHeader",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether to display the column headers",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "headerPosition",
        "type": "XTableHeaderPosition",
        "toType": "XTableHeaderPosition",
        "inputType": "InputSignal<XTableHeaderPosition>",
        "signal": "input",
        "label": "Whether to display the column headers",
        "default": "'top'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "activatedRow",
        "type": "XTableRow",
        "toType": "XTableRow",
        "inputType": "ModelSignal<XTableRow>",
        "signal": "model",
        "label": "Currently selected row data",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "headColumnTpl",
        "type": "XTableTemplate",
        "toType": "XTableTemplate",
        "inputType": "InputSignal<XTableTemplate>",
        "signal": "input",
        "label": "Column header custom template",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "bodyColumnTpl",
        "type": "XTableTemplate",
        "toType": "XTableTemplate",
        "inputType": "InputSignal<XTableTemplate>",
        "signal": "input",
        "label": "Column content custom template",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "bodyTdTpl",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Custom template of cells",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rowClass",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Row condition class",
        "default": "row: XTableRow",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "umbe"
      },
      {
        "name": "headSearchTpl",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Line head search custom template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "sortChange",
        "type": "XSort[]",
        "toType": "",
        "inputType": "OutputEmitterRef<XSort[]>",
        "signal": "output",
        "label": "Sort click events",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "headCheckboxChange",
        "type": "XTableHeadCheckbox",
        "toType": "",
        "inputType": "OutputEmitterRef<XTableHeadCheckbox>",
        "signal": "output",
        "label": "head checkbox event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "bodyCheckboxChange",
        "type": "XTableRow",
        "toType": "",
        "inputType": "OutputEmitterRef<XTableRow>",
        "signal": "output",
        "label": "head checkbox event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "allowSelectRow",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Allow row click to select",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "allowCheckRow",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Allow lines to click checkbox",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "virtualScroll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Turn on virtual scrolling",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "bodyHeight",
        "type": "XNumber",
        "toType": "number | undefined",
        "inputType": "InputSignalWithTransform<number | undefined, XNumber>",
        "signal": "input",
        "label": "body data height",
        "default": "undefined",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "itemSize",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "itemSize，corresponding to the parameters in cdk scroll",
        "default": "42",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "minBufferPx",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Exceed the minimum value of the visible window buffer, corresponding to the parameters in cdk scroll",
        "default": "100",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "maxBufferPx",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Render the pixels of the new data buffer, corresponding to the parameters in cdk scroll",
        "default": "200",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "adaptionHeight",
        "type": "XNumber",
        "toType": "number | undefined",
        "inputType": "InputSignalWithTransform<number | undefined, XNumber>",
        "signal": "input",
        "label": "Adaptive height, table height is equal to the screen height minus the value set here",
        "default": "undefined",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "docPercent",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Document height percentage, used by pop-up window percentage height",
        "default": "1",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "checkedRow",
        "type": "{ [property: string]: any[] }",
        "toType": "{ [property: string]: any[] }",
        "inputType": "InputSignal<{ [property: string]: any[] }>",
        "signal": "input",
        "label": "Checkbox column initially selected data, checkbox is activated in column",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "manual",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "If data is a function type, you can use this parameter to control the request, which is often used in the form in the pop-up box, and then request it after it pops up",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "scroll",
        "type": "{ x: number; y: number }",
        "toType": "{ x: number; y: number }",
        "inputType": "InputSignal<{ x: number; y: number }>",
        "signal": "input",
        "label": "Height and width of rolling area",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "header",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Table header",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "footer",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Table footer",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "cellConfig",
        "type": "XTableCellConfig",
        "toType": "XTableCellConfig",
        "inputType": "InputSignal<XTableCellConfig>",
        "signal": "input",
        "label": "Cell config",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rowSize",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "paginationPosition",
        "type": "XPaginationPosition",
        "toType": "XPaginationPosition",
        "inputType": "InputSignal<XPaginationPosition>",
        "signal": "input",
        "label": "Pagination position",
        "default": "'bottom-left'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "hiddenWrapBorder",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Hidden table wrap border",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "hiddenPaginationBorder",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Hidden pagination button border",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "showPagination",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Pagination position",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "treeTable",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Tree table",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "expandedAll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Tree table",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "expandedLevel",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Default expanded level",
        "default": "-1",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "expanded",
        "type": "any[]",
        "toType": "any[]",
        "inputType": "InputSignal<any[]>",
        "signal": "input",
        "label": "Expanded node",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "expandTpl",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Customized expansion content",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showEmpty",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display a prompt with empty data",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "emptyImg",
        "type": "XTemplate | undefined",
        "toType": "XTemplate | undefined",
        "inputType": "InputSignal<XTemplate | undefined>",
        "signal": "input",
        "label": "Picture address or custom template",
        "default": "undefined",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "emptyContent",
        "type": "XTemplate | undefined",
        "toType": "XTemplate | undefined",
        "inputType": "InputSignal<XTemplate | undefined>",
        "signal": "input",
        "label": "Content or custom template",
        "default": "undefined",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "index",
        "type": "number",
        "toType": "number",
        "inputType": "ModelSignal<number>",
        "signal": "model",
        "label": "Current page number",
        "default": "1",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "size",
        "type": "number",
        "toType": "number",
        "inputType": "ModelSignal<number>",
        "signal": "model",
        "label": "Number of items displayed per page",
        "default": "10",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "total",
        "type": "number",
        "toType": "number",
        "inputType": "ModelSignal<number>",
        "signal": "model",
        "label": "Total",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "query",
        "type": "XQuery",
        "toType": "XQuery",
        "inputType": "ModelSignal<XQuery>",
        "signal": "model",
        "label": "Query conditions",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "pageLinkSize",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "The largest number of pages display",
        "default": "5",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "showEllipsis",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display the first and last page",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "showTotal",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display the total",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "space",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Button spacing",
        "default": "'0.25rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "showBackground",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show background",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "showSize",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show size",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "sizeWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "size with select",
        "default": "'6.875rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "showInputSize",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display the number of input page breaks (cannot exist with the drop-down options of page breaks)",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "inputSizeWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "size with input",
        "default": "'3.125rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "sizeData",
        "type": "XDataArray<XSelectNode>",
        "toType": "XDataArray<XSelectNode>",
        "inputType": "InputSignal<XDataArray<XSelectNode>>",
        "signal": "input",
        "label": "Paging choose items of data",
        "default": "XPaginationSizeData",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "showJump",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show size",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "jumpWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "size with",
        "default": "'3.125rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "totalTpl",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Total template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "simple",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Simple",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "simpleIndexWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Simple index with",
        "default": "'8.125rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "columnDragStarted",
        "type": "XTableColumn",
        "toType": "",
        "inputType": "OutputEmitterRef<XTableColumn>",
        "signal": "output",
        "label": "Column Header Drag End Event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "columnDragEnded",
        "type": "XTableColumn",
        "toType": "",
        "inputType": "OutputEmitterRef<XTableColumn>",
        "signal": "output",
        "label": "The column header is dragging, and the event is triggered when the order is changed",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "columnDropListDropped",
        "type": "XTableColumn[]",
        "toType": "",
        "inputType": "OutputEmitterRef<XTableColumn[]>",
        "signal": "output",
        "label": "The column header is dragging, and the event is triggered when the order is changed",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "columnDragWidthStarted",
        "type": "XTableDragWidthEvent",
        "toType": "",
        "inputType": "OutputEmitterRef<XTableDragWidthEvent>",
        "signal": "output",
        "label": "Event to started drag column width",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "columnDragWidthMoved",
        "type": "XTableDragWidthEvent",
        "toType": "",
        "inputType": "OutputEmitterRef<XTableDragWidthEvent>",
        "signal": "output",
        "label": "Event to moved drag column width",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "columnDragWidthEnded",
        "type": "XTableDragWidthEvent",
        "toType": "",
        "inputType": "OutputEmitterRef<XTableDragWidthEvent>",
        "signal": "output",
        "label": "Event to ended drag column width",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XTableProperty",
    "extends": "XPropertyFunction(X_TABLE_CONFIG_NAME)"
  },
  "XTableRow": {
    "type": "interface",
    "label": "Row data",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "expanded",
        "type": "boolean",
        "label": "Unfold",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "expanded",
        "propType": "",
        "example": ""
      },
      {
        "name": "[property: string]",
        "type": "any",
        "label": "Custom attributes",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "[property: string]",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTableRow",
    "extends": "XParentIdentityProperty<XTableRow>"
  },
  "XTableColumn": {
    "type": "interface",
    "label": "Column parameter",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "type",
        "type": "XColumnType",
        "label": "Types of",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "type",
        "propType": "",
        "example": ""
      },
      {
        "name": "width",
        "type": "number",
        "label": "Width",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "width",
        "propType": "",
        "example": ""
      },
      {
        "name": "flex",
        "type": "number",
        "label": "Flex layout width",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "flex",
        "propType": "",
        "example": ""
      },
      {
        "name": "search",
        "type": "boolean",
        "label": "Query field",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "search",
        "propType": "",
        "example": ""
      },
      {
        "name": "sort",
        "type": "boolean",
        "label": "Sort field",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "sort",
        "propType": "",
        "example": ""
      },
      {
        "name": "left",
        "type": "number",
        "label": "Fixed column, distance from left",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "left",
        "propType": "",
        "example": ""
      },
      {
        "name": "right",
        "type": "number",
        "label": "Fixed column, distance from right",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "right",
        "propType": "",
        "example": ""
      },
      {
        "name": "action",
        "type": "boolean",
        "label": "Operation button",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "action",
        "propType": "",
        "example": ""
      },
      {
        "name": "rowChecked",
        "type": "boolean",
        "label": "Bind row click selection event when type is checkbox",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "rowChecked",
        "propType": "",
        "example": ""
      },
      {
        "name": "rowExpand",
        "type": "boolean",
        "label": "Bind row click selection event when type is expand",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "rowExpand",
        "propType": "",
        "example": ""
      },
      {
        "name": "textAlign",
        "type": "XTextAlign",
        "label": "Text alignment",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "textAlign",
        "propType": "",
        "example": ""
      },
      {
        "name": "dragWidth",
        "type": "boolean",
        "label": "Drag the column width, you need to set the initial width of the column width",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "dragWidth",
        "propType": "",
        "example": ""
      },
      {
        "name": "draggingWidth",
        "type": "boolean",
        "label": "Dragging width",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "draggingWidth",
        "propType": "",
        "example": ""
      },
      {
        "name": "dragWidthStarted",
        "type": "(event: XTableDragWidthEvent) => void",
        "label": "Event to started drag column width",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "dragWidthStarted",
        "propType": "",
        "example": ""
      },
      {
        "name": "dragWidthMoved",
        "type": "(event: XTableDragWidthEvent) => void",
        "label": "Event to moved drag column width",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "dragWidthMoved",
        "propType": "",
        "example": ""
      },
      {
        "name": "dragWidthEnded",
        "type": "(event: XTableDragWidthEvent) => void",
        "label": "Event to ended drag column width",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "dragWidthEnded",
        "propType": "",
        "example": ""
      },
      {
        "name": "dragColumn",
        "type": "boolean",
        "label": "Drag the column",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "dragColumn",
        "propType": "",
        "example": ""
      },
      {
        "name": "dragging",
        "type": "boolean",
        "label": "Dragging column",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "dragging",
        "propType": "",
        "example": ""
      },
      {
        "name": "headChecked",
        "type": "boolean",
        "label": "Head shows checkbox",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "headChecked",
        "propType": "",
        "example": ""
      },
      {
        "name": "headExpand",
        "type": "boolean",
        "label": "Head shows expand",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "headExpand",
        "propType": "",
        "example": ""
      },
      {
        "name": "[property: string]",
        "type": "any",
        "label": "Custom attributes",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "[property: string]",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTableColumn",
    "extends": "XIdentityProperty"
  },
  "XTableDragWidthEvent": {
    "type": "interface",
    "label": "Column header width drag event",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "column",
        "type": "XTableColumn",
        "label": "Dragged column",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "column",
        "propType": "",
        "example": ""
      },
      {
        "name": "position",
        "type": "{ x: number y: number };",
        "label": "The column position refers to the offset position when dragging",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "position",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTableDragWidthEvent"
  },
  "XTableHeadCheckbox": {
    "type": "interface",
    "label": "Column header checkbox event data",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "rows",
        "type": "XTableRow[]",
        "label": "Row data",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "rows",
        "propType": "",
        "example": ""
      },
      {
        "name": "checkbox",
        "type": "{ [property: string]: boolean }",
        "label": "Checkbox data",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "checkbox",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTableHeadCheckbox"
  },
  "XTableCellConfig": {
    "type": "interface",
    "label": "Cell config",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "thead",
        "type": "XTableCellConfigRule",
        "label": "Column cell config",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "thead",
        "propType": "",
        "example": ""
      },
      {
        "name": "tbody",
        "type": "XTableCellConfigRule",
        "label": "Row config",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "tbody",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTableCellConfig"
  },
  "XTableCellConfigRule": {
    "type": "interface",
    "label": "Cell config rules",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "gridTemplateColumns",
        "type": "string",
        "label": "Define column width under grid layout",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "gridTemplateColumns",
        "propType": "",
        "example": ""
      },
      {
        "name": "cells",
        "type": "XTableCell[]",
        "label": "Cell merge rules",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "cells",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTableCellConfigRule"
  },
  "XTableCell": {
    "type": "interface",
    "label": "Cell merge rules",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "gridArea",
        "type": "string",
        "label": "Use grid layout to merge cells",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "gridArea",
        "propType": "",
        "example": ""
      },
      {
        "name": "label",
        "type": "string",
        "label": "Name",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "label",
        "propType": "",
        "example": ""
      },
      {
        "name": "width",
        "type": "number",
        "label": "Width",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "width",
        "propType": "",
        "example": ""
      },
      {
        "name": "left",
        "type": "number",
        "label": "Fixed column, distance from left",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "left",
        "propType": "",
        "example": ""
      },
      {
        "name": "right",
        "type": "number",
        "label": "Fixed column, distance from right",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "right",
        "propType": "",
        "example": ""
      },
      {
        "name": "id",
        "type": "string",
        "label": "The id of the corresponding column",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "id",
        "propType": "",
        "example": ""
      },
      {
        "name": "dragWidth",
        "type": "boolean",
        "label": "Drag the column width",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "dragWidth",
        "propType": "",
        "example": ""
      },
      {
        "name": "[property: string]",
        "type": "any",
        "label": "Custom attributes",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "[property: string]",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTableCell"
  },
  "XColumnType": {
    "type": "type",
    "label": "Column type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XColumnType",
    "value": "'label' | 'index' | 'checkbox' | 'expand'"
  },
  "XTableHeaderPosition": {
    "type": "type",
    "label": "Line head display position",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTableHeaderPosition",
    "value": "'top' | 'bottom' | 'top-bottom'"
  },
  "XPaginationPosition": {
    "type": "type",
    "label": "Paging position",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XPaginationPosition",
    "value": "XPaginationPosition =| 'top-left'| 'top-center'| 'top-right'| 'bottom-left'| 'bottom-center'| 'bottom-right';"
  },
  "XTableTemplate": {
    "type": "type",
    "label": "Template",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTableTemplate",
    "value": "{ [property: string]: TemplateRef<any> }"
  },
  "XTableHeadPrefix": {
    "type": "const",
    "label": "Table Head",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTableHeadPrefix",
    "selector": "x-table-head",
    "decorator": "component",
    "value": "'x-table-head'"
  },
  "XTableHeadProperty": {
    "type": "class",
    "label": "Table Head Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "columns",
        "type": "XTableColumn[]",
        "toType": "XTableColumn[]",
        "inputType": "InputSignal<XTableColumn[]>",
        "signal": "input",
        "label": "Column set",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rowHeight",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Height in px",
        "default": "42",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "columnTpl",
        "type": "XTableTemplate",
        "toType": "XTableTemplate",
        "inputType": "InputSignal<XTableTemplate>",
        "signal": "input",
        "label": "Custom template",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "scrollYWidth",
        "type": "XNumber",
        "toType": "number | null",
        "inputType": "InputSignalWithTransform<number | null, XNumber>",
        "signal": "input",
        "label": "Vertical scroll bar width",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "scrollXWidth",
        "type": "XNumber",
        "toType": "number | null",
        "inputType": "InputSignalWithTransform<number | null, XNumber>",
        "signal": "input",
        "label": "Horizontal scroll bar width",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "cellConfig",
        "type": "XTableCellConfigRule",
        "toType": "XTableCellConfigRule",
        "inputType": "InputSignal<XTableCellConfigRule>",
        "signal": "input",
        "label": "Cell merge rules",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "position",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Display position",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XTableHeadProperty",
    "extends": "XProperty"
  },
  "XTableBodyPrefix": {
    "type": "const",
    "label": "Table Body",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTableBodyPrefix",
    "selector": "x-table-body",
    "decorator": "component",
    "value": "'x-table-body'"
  },
  "XTableBodyProperty": {
    "type": "class",
    "label": "Table Body Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XTableRow[]",
        "toType": "XTableRow[]",
        "inputType": "InputSignal<XTableRow[]>",
        "signal": "input",
        "label": "Row data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "columns",
        "type": "XTableColumn[]",
        "toType": "XTableColumn[]",
        "inputType": "InputSignal<XTableColumn[]>",
        "signal": "input",
        "label": "Column set",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "columnTpl",
        "type": "XTableTemplate",
        "toType": "XTableTemplate",
        "inputType": "InputSignal<XTableTemplate>",
        "signal": "input",
        "label": "Custom template",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "activatedRow",
        "type": "XTableRow",
        "toType": "XTableRow",
        "inputType": "ModelSignal<XTableRow>",
        "signal": "model",
        "label": "Currently selected row data",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rowHeight",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Height in px. set to 0 means that the row height is adaptive to the content height",
        "default": "42",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "bodyHeight",
        "type": "XNumber",
        "toType": "number | null",
        "inputType": "InputSignalWithTransform<number | null, XNumber>",
        "signal": "input",
        "label": "body data height",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "allowSelectRow",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Allow row click to select",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "virtualScroll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Turn on virtual scrolling",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "itemSize",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "itemSize，corresponding to the parameters in cdk scroll",
        "default": "42",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "minBufferPx",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Exceed the minimum value of the visible window buffer, corresponding to the parameters in cdk scroll",
        "default": "100",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "maxBufferPx",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Render the pixels of the new data buffer, corresponding to the parameters in cdk scroll",
        "default": "200",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "adaptionHeight",
        "type": "XNumber",
        "toType": "number | null",
        "inputType": "InputSignalWithTransform<number | null, XNumber>",
        "signal": "input",
        "label": "Adaptive height, table height is equal to the screen height minus the value set here",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "docPercent",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Document height percentage, used by pop-up window percentage height",
        "default": "1",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "scroll",
        "type": "{ x: number; y: number }",
        "toType": "{ x: number; y: number }",
        "inputType": "InputSignal<{ x: number; y: number }>",
        "signal": "input",
        "label": "Height and width of rolling area",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "cellConfig",
        "type": "XTableCellConfigRule",
        "toType": "XTableCellConfigRule",
        "inputType": "InputSignal<XTableCellConfigRule>",
        "signal": "input",
        "label": "Cell config rules",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rowClass",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Row condition class",
        "default": "row: XTableRow",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "umbe"
      },
      {
        "name": "level",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "The level under the tree table",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "expandedAll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Tree table",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "expandTpl",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Customized expansion content",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XTableBodyProperty",
    "extends": "XProperty"
  },
  "XTableFootPrefix": {
    "type": "const",
    "label": "Table Foot",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTableFootPrefix",
    "selector": "x-table-foot",
    "decorator": "component",
    "value": "'x-table-foot'"
  },
  "XTableFootProperty": {
    "type": "class",
    "label": "Table Foot Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "footer",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Table footer",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "rowHeight",
        "type": "XNumber",
        "toType": "number | null",
        "inputType": "InputSignalWithTransform<number | null, XNumber>",
        "signal": "input",
        "label": "Header and row height, unit px",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      }
    ],
    "name": "XTableFootProperty",
    "extends": "XProperty"
  },
  "XTabsPrefix": {
    "type": "const",
    "label": "Tabs",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTabsPrefix",
    "selector": "x-tabs",
    "decorator": "component",
    "value": "'x-tabs'"
  },
  "XTabsProperty": {
    "type": "class",
    "label": "Tabs Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XDataArray<XTabsNode>",
        "toType": "XTabsNode[]",
        "inputType": "InputSignalWithTransform<XTabsNode[], XDataArray<XTabsNode>>",
        "signal": "input",
        "label": "Data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToDataArray"
      },
      {
        "name": "justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "Alignment",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "type",
        "type": "XTabsType",
        "toType": "XTabsType",
        "inputType": "InputSignal<XTabsType>",
        "signal": "input",
        "label": "Style",
        "default": "'block'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "layout",
        "type": "XTabsLayout",
        "toType": "XTabsLayout",
        "inputType": "InputSignal<XTabsLayout>",
        "signal": "input",
        "label": "Layout",
        "default": "'top'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "trigger",
        "type": "XTabsTrigger",
        "toType": "XTabsTrigger",
        "inputType": "InputSignal<XTabsTrigger>",
        "signal": "input",
        "label": "Trigger mode",
        "default": "'click'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "activatedIndex",
        "type": "number",
        "toType": "number",
        "inputType": "ModelSignal<number>",
        "signal": "model",
        "label": "Activation number",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "animated",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Animation",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "nodeTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeJustify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "Node arrangement",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "sliderHidden",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Hide the label bar, there is only one tab, the default hidden",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "actionTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Custom template on the label bar",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showExpand",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "When the node is not displayed, display all the buttons, and the arrangement is effective when the arrangement is row",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "expandMaxHeight",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Expand the maximum height of all bomb frames",
        "default": "'15rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "linkRouter",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Link angular router",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "linkExact",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Determine the linked route in strict matching mode",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "indexChange",
        "type": "XActivatedTab",
        "toType": "",
        "inputType": "OutputEmitterRef<XActivatedTab>",
        "signal": "output",
        "label": "Label switching event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XTabsProperty",
    "extends": "XPropertyFunction(X_TABS_CONFIG_NAME)"
  },
  "XTabsNode": {
    "type": "interface",
    "label": "Tabs data object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "disabled",
        "type": "boolean",
        "label": "Node disabled",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "disabled",
        "propType": "",
        "example": ""
      },
      {
        "name": "[property: string]",
        "type": "any",
        "label": "Custom properties",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "[property: string]",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTabsNode",
    "extends": "XIdentityProperty"
  },
  "XTabsTrigger": {
    "type": "type",
    "label": "Trigger method",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTabsTrigger",
    "value": "XTrigger"
  },
  "XActivatedTab": {
    "type": "interface",
    "label": "Active tab",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XActivatedTab"
  },
  "XTabsType": {
    "type": "type",
    "label": "Style type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTabsType",
    "value": "'block' | 'tag' | 'card'"
  },
  "XTabsLayout": {
    "type": "type",
    "label": "Layout",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTabsLayout",
    "value": "'top' | 'right' | 'bottom' | 'left'"
  },
  "XTabPrefix": {
    "type": "const",
    "label": "Tab",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTabPrefix",
    "selector": "x-tab",
    "decorator": "component",
    "value": "'x-tab'"
  },
  "XTabProperty": {
    "type": "class",
    "label": "Tab Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "label",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Label name, support custom template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabeld",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XTabProperty"
  },
  "XTagPrefix": {
    "type": "const",
    "label": "Tag",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTagPrefix",
    "selector": "x-tag",
    "decorator": "component",
    "value": "'x-tag'"
  },
  "XTagProperty": {
    "type": "class",
    "label": "Tag Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "type",
        "type": "XType",
        "toType": "XType",
        "inputType": "InputSignal<XType>",
        "signal": "input",
        "label": "Label style type",
        "default": "'initial'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display Border",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "closable",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show close button",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "dark",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Dark theme",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "checked",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "checked",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "manual",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Manual control",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "selected",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Selected",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "style",
        "type": "{ [cssStyle: string]: any }",
        "toType": "{ [cssStyle: string]: any }",
        "inputType": "InputSignal<{ [cssStyle: string]: any }>",
        "signal": "input",
        "label": "Style",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "close",
        "type": "Event",
        "toType": "",
        "inputType": "OutputEmitterRef<Event>",
        "signal": "output",
        "label": "Click to close the event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XTagProperty",
    "extends": "XPropertyFunction(X_TAG_CONFIG_NAME)"
  },
  "XTextRetractPrefix": {
    "type": "const",
    "label": "TextRetract",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTextRetractPrefix",
    "selector": "x-text-retract",
    "decorator": "component",
    "value": "'x-text-retract'"
  },
  "XTextRetractProperty": {
    "type": "class",
    "label": "TextRetract Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "content",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "text",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "max",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Default maximum number of characters displayed",
        "default": "256",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      }
    ],
    "name": "XTextRetractProperty",
    "extends": "XPropertyFunction(X_TEXT_RETRACT_CONFIG_NAME)"
  },
  "XTextareaPrefix": {
    "type": "const",
    "label": "Textarea",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTextareaPrefix",
    "selector": "x-textarea",
    "decorator": "component",
    "value": "'x-textarea'"
  },
  "XTextareaProperty": {
    "type": "class",
    "label": "Textarea Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "clearable",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Clear button",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "icon",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Icon",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "iconLayout",
        "type": "XTextareaIconLayoutType",
        "toType": "XTextareaIconLayoutType",
        "inputType": "InputSignal<XTextareaIconLayoutType>",
        "signal": "input",
        "label": "Icon layout",
        "default": "'right'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "iconSpin",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Icon animation",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "maxlength",
        "type": "XNumber",
        "toType": "number | null",
        "inputType": "InputSignalWithTransform<number | null, XNumber>",
        "signal": "input",
        "label": "Enter the maximum length",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "height",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "height",
        "default": "'6rem'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "clearEmit",
        "type": "any",
        "toType": "",
        "inputType": "OutputEmitterRef<any>",
        "signal": "output",
        "label": "Clear button event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XTextareaProperty",
    "extends": "XFormControlFunction(X_TEXTAREA_CONFIG_NAME)"
  },
  "XThemePrefix": {
    "type": "const",
    "label": "Theme",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XThemePrefix",
    "selector": "x-theme",
    "decorator": "component",
    "value": "'x-theme'"
  },
  "XThemeAmounts": {
    "type": "const",
    "label": "Proportion of mixed colors",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XThemeAmounts",
    "value": "[-0.1, -0.2, -0.3, -0.4, -0.5, -0.6, -0.7, -0.8, -0.9, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]"
  },
  "XThemeProperty": {
    "type": "class",
    "label": "Theme Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "prefix",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Parameter prefix",
        "default": "'--x-'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "amounts",
        "type": "number[]",
        "toType": "number[]",
        "inputType": "InputSignal<number[]>",
        "signal": "input",
        "label": "Proportion of mixed colors",
        "default": "XThemeAmounts",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showDark",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show dark mode settings",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "showDetail",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Detailed settings",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "dark",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "model",
        "label": "Dark mode",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "defaultClick",
        "type": "XColorsTheme",
        "toType": "",
        "inputType": "OutputEmitterRef<XColorsTheme>",
        "signal": "output",
        "label": "Initialize default value event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XThemeProperty",
    "extends": "XFormControlFunction(X_THEME_CONFIG_NAME)"
  },
  "XTimeAgoPrefix": {
    "type": "const",
    "label": "TimeAgo",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTimeAgoPrefix",
    "selector": "xTimeAgo",
    "decorator": "pipe",
    "value": "'xTimeAgo'"
  },
  "XTimePickerPrefix": {
    "type": "const",
    "label": "TimePicker",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTimePickerPrefix",
    "selector": "x-time-picker",
    "decorator": "component",
    "value": "'x-time-picker'"
  },
  "XTimePickerProperty": {
    "type": "class",
    "label": "TimePicker Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "type",
        "type": "XTimePickerType",
        "toType": "XTimePickerType",
        "inputType": "InputSignal<XTimePickerType>",
        "signal": "input",
        "label": "Time type",
        "default": "'time'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "format",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Format",
        "default": "'HH:mm:ss'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "placement",
        "type": "XCorner",
        "toType": "XCorner",
        "inputType": "InputSignal<XCorner>",
        "signal": "input",
        "label": "Display position",
        "default": "'bottom-start'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "use12Hours",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Use 12 hour clock",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display Border",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "hourStep",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Hour option interval",
        "default": "1",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "minuteStep",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Minute option interval",
        "default": "1",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "secondStep",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Second option interval",
        "default": "1",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "preset",
        "type": "XData<XTimePickerPreset>",
        "toType": "XData<XTimePickerPreset>",
        "inputType": "InputSignal<XData<XTimePickerPreset>>",
        "signal": "input",
        "label": "Quick selection button, support now and custom",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "disabledTime",
        "type": "XTimePickerDisabledTime",
        "toType": "XTimePickerDisabledTime",
        "inputType": "InputSignal<XTimePickerDisabledTime>",
        "signal": "input",
        "label": "Disabled time",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  validator",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Initial enable validation, which is automatically enabled when the input value is",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeEmit",
        "type": "number",
        "toType": "",
        "inputType": "OutputEmitterRef<number>",
        "signal": "output",
        "label": "Node click event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XTimePickerProperty",
    "extends": "XFormControlFunction(X_TIME_PICKER_CONFIG_NAME)"
  },
  "XTimePickerType": {
    "type": "type",
    "label": "Time selection",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTimePickerType",
    "value": "'time' | 'hour' | 'minute'"
  },
  "XTimePickerPreset": {
    "type": "interface",
    "label": "Quick selection button",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "func",
        "type": "() => Date",
        "label": "Custom function",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "func",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTimePickerPreset",
    "extends": "XIdentityProperty"
  },
  "XTimePickerPortalPrefix": {
    "type": "const",
    "label": "TimePickerPortal",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTimePickerPortalPrefix",
    "selector": "x-time-picker-portal",
    "decorator": "component",
    "value": "'x-time-picker-portal'"
  },
  "XTimePickerFramePrefix": {
    "type": "const",
    "label": "TimePickerFrame",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTimePickerFramePrefix",
    "selector": "x-time-picker-frame",
    "decorator": "component",
    "value": "'x-time-picker-frame'"
  },
  "XTimePickerDisabledTime": {
    "type": "type",
    "label": "Disable custom type of time",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTimePickerDisabledTime",
    "value": "(param?: any) => XTimePickerDisabledTimeFn"
  },
  "XTimeRangePrefix": {
    "type": "const",
    "label": "TimeRange",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTimeRangePrefix",
    "selector": "xTimeRange",
    "decorator": "pipe",
    "value": "'xTimeRange'"
  },
  "XTimelinePrefix": {
    "type": "const",
    "label": "Timeline",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTimelinePrefix",
    "selector": "x-timeline",
    "decorator": "component",
    "value": "'x-timeline'"
  },
  "XTimelineProperty": {
    "type": "class",
    "label": "Timeline Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XDataArray<XTimelineNode>",
        "toType": "XTimelineNode[]",
        "inputType": "InputSignalWithTransform<XTimelineNode[], XDataArray<XTimelineNode>>",
        "signal": "input",
        "label": "Date",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToDataArray"
      },
      {
        "name": "type",
        "type": "XType",
        "toType": "XType",
        "inputType": "InputSignal<XType>",
        "signal": "input",
        "label": "Type",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "wrapper",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Content template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "mode",
        "type": "XTimelineMode",
        "toType": "XTimelineMode",
        "inputType": "InputSignal<XTimelineMode>",
        "signal": "input",
        "label": "Content and timeline relative position",
        "default": "'left'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XTimelineProperty",
    "extends": "XPropertyFunction(X_TIMELINE_CONFIG_NAME)"
  },
  "XTimelineNode": {
    "type": "interface",
    "label": "Timeline node data",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "time",
        "type": "XDate",
        "label": "Time",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "time",
        "propType": "",
        "example": ""
      },
      {
        "name": "content",
        "type": "string",
        "label": "Content",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "content",
        "propType": "",
        "example": ""
      },
      {
        "name": "size",
        "type": "XSize",
        "label": "Size",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "size",
        "propType": "",
        "example": ""
      },
      {
        "name": "type",
        "type": "XType",
        "label": "Type",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "type",
        "propType": "",
        "example": ""
      },
      {
        "name": "icon",
        "type": "string",
        "label": "Icon",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "icon",
        "propType": "",
        "example": ""
      },
      {
        "name": "color",
        "type": "string",
        "label": "Color",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "color",
        "propType": "",
        "example": ""
      },
      {
        "name": "loading",
        "type": "boolean",
        "label": "Loading",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "loading",
        "propType": "",
        "example": ""
      },
      {
        "name": "dashed",
        "type": "boolean",
        "label": "The connecting line displays a dotted line. For the next node, the dotted line will also be displayed when the next node is in loading status",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "dashed",
        "propType": "",
        "example": ""
      },
      {
        "name": "[property: string]",
        "type": "any",
        "label": "Other property",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "[property: string]",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTimelineNode",
    "extends": "XIdentityProperty"
  },
  "XTooltipPrefix": {
    "type": "const",
    "label": "Tooltip",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTooltipPrefix",
    "selector": "x-tooltip",
    "decorator": "directive",
    "value": "'x-tooltip'"
  },
  "XTooltipProperty": {
    "type": "class",
    "label": "Tooltip Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "content",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Content",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "placement",
        "type": "XPlacement",
        "toType": "XPlacement",
        "inputType": "InputSignal<XPlacement>",
        "signal": "input",
        "label": "Display position",
        "default": "'top'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "visible",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Show/hide",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "panelClass",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "panel class",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "connectTo",
        "type": "ElementRef<HTMLElement> | HTMLElement",
        "toType": "ElementRef<HTMLElement> | HTMLElement",
        "inputType": "InputSignal<ElementRef<HTMLElement> | HTMLElement>",
        "signal": "input",
        "label": "specify reference object",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "backgroundColor",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Background color",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "color",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Text color",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "manual",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Manually handle the shutdown event",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "mouseEnterDelay",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "How much is the mouse transfer after transfer",
        "default": "150",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "mouseLeaveDelay",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "How much hidden is hidden after the mouse is removed",
        "default": "100",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disable display",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XTooltipProperty",
    "extends": "XPropertyFunction(X_TOOLTIP_CONFIG_NAME)"
  },
  "XTooltipPortalPrefix": {
    "type": "const",
    "label": "Tooltip Portal",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTooltipPortalPrefix",
    "selector": "x-tooltip-portal",
    "decorator": "component",
    "value": "'x-tooltip-portal'"
  },
  "XTransferPrefix": {
    "type": "const",
    "label": "Transfer",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTransferPrefix",
    "selector": "x-transfer",
    "decorator": "component",
    "value": "'x-transfer'"
  },
  "XTransferProperty": {
    "type": "class",
    "label": "Transfer Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XData<XTransferNode>",
        "toType": "XData<XTransferNode>",
        "inputType": "InputSignal<XData<XTransferNode>>",
        "signal": "input",
        "label": "Data object",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "type",
        "type": "XTransferType",
        "toType": "XTransferType",
        "inputType": "InputSignal<XTransferType>",
        "signal": "input",
        "label": "Type",
        "default": "'list'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "titles",
        "type": "string[] | null",
        "toType": "string[] | null",
        "inputType": "InputSignal<string[] | null>",
        "signal": "input",
        "label": "Title",
        "default": "['List', 'Selected']",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "listStyle",
        "type": "XTransferListStyle | null",
        "toType": "XTransferListStyle | null",
        "inputType": "InputSignal<XTransferListStyle | null>",
        "signal": "input",
        "label": "shuttle box style, same as ngStyle",
        "default": "null",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "hiddenCheckAll",
        "type": "boolean[]",
        "toType": "boolean[]",
        "inputType": "InputSignal<boolean[]>",
        "signal": "input",
        "label": "Hidden check all",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "drag",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Can drag",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "search",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether to display search",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "tableHeadSearchTpl",
        "type": "XTemplate[]",
        "toType": "XTemplate[]",
        "inputType": "InputSignal<XTemplate[]>",
        "signal": "input",
        "label": "table head search custom template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeTpl",
        "type": "TemplateRef<void>",
        "toType": "TemplateRef<void>",
        "inputType": "InputSignal<TemplateRef<void>>",
        "signal": "input",
        "label": "Data customization template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "titleTpl",
        "type": "TemplateRef<void>",
        "toType": "TemplateRef<void>",
        "inputType": "InputSignal<TemplateRef<void>>",
        "signal": "input",
        "label": "Title custom template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "footerTpl",
        "type": "TemplateRef<void>[]",
        "toType": "TemplateRef<void>[]",
        "inputType": "InputSignal<TemplateRef<void>[]>",
        "signal": "input",
        "label": "Bottom Custom Template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tableColumns",
        "type": "XTableColumn[]",
        "toType": "XTableColumn[]",
        "inputType": "InputSignal<XTableColumn[]>",
        "signal": "input",
        "label": "Table column set",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tableIndex",
        "type": "number",
        "toType": "number",
        "inputType": "ModelSignal<number>",
        "signal": "model",
        "label": "Table page number",
        "default": "1",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tableSize",
        "type": "number",
        "toType": "number",
        "inputType": "ModelSignal<number>",
        "signal": "model",
        "label": "Number of data items per page",
        "default": "10",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tableQuery",
        "type": "XQuery",
        "toType": "XQuery",
        "inputType": "InputSignal<XQuery>",
        "signal": "input",
        "label": "Number of data items per page",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "tableTotal",
        "type": "number",
        "toType": "number",
        "inputType": "ModelSignal<number>",
        "signal": "model",
        "label": "Total number of table data",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "inverse",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Inverse select",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      }
    ],
    "name": "XTransferProperty",
    "extends": "XFormControlFunction(X_TRANSFER_CONFIG_NAME)"
  },
  "XTransferNode": {
    "type": "interface",
    "label": "Transfer Node",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "checked",
        "type": "boolean",
        "label": "whether checkbox is selected",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "checked",
        "propType": "",
        "example": ""
      },
      {
        "name": "index",
        "type": "number",
        "label": "Serial number",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "index",
        "propType": "",
        "example": ""
      },
      {
        "name": "[property: string]",
        "type": "any",
        "label": "Custom property",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "[property: string]",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTransferNode",
    "extends": "XParentIdentityProperty<XTransferNode>"
  },
  "XTransferSource": {
    "type": "interface",
    "label": "Transfer Source",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "title",
        "type": "string",
        "label": "Title",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "title",
        "propType": "",
        "example": ""
      },
      {
        "name": "searchInput",
        "type": "string",
        "label": "Searched data",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "searchInput",
        "propType": "",
        "example": ""
      },
      {
        "name": "checkedAll",
        "type": "boolean",
        "label": "Select all",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "checkedAll",
        "propType": "",
        "example": ""
      },
      {
        "name": "checkedCount",
        "type": "number",
        "label": "Selected quantity",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "checkedCount",
        "propType": "",
        "example": ""
      },
      {
        "name": "count",
        "type": "number",
        "label": "Total number of selectable data",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "count",
        "propType": "",
        "example": ""
      },
      {
        "name": "indeterminate",
        "type": "boolean",
        "label": "Uncertain state style",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "indeterminate",
        "propType": "",
        "example": ""
      },
      {
        "name": "list",
        "type": "XTransferNode[]",
        "label": "List data",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "list",
        "propType": "",
        "example": ""
      },
      {
        "name": "searchList",
        "type": "XTransferNode[]",
        "label": "Search data to restore",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "searchList",
        "propType": "",
        "example": ""
      },
      {
        "name": "disabledButton",
        "type": "boolean",
        "label": "Button disabled",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "disabledButton",
        "propType": "",
        "example": ""
      },
      {
        "name": "hiddenCheckAll",
        "type": "boolean",
        "label": "Hidden check all",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "hiddenCheckAll",
        "propType": "",
        "example": ""
      },
      {
        "name": "listStyle",
        "type": "XStyleMap",
        "label": "List style",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "listStyle",
        "propType": "",
        "example": ""
      },
      {
        "name": "direction",
        "type": "XTransferDirection",
        "label": "Data direction",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "direction",
        "propType": "",
        "example": ""
      },
      {
        "name": "footerTpl",
        "type": "TemplateRef<any>",
        "label": "Bottom Custom Template",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "footerTpl",
        "propType": "",
        "example": ""
      },
      {
        "name": "tableHeadSearchTpl",
        "type": "XTemplate",
        "label": "table head search custom template",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "tableHeadSearchTpl",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTransferSource"
  },
  "XTransferDirection": {
    "type": "type",
    "label": "Transfer direction",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTransferDirection",
    "value": "'left' | 'right'"
  },
  "XTransferType": {
    "type": "type",
    "label": "Transfer type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTransferType",
    "value": "'list' | 'tree' | 'table'"
  },
  "XTreePrefix": {
    "type": "const",
    "label": "Tree",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTreePrefix",
    "selector": "x-tree",
    "decorator": "component",
    "value": "'x-tree'"
  },
  "XTreeProperty": {
    "type": "class",
    "label": "Tree Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XData<XTreeNode>",
        "toType": "XData<XTreeNode>",
        "inputType": "InputSignal<XData<XTreeNode>>",
        "signal": "input",
        "label": "Node data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "checkbox",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show checkbox",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "lazy",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Open lazy loading node, data must be set to function type",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "activatedId",
        "type": "any",
        "toType": "any",
        "inputType": "ModelSignal<any>",
        "signal": "model",
        "label": "Currently active node Id. When Multiple is true, the value is the Id array",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "expanded",
        "type": "any[]",
        "toType": "any[]",
        "inputType": "ModelSignal<any[]>",
        "signal": "model",
        "label": "Expanded node",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "checked",
        "type": "any[]",
        "toType": "any[]",
        "inputType": "ModelSignal<any[]>",
        "signal": "model",
        "label": "Checkbox selected node",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "expandedAll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Expand all nodes",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "expandedLevel",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Default expanded level",
        "default": "-1",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "nodeOpen",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Click the node to trigger the expand/collapse operation, please make sure that there are no other operations on the node (checkbox, custom operation button)",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "spacing",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Unit spacing, the product of this and the level calculates the left margin of the node",
        "default": "'1.5rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "labelTpl",
        "type": "TemplateRef<void>",
        "toType": "TemplateRef<void>",
        "inputType": "InputSignal<TemplateRef<void>>",
        "signal": "input",
        "label": "Label custom template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeHeight",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "The height of the node",
        "default": "''",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "allowManyActivated",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Whether to allow multiple clicks on a node to trigger multiple events",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "drag",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Drag node",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "activatedChange",
        "type": "XTreeNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XTreeNode>",
        "signal": "output",
        "label": "The event of the currently clicked node change",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "checkboxChange",
        "type": "XTreeNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XTreeNode>",
        "signal": "output",
        "label": "Use checkedbox to select changed events",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "manual",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "If data is a function type, you can use this parameter to control the request, which is often used in the form in the pop-up box, and then request it after it pops up",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "levelCheck",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Checkbox status changes trigger level checks",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "nodeNowrap",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show ellipsis without wrapping",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "nodeAlignItems",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Show ellipsis without wrapping",
        "default": "'center'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "actions",
        "type": "XTreeAction[]",
        "toType": "XTreeAction[]",
        "inputType": "InputSignal<XTreeAction[]>",
        "signal": "input",
        "label": "Tree node operation buttons",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "scrollElement",
        "type": "HTMLElement",
        "toType": "HTMLElement",
        "inputType": "InputSignal<HTMLElement>",
        "signal": "input",
        "label": "Rolling area element",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "virtualScroll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Turn on virtual scrolling",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "virtualScrollHeight",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Rolling area height",
        "default": "'400px'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "heightAdaption",
        "type": "HTMLElement",
        "toType": "HTMLElement",
        "inputType": "InputSignal<HTMLElement>",
        "signal": "input",
        "label": "virtual rolling height follows the specified object",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "itemSize",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "itemSize，corresponding to the parameters in cdk scroll",
        "default": "34",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "minBufferPx",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Exceed the minimum value of the visible window buffer, corresponding to the parameters in cdk scroll",
        "default": "100",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "maxBufferPx",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Render the pixels of the new data buffer, corresponding to the parameters in cdk scroll",
        "default": "200",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "multiple",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Multiple choice",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "objectArray",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "When multiple selection is enabled, the value of activatedId is an array of objects",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "keywordText",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Keyword highlighting",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "caseSensitive",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Case-sensitive",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "onlyLeaf",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Only leaf nodes can be selected",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "expandedIcon",
        "type": "TemplateRef<void>",
        "toType": "TemplateRef<void>",
        "inputType": "InputSignal<TemplateRef<void>>",
        "signal": "input",
        "label": "Expand the folded icon custom template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showLine",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show line",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "nodeClick",
        "type": "XTreeNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XTreeNode>",
        "signal": "output",
        "label": "Node click event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeDragStarted",
        "type": "XTreeNodeDragEvent",
        "toType": "",
        "inputType": "OutputEmitterRef<XTreeNodeDragEvent>",
        "signal": "output",
        "label": "Node drag started",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeDragEnded",
        "type": "XTreeNodeDragEvent",
        "toType": "",
        "inputType": "OutputEmitterRef<XTreeNodeDragEvent>",
        "signal": "output",
        "label": "Node drag ended",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeDragMoved",
        "type": "XTreeNodeDragEvent",
        "toType": "",
        "inputType": "OutputEmitterRef<XTreeNodeDragEvent>",
        "signal": "output",
        "label": "Node drag moved",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XTreeProperty",
    "extends": "XPropertyFunction(X_TREE_CONFIG_NAME)"
  },
  "XTreeNode": {
    "type": "interface",
    "label": "Tree data object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "activated",
        "type": "boolean",
        "label": "active",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "activated",
        "propType": "",
        "example": ""
      },
      {
        "name": "change",
        "type": "Function",
        "label": "Check for updates",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "change",
        "propType": "",
        "example": ""
      },
      {
        "name": "checked",
        "type": "boolean",
        "label": "whether checkbox is selected",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "checked",
        "propType": "",
        "example": ""
      },
      {
        "name": "disabled",
        "type": "boolean",
        "label": "Disable checkbox",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "disabled",
        "propType": "",
        "example": ""
      },
      {
        "name": "indeterminate",
        "type": "boolean",
        "label": "Whether the child node of checkbox is selected",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "indeterminate",
        "propType": "",
        "example": ""
      },
      {
        "name": "height",
        "type": "string",
        "label": "Node height, highest priority",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "height",
        "propType": "",
        "example": ""
      },
      {
        "name": "nowrap",
        "type": "boolean",
        "label": "Show ellipsis without wrapping, highest priority",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "nowrap",
        "propType": "",
        "example": ""
      },
      {
        "name": "alignItems",
        "type": "XAlign",
        "label": "Show ellipsis without wrapping, highest priority",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "alignItems",
        "propType": "",
        "example": ""
      },
      {
        "name": "loading",
        "type": "boolean",
        "label": "Node lazy loading",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "loading",
        "propType": "",
        "example": ""
      },
      {
        "name": "showDragIndicator",
        "type": "boolean",
        "label": "Show drag indicator",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "showDragIndicator",
        "propType": "",
        "example": ""
      },
      {
        "name": "[property: string]",
        "type": "any",
        "label": "Custom attributes",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "[property: string]",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTreeNode",
    "extends": "XParentIdentityProperty<XTreeNode>"
  },
  "XTreeAction": {
    "type": "interface",
    "label": "Tree node operation",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "handler",
        "type": "Function",
        "label": "Operating",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "handler",
        "propType": "",
        "example": ""
      },
      {
        "name": "icon",
        "type": "string",
        "label": "Icon",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "icon",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTreeAction",
    "extends": "XIdentityProperty"
  },
  "XTreeNodeDragEvent": {
    "type": "interface",
    "label": "Tree node drag event",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "event",
        "type": "CdkDragStart | CdkDragEnd | CdkDragMove<XTreeNode>",
        "label": "drag cdk event",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "event",
        "propType": "",
        "example": ""
      },
      {
        "name": "from",
        "type": "XTreeNode",
        "label": "drag node",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "from",
        "propType": "",
        "example": ""
      },
      {
        "name": "to",
        "type": "XTreeNode",
        "label": "Node corresponding to the position to drag",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "to",
        "propType": "",
        "example": ""
      },
      {
        "name": "position",
        "type": "-1 | 1",
        "label": "The front or back of the corresponding node",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "position",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTreeNodeDragEvent"
  },
  "XTreeNodePrefix": {
    "type": "const",
    "label": "TreeNode",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTreeNodePrefix",
    "selector": "x-tree-node",
    "decorator": "directive",
    "value": "'x-tree-node'"
  },
  "XTreeNodeProperty": {
    "type": "class",
    "label": "TreeNode Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "node",
        "type": "XTreeNode",
        "toType": "XTreeNode",
        "inputType": "InputSignal<XTreeNode>",
        "signal": "input",
        "label": "Node data",
        "default": "{}",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "level",
        "type": "number | undefined",
        "toType": "number | undefined",
        "inputType": "ModelSignal<number | undefined>",
        "signal": "model",
        "label": "Level",
        "default": "0",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeHeight",
        "type": "string",
        "toType": "string",
        "inputType": "ModelSignal<string>",
        "signal": "model",
        "label": "The height of the node",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeNowrap",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Show ellipsis without wrapping",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeAlignItems",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "ModelSignal<XAlign>",
        "signal": "model",
        "label": "Show ellipsis without wrapping",
        "default": "'center'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "virtualScroll",
        "type": "boolean | undefined",
        "toType": "boolean | undefined",
        "inputType": "ModelSignal<boolean | undefined>",
        "signal": "model",
        "label": "Mark as a node of virtual rolling",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "disabled",
        "type": "boolean | undefined",
        "toType": "boolean | undefined",
        "inputType": "ModelSignal<boolean | undefined>",
        "signal": "model",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "id",
        "type": "any",
        "toType": "any",
        "inputType": "ModelSignal<any>",
        "signal": "model",
        "label": "Id",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "pid",
        "type": "any",
        "toType": "any",
        "inputType": "ModelSignal<any>",
        "signal": "model",
        "label": "pId",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "leaf",
        "type": "boolean | undefined",
        "toType": "boolean | undefined",
        "inputType": "ModelSignal<boolean | undefined>",
        "signal": "model",
        "label": "A leaf node",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "height",
        "type": "string",
        "toType": "string",
        "inputType": "ModelSignal<string>",
        "signal": "model",
        "label": "The height of the node",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "alignItems",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "ModelSignal<XAlign>",
        "signal": "model",
        "label": "Show ellipsis without wrapping",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "loading",
        "type": "boolean | undefined",
        "toType": "boolean | undefined",
        "inputType": "ModelSignal<boolean | undefined>",
        "signal": "model",
        "label": "Show ellipsis without wrapping",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "open",
        "type": "boolean | undefined",
        "toType": "boolean | undefined",
        "inputType": "ModelSignal<boolean | undefined>",
        "signal": "model",
        "label": "open",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "checked",
        "type": "boolean | undefined",
        "toType": "boolean | undefined",
        "inputType": "ModelSignal<boolean | undefined>",
        "signal": "model",
        "label": "whether checkbox is selected",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "indeterminate",
        "type": "boolean | undefined",
        "toType": "boolean | undefined",
        "inputType": "ModelSignal<boolean | undefined>",
        "signal": "model",
        "label": "Whether the child node of checkbox is selected",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "label",
        "type": "string | undefined",
        "toType": "string | undefined",
        "inputType": "ModelSignal<string | undefined>",
        "signal": "model",
        "label": "The name of the node",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nowrap",
        "type": "boolean | undefined",
        "toType": "boolean | undefined",
        "inputType": "ModelSignal<boolean | undefined>",
        "signal": "model",
        "label": "Show ellipsis without wrapping, highest priority",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "toggle",
        "type": "XTreeNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XTreeNode>",
        "signal": "output",
        "label": "Node expansion pack up",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XTreeNodeProperty",
    "extends": "XProperty"
  },
  "XTreeFilePrefix": {
    "type": "const",
    "label": "TreeFile",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTreeFilePrefix",
    "selector": "x-tree-file",
    "decorator": "component",
    "value": "'x-tree-file'"
  },
  "XTreeFileProperty": {
    "type": "class",
    "label": "TreeFile Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XData<XTreeFileNode>",
        "toType": "XData<XTreeFileNode>",
        "inputType": "InputSignal<XData<XTreeFileNode>>",
        "signal": "input",
        "label": "Node data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "domain",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "File absolute path address prefix, empty means to take the address of the current operation",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "toggle",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Switch state",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "showToggle",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show toggle button",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "showTree",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show the tree, hide the toggle button when true",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "showCrumb",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Show breadcrumbs",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "maxHeight",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Maximum height",
        "default": "'37.5rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "spacing",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Unit spacing, the product of this and the level calculates the left margin of the node",
        "default": "'1rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "activatedId",
        "type": "any",
        "toType": "any",
        "inputType": "ModelSignal<any>",
        "signal": "model",
        "label": "Currently active node Id. When Multiple is true, the value is the Id array",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "expanded",
        "type": "any[]",
        "toType": "any[]",
        "inputType": "InputSignal<any[]>",
        "signal": "input",
        "label": "Expanded node",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "expandedAll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Expand all nodes",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "expandedLevel",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Default expanded level",
        "default": "-1",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      }
    ],
    "name": "XTreeFileProperty",
    "extends": "XPropertyFunction(X_TREE_FILE_CONFIG_NAME)"
  },
  "XTreeFileNode": {
    "type": "interface",
    "label": "TreeFile data object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "children",
        "type": "XTreeFileNode[]",
        "label": "Child node",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "children",
        "propType": "",
        "example": ""
      },
      {
        "name": "content",
        "type": "string",
        "label": "Document content",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "content",
        "propType": "",
        "example": ""
      },
      {
        "name": "type",
        "type": "string",
        "label": "File type",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "type",
        "propType": "",
        "example": ""
      },
      {
        "name": "fileType",
        "type": "XTreeFileType",
        "label": "File classification",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "fileType",
        "propType": "",
        "example": ""
      },
      {
        "name": "url",
        "type": "string",
        "label": "File address, the configured address will load the file content from url",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "url",
        "propType": "",
        "example": ""
      },
      {
        "name": "crumbData",
        "type": "XCrumbNode[]",
        "label": "Breadcrumb data",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "crumbData",
        "propType": "",
        "example": ""
      },
      {
        "name": "contentLoaded",
        "type": "boolean",
        "label": "File content has been loaded",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "contentLoaded",
        "propType": "",
        "example": ""
      },
      {
        "name": "highlightLines",
        "type": "XHighlightLines",
        "label": "Line highlight coloring",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "highlightLines",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTreeFileNode",
    "extends": "XTreeNode"
  },
  "XTreeFileType": {
    "type": "type",
    "label": "File classification",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTreeFileType",
    "value": "'code' | 'img'"
  },
  "XTreeFileImgs": {
    "type": "const",
    "label": "Supported picture format",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTreeFileImgs",
    "value": "['webp', 'png', 'jpg', 'gif', 'jpeg', 'ico']"
  },
  "XTreeSelectPrefix": {
    "type": "const",
    "label": "Tree Select",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTreeSelectPrefix",
    "selector": "x-tree-select",
    "decorator": "component",
    "value": "'x-tree-select'"
  },
  "XTreeSelectProperty": {
    "type": "class",
    "label": "Tree Select Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "data",
        "type": "XData<XTreeSelectNode>",
        "toType": "XData<XTreeSelectNode>",
        "inputType": "InputSignalWithTransform<XData<XTreeSelectNode>, XData<XTreeSelectNode>>",
        "signal": "input",
        "label": "Node data",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToDataConvert"
      },
      {
        "name": "clearable",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Clear button",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "async",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Asynchronous loading",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "placement",
        "type": "XPositionTopBottom",
        "toType": "XPositionTopBottom",
        "inputType": "InputSignal<XPositionTopBottom>",
        "signal": "input",
        "label": "Display position",
        "default": "'bottom'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "multiple",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Multiple choice",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "selectAll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Multi choice to add full selection function",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "selectAllText",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Selected all text",
        "default": "''",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "nodeTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "expandedLevel",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Default expanded level",
        "default": "-1",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "bordered",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display Border",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "portalMaxHeight",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "The biggest height of the drop-down box",
        "default": "'12rem'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "search",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input search",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "caseSensitive",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Case-sensitive",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "debounceTime",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Enter a delay execution time, ms",
        "default": "200",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "maxTagCount",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Display the number of data in the maximum election, and the others are displayed in more of them",
        "default": "-1",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "maxTagContent",
        "type": "XTemplate | undefined",
        "toType": "XTemplate | undefined",
        "inputType": "InputSignal<XTemplate | undefined>",
        "signal": "input",
        "label": "The number displayed when multiple choices exceeds the specified number, the displayed text template displayed",
        "default": "'更多{{surplus}}个选中'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "virtualScroll",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Turn on virtual scrolling",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "showPath",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Display value display path. AA > BB > CC",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "separator",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Path separator",
        "default": "' / '",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "onlyLeaf",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Only leaf nodes can be selected",
        "default": "false",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  size",
        "type": "XSize",
        "toType": "XSize",
        "inputType": "InputSignal<XSize>",
        "signal": "input",
        "label": "Size",
        "default": "'medium'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pointer",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Input pointer",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  label",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Label",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  labelWidth",
        "type": "XNumber",
        "toType": "string",
        "inputType": "InputSignalWithTransform<string, XNumber>",
        "signal": "input",
        "label": "Label width",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToCssPixelValue"
      },
      {
        "name": "override  labelAlign",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "Label text alignment method",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  justify",
        "type": "XJustify",
        "toType": "XJustify",
        "inputType": "InputSignal<XJustify>",
        "signal": "input",
        "label": "The level of sub-element level arrangement under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  align",
        "type": "XAlign",
        "toType": "XAlign",
        "inputType": "InputSignal<XAlign>",
        "signal": "input",
        "label": "sub-element vertical arrangement method under flex layout",
        "default": "'start'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  direction",
        "type": "XDirection",
        "toType": "XDirection",
        "inputType": "InputSignal<XDirection>",
        "signal": "input",
        "label": "The direction of the sub-element arrangement under flex layout",
        "default": "'column'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  placeholder",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Enter prompt information",
        "default": "''",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  disabled",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Disabled",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  required",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Required",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  readonly",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Readonly",
        "default": "true",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "override  valueTpl",
        "type": "TemplateRef<any>",
        "toType": "TemplateRef<any>",
        "inputType": "InputSignal<TemplateRef<any>>",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  valueTplContext",
        "type": "",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Node template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  before",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Before label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  after",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "After label",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  pattern",
        "type": "RegExp | RegExp[] | any",
        "toType": "RegExp | RegExp[] | any",
        "inputType": "InputSignal<RegExp | RegExp[] | any>",
        "signal": "input",
        "label": "Regular verification rules",
        "default": "null",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  message",
        "type": "string | string[]",
        "toType": "string | string[]",
        "inputType": "InputSignal<string | string[]>",
        "signal": "input",
        "label": "Verify not pass the prompt text",
        "default": "[]",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  active",
        "type": "boolean",
        "toType": "boolean",
        "inputType": "ModelSignal<boolean>",
        "signal": "model",
        "label": "Activation state",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "override  inputValidator",
        "type": "<",
        "toType": "",
        "inputType": "",
        "signal": "input",
        "label": "Enter the verification function",
        "default": "value: any",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XTreeSelectProperty",
    "extends": "XFormControlFunction(X_TREE_SELECT_CONFIG_NAME)"
  },
  "XTreeSelectNode": {
    "type": "interface",
    "label": "Tree Select data object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "path",
        "type": "string",
        "label": "Current node path name",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "path",
        "propType": "",
        "example": ""
      },
      {
        "name": "[property: string]",
        "type": "any",
        "label": "Custom attribute",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "[property: string]",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XTreeSelectNode",
    "extends": "XParentIdentityProperty<XTreeSelectNode>"
  },
  "XTreeSelectPortalPrefix": {
    "type": "const",
    "label": "Tree Select Portal",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XTreeSelectPortalPrefix",
    "selector": "x-tree-select-portal",
    "decorator": "component",
    "value": "'x-tree-select-portal'"
  },
  "XUploadPrefix": {
    "type": "const",
    "label": "Upload",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XUploadPrefix",
    "selector": "x-upload",
    "decorator": "component",
    "value": "'x-upload'"
  },
  "XUploadProperty": {
    "type": "class",
    "label": "Upload Property",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "text",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "Display text",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "action",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Request address",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "accept",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Upload file type, consistent with native input file component",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "type",
        "type": "XUploadType",
        "toType": "XUploadType",
        "inputType": "InputSignal<XUploadType>",
        "signal": "input",
        "label": "File display type",
        "default": "'list'",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "imgFallback",
        "type": "string",
        "toType": "string",
        "inputType": "InputSignal<string>",
        "signal": "input",
        "label": "Photo type below loading failed display",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "imgCut",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Picture cropping",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "multiple",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "Multiple file upload",
        "default": "false",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "download",
        "type": "XBoolean",
        "toType": "boolean",
        "inputType": "InputSignalWithTransform<boolean, XBoolean>",
        "signal": "input",
        "label": "click download",
        "default": "true",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": "XToBoolean"
      },
      {
        "name": "multipleModel",
        "type": "XUploadMultipleModel",
        "toType": "XUploadMultipleModel",
        "inputType": "InputSignal<XUploadMultipleModel>",
        "signal": "input",
        "label": "For many upload mode, 'cover' covers the existing, 'add' continue to add",
        "default": "'cover'",
        "withConfig": true,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "filesTpl",
        "type": "XTemplate",
        "toType": "XTemplate",
        "inputType": "InputSignal<XTemplate>",
        "signal": "input",
        "label": "File list custom display template",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "maxLimit",
        "type": "XNumber",
        "toType": "number",
        "inputType": "InputSignalWithTransform<number, XNumber>",
        "signal": "input",
        "label": "Limit the number of files uploaded files. Do not restrict the default",
        "default": "-1",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": "XToNumber"
      },
      {
        "name": "headers",
        "type": "{ [key: string]: any }",
        "toType": "{ [key: string]: any }",
        "inputType": "InputSignal<{ [key: string]: any }>",
        "signal": "input",
        "label": "Set the upload request header",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "removeClick",
        "type": "{ file: XUploadNode; index: number }",
        "toType": "",
        "inputType": "OutputEmitterRef<{ file: XUploadNode; index: number }>",
        "signal": "output",
        "label": "Delete button event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "uploadReady",
        "type": "XUploadNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XUploadNode>",
        "signal": "output",
        "label": "Start upload event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "uploading",
        "type": "XUploadNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XUploadNode>",
        "signal": "output",
        "label": "Start upload event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "uploadSuccess",
        "type": "XUploadNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XUploadNode>",
        "signal": "output",
        "label": "Start upload event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      },
      {
        "name": "uploadError",
        "type": "XUploadNode",
        "toType": "",
        "inputType": "OutputEmitterRef<XUploadNode>",
        "signal": "output",
        "label": "Start upload event",
        "default": "",
        "withConfig": false,
        "description": "",
        "example": "",
        "transform": ""
      }
    ],
    "name": "XUploadProperty",
    "extends": "XFormControlFunction(X_UPLOAD_CONFIG_NAME)"
  },
  "XUploadNode": {
    "type": "interface",
    "label": "Upload data object",
    "description": "",
    "example": "",
    "properties": [
      {
        "name": "url",
        "type": "string",
        "label": "address",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "url",
        "propType": "",
        "example": ""
      },
      {
        "name": "state",
        "type": "XStateType",
        "label": "status",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "state",
        "propType": "",
        "example": ""
      },
      {
        "name": "percent",
        "type": "XNumber",
        "label": "Upload progress",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "percent",
        "propType": "",
        "example": ""
      },
      {
        "name": "body",
        "type": "any",
        "label": "Upload body",
        "default": "",
        "withConfig": false,
        "description": "",
        "decorator": [],
        "attr": "body",
        "propType": "",
        "example": ""
      }
    ],
    "name": "XUploadNode",
    "extends": "File"
  },
  "XStateType": {
    "type": "type",
    "label": "File status",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XStateType",
    "value": "'ready' | 'uploading' | 'success' | 'error'"
  },
  "XUploadType": {
    "type": "type",
    "label": "File display type",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XUploadType",
    "value": "'list' | 'img'"
  },
  "XUploadMultipleModel": {
    "type": "type",
    "label": "For many upload mode, 'cover' covers the existing, 'add' continue to add",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XUploadMultipleModel",
    "value": "'cover' | 'add'"
  },
  "XUploadCutType": {
    "type": "type",
    "label": "Tailored orientation",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XUploadCutType",
    "value": "XPosition | XCorner | ''"
  },
  "XUploadPortalPrefix": {
    "type": "const",
    "label": "Upload portal",
    "description": "",
    "example": "",
    "properties": [],
    "name": "XUploadPortalPrefix",
    "selector": "x-upload-portal",
    "decorator": "component",
    "value": "'x-upload-portal'"
  }
}